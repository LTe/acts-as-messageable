# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/oauth2/all/oauth2.rbi
#
# oauth2-1.4.4

module OAuth2
end
class OAuth2::Error < StandardError
  def code; end
  def description; end
  def error_message(response_body, opts = nil); end
  def initialize(response); end
  def response; end
end
class OAuth2::Authenticator
  def apply(params); end
  def apply_basic_auth(params); end
  def apply_client_id(params); end
  def apply_params_auth(params); end
  def basic_auth_header; end
  def id; end
  def initialize(id, secret, mode); end
  def mode; end
  def secret; end
  def self.encode_basic_auth(user, password); end
end
class OAuth2::Client
  def assertion; end
  def auth_code; end
  def authorize_url(params = nil); end
  def client_credentials; end
  def connection; end
  def connection=(arg0); end
  def get_token(params, access_token_opts = nil, access_token_class = nil); end
  def id; end
  def implicit; end
  def initialize(client_id, client_secret, options = nil, &block); end
  def options; end
  def options=(arg0); end
  def password; end
  def redirection_params; end
  def request(verb, url, opts = nil); end
  def secret; end
  def site; end
  def site=(value); end
  def token_url(params = nil); end
end
module OAuth2::Strategy
end
class OAuth2::Strategy::Base
  def initialize(client); end
end
class OAuth2::Strategy::AuthCode < OAuth2::Strategy::Base
  def authorize_params(params = nil); end
  def authorize_url(params = nil); end
  def get_token(code, params = nil, opts = nil); end
end
class OAuth2::Strategy::Implicit < OAuth2::Strategy::Base
  def authorize_params(params = nil); end
  def authorize_url(params = nil); end
  def get_token(*arg0); end
end
class OAuth2::Strategy::Password < OAuth2::Strategy::Base
  def authorize_url; end
  def get_token(username, password, params = nil, opts = nil); end
end
class OAuth2::Strategy::ClientCredentials < OAuth2::Strategy::Base
  def authorize_url; end
  def get_token(params = nil, opts = nil); end
end
class OAuth2::Strategy::Assertion < OAuth2::Strategy::Base
  def authorize_url; end
  def build_assertion(params); end
  def build_request(params); end
  def get_token(params = nil, opts = nil); end
end
class OAuth2::AccessToken
  def [](key); end
  def client; end
  def configure_authentication!(opts); end
  def convert_expires_at(expires_at); end
  def delete(path, opts = nil, &block); end
  def expired?; end
  def expires?; end
  def expires_at; end
  def expires_in; end
  def get(path, opts = nil, &block); end
  def headers; end
  def initialize(client, token, opts = nil); end
  def options; end
  def options=(arg0); end
  def params; end
  def patch(path, opts = nil, &block); end
  def post(path, opts = nil, &block); end
  def put(path, opts = nil, &block); end
  def refresh!(params = nil); end
  def refresh_token; end
  def refresh_token=(arg0); end
  def request(verb, path, opts = nil, &block); end
  def self.from_hash(client, hash); end
  def self.from_kvform(client, kvform); end
  def to_hash; end
  def token; end
end
class OAuth2::MACToken < OAuth2::AccessToken
  def algorithm; end
  def algorithm=(alg); end
  def header(verb, url); end
  def headers; end
  def initialize(client, token, secret, opts = nil); end
  def request(verb, path, opts = nil, &block); end
  def secret; end
  def self.from_access_token(token, secret, options = nil); end
  def signature(timestamp, nonce, verb, uri); end
  def strict_encode64(str); end
  def token=(_noop); end
end
class OAuth2::Response
  def body; end
  def content_type; end
  def error; end
  def error=(arg0); end
  def headers; end
  def initialize(response, opts = nil); end
  def options; end
  def options=(arg0); end
  def parsed; end
  def parser; end
  def response; end
  def self.register_parser(key, mime_types, &block); end
  def status; end
end
