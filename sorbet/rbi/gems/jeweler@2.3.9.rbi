# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jeweler` gem.
# Please instead update this file by running `bin/tapioca gem jeweler`.

# A Jeweler helps you craft the perfect Rubygem. Give him a gemspec, and he takes care of the rest.
#
# See Jeweler::Tasks for examples of how to get started. Additionally, resources are available on the wiki:
#
# * http://wiki.github.com/technicalpickles/jeweler/create-a-new-project
# * http://wiki.github.com/technicalpickles/jeweler/configure-an-existing-project
#
# source://jeweler//lib/jeweler/version.rb#1
class Jeweler
  # @raise [GemspecError]
  # @return [Jeweler] a new instance of Jeweler
  #
  # source://jeweler//lib/jeweler.rb#32
  def initialize(gemspec, base_dir = T.unsafe(nil)); end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler.rb#30
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler.rb#30
  def base_dir=(_arg0); end

  # Build a gem using the project's latest Gem::Specification
  #
  # source://jeweler//lib/jeweler.rb#87
  def build_gem; end

  # Bumps the major version.
  #
  # 1.5.1 -> 2.0.0
  #
  # source://jeweler//lib/jeweler.rb#113
  def bump_major_version; end

  # Bumps the minor version.
  #
  # 1.5.1 -> 1.6.0
  #
  # source://jeweler//lib/jeweler.rb#106
  def bump_minor_version; end

  # Bumps the patch version.
  #
  # 1.5.1 -> 1.5.2
  #
  # source://jeweler//lib/jeweler.rb#99
  def bump_patch_version; end

  # source://jeweler//lib/jeweler.rb#148
  def check_dependencies(type = T.unsafe(nil)); end

  # Returns the value of attribute commit.
  #
  # source://jeweler//lib/jeweler.rb#30
  def commit; end

  # Sets the attribute commit
  #
  # @param value the value to set the attribute commit to.
  #
  # source://jeweler//lib/jeweler.rb#30
  def commit=(_arg0); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler.rb#174
  def expects_version_file?; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler.rb#29
  def gemspec; end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler.rb#29
  def gemspec_helper; end

  # source://jeweler//lib/jeweler.rb#155
  def git_base_dir(base_dir = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler.rb#166
  def in_git_repo?; end

  # Install a previously built gem
  #
  # source://jeweler//lib/jeweler.rb#92
  def install_gem; end

  # Major version, as defined by the gemspec's Version module.
  # For 1.5.3, this would return 1.
  #
  # source://jeweler//lib/jeweler.rb#49
  def major_version; end

  # Minor version, as defined by the gemspec's Version module.
  # For 1.5.3, this would return 5.
  #
  # source://jeweler//lib/jeweler.rb#55
  def minor_version; end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler.rb#30
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler.rb#30
  def output=(_arg0); end

  # Patch version, as defined by the gemspec's Version module.
  # For 1.5.3, this would return 5.
  #
  # source://jeweler//lib/jeweler.rb#61
  def patch_version; end

  # source://jeweler//lib/jeweler.rb#140
  def release_gem_to_rubyforge; end

  # source://jeweler//lib/jeweler.rb#136
  def release_gem_to_rubygems; end

  # source://jeweler//lib/jeweler.rb#128
  def release_gemspec(args); end

  # source://jeweler//lib/jeweler.rb#132
  def release_to_git(args); end

  # Returns the value of attribute repo.
  #
  # source://jeweler//lib/jeweler.rb#30
  def repo; end

  # Sets the attribute repo
  #
  # @param value the value to set the attribute repo to.
  #
  # source://jeweler//lib/jeweler.rb#30
  def repo=(_arg0); end

  # source://jeweler//lib/jeweler.rb#144
  def setup_rubyforge; end

  # is the project's gemspec from disk valid?
  #
  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler.rb#82
  def valid_gemspec?; end

  # Validates the project's gemspec from disk in an environment similar to how
  # GitHub would build from it. See http://gist.github.com/16215
  #
  # source://jeweler//lib/jeweler.rb#77
  def validate_gemspec; end

  # Human readable version, which is used in the gemspec.
  #
  # source://jeweler//lib/jeweler.rb#66
  def version; end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler.rb#170
  def version_file_exist?; end

  # Returns the value of attribute version_helper.
  #
  # source://jeweler//lib/jeweler.rb#29
  def version_helper; end

  # Writes out the gemspec
  #
  # source://jeweler//lib/jeweler.rb#71
  def write_gemspec; end

  # Bumps the version, to the specific major/minor/patch version, writing out the appropriate version.rb, and then reloads it.
  #
  # source://jeweler//lib/jeweler.rb#118
  def write_version(major, minor, patch, build, _options = T.unsafe(nil)); end
end

# source://jeweler//lib/jeweler/commands.rb#2
module Jeweler::Commands; end

# source://jeweler//lib/jeweler/commands/build_gem.rb#3
class Jeweler::Commands::BuildGem
  # @return [BuildGem] a new instance of BuildGem
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#6
  def initialize; end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def base_dir=(_arg0); end

  # Returns the value of attribute file_utils.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def file_utils; end

  # Sets the attribute file_utils
  #
  # @param value the value to set the attribute file_utils to.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def file_utils=(_arg0); end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def gemspec_helper=(_arg0); end

  # source://jeweler//lib/jeweler/commands/build_gem.rb#10
  def run; end

  # Returns the value of attribute version_helper.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def version_helper; end

  # Sets the attribute version_helper
  #
  # @param value the value to set the attribute version_helper to.
  #
  # source://jeweler//lib/jeweler/commands/build_gem.rb#4
  def version_helper=(_arg0); end

  class << self
    # source://jeweler//lib/jeweler/commands/build_gem.rb#29
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/check_dependencies.rb#3
class Jeweler::Commands::CheckDependencies
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#48
  def dependencies; end

  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#25
  def find_missing_dependencies; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#8
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#8
  def gemspec=(_arg0); end

  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#10
  def run; end

  # Returns the value of attribute type.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#8
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#8
  def type=(_arg0); end

  class << self
    # source://jeweler//lib/jeweler/commands/check_dependencies.rb#57
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/check_dependencies.rb#4
class Jeweler::Commands::CheckDependencies::MissingDependenciesError < ::RuntimeError
  # Returns the value of attribute dependencies.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#5
  def dependencies; end

  # Sets the attribute dependencies
  #
  # @param value the value to set the attribute dependencies to.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#5
  def dependencies=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#5
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://jeweler//lib/jeweler/commands/check_dependencies.rb#5
  def type=(_arg0); end
end

# source://jeweler//lib/jeweler/commands/install_gem.rb#3
class Jeweler::Commands::InstallGem
  include ::FileUtils::StreamUtils_
  include ::FileUtils

  # @return [InstallGem] a new instance of InstallGem
  #
  # source://jeweler//lib/jeweler/commands/install_gem.rb#8
  def initialize; end

  # source://jeweler//lib/jeweler/commands/install_gem.rb#19
  def gem_command; end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler/commands/install_gem.rb#6
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/install_gem.rb#6
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/install_gem.rb#6
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/install_gem.rb#6
  def output=(_arg0); end

  # source://jeweler//lib/jeweler/commands/install_gem.rb#12
  def run; end

  class << self
    # source://jeweler//lib/jeweler/commands/install_gem.rb#23
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/release_gemspec.rb#5
class Jeweler::Commands::ReleaseGemspec
  # @return [ReleaseGemspec] a new instance of ReleaseGemspec
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#9
  def initialize(attributes = T.unsafe(nil)); end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def base_dir=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#67
  def base_dir_path; end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#37
  def clean_staging_area?; end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#42
  def commit_gemspec!; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def gemspec=(_arg0); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#54
  def gemspec_changed?; end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#59
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#7
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def output=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#49
  def regenerate_gemspec!; end

  # Returns the value of attribute repo.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def repo; end

  # Sets the attribute repo
  #
  # @param value the value to set the attribute repo to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def repo=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#17
  def run(args = T.unsafe(nil)); end

  # Returns the value of attribute version.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#6
  def version=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_gemspec.rb#63
  def working_subdir; end

  class << self
    # source://jeweler//lib/jeweler/commands/release_gemspec.rb#71
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/release_to_git.rb#3
class Jeweler::Commands::ReleaseToGit
  # @return [ReleaseToGit] a new instance of ReleaseToGit
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#6
  def initialize(attributes = T.unsafe(nil)); end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def base_dir=(_arg0); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#37
  def clean_staging_area?; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def gemspec=(_arg0); end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def output=(_arg0); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#45
  def release_not_tagged?; end

  # source://jeweler//lib/jeweler/commands/release_to_git.rb#41
  def release_tag; end

  # Returns the value of attribute repo.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def repo; end

  # Sets the attribute repo
  #
  # @param value the value to set the attribute repo to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def repo=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_to_git.rb#14
  def run(args = T.unsafe(nil)); end

  # Returns the value of attribute version.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_git.rb#4
  def version=(_arg0); end

  class << self
    # source://jeweler//lib/jeweler/commands/release_to_git.rb#54
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#3
class Jeweler::Commands::ReleaseToRubygems
  include ::FileUtils::StreamUtils_
  include ::FileUtils

  # @return [ReleaseToRubygems] a new instance of ReleaseToRubygems
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#8
  def initialize; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def gemspec=(_arg0); end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def output=(_arg0); end

  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#12
  def run; end

  # Returns the value of attribute version.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#6
  def version=(_arg0); end

  class << self
    # source://jeweler//lib/jeweler/commands/release_to_rubygems.rb#18
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/validate_gemspec.rb#3
class Jeweler::Commands::ValidateGemspec
  # @return [ValidateGemspec] a new instance of ValidateGemspec
  #
  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#6
  def initialize; end

  # Returns the value of attribute gemspec_helper.
  #
  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#4
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#4
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#4
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#4
  def output=(_arg0); end

  # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#10
  def run; end

  class << self
    # source://jeweler//lib/jeweler/commands/validate_gemspec.rb#18
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands.rb#12
module Jeweler::Commands::Version; end

# source://jeweler//lib/jeweler/commands/version/base.rb#6
class Jeweler::Commands::Version::Base
  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def base_dir=(_arg0); end

  # source://jeweler//lib/jeweler/commands/version/base.rb#33
  def base_dir_path; end

  # Returns the value of attribute commit.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def commit; end

  # Sets the attribute commit
  #
  # @param value the value to set the attribute commit to.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def commit=(_arg0); end

  # source://jeweler//lib/jeweler/commands/version/base.rb#22
  def commit_version; end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def gemspec=(_arg0); end

  # Returns the value of attribute repo.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def repo; end

  # Sets the attribute repo
  #
  # @param value the value to set the attribute repo to.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def repo=(_arg0); end

  # source://jeweler//lib/jeweler/commands/version/base.rb#9
  def run; end

  # source://jeweler//lib/jeweler/commands/version/base.rb#18
  def update_version; end

  # Returns the value of attribute version_helper.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def version_helper; end

  # Sets the attribute version_helper
  #
  # @param value the value to set the attribute version_helper to.
  #
  # source://jeweler//lib/jeweler/commands/version/base.rb#7
  def version_helper=(_arg0); end

  # source://jeweler//lib/jeweler/commands/version/base.rb#29
  def working_subdir; end

  class << self
    # source://jeweler//lib/jeweler/commands/version/base.rb#37
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/commands/version/bump_major.rb#4
class Jeweler::Commands::Version::BumpMajor < ::Jeweler::Commands::Version::Base
  # source://jeweler//lib/jeweler/commands/version/bump_major.rb#5
  def update_version; end
end

# source://jeweler//lib/jeweler/commands/version/bump_minor.rb#4
class Jeweler::Commands::Version::BumpMinor < ::Jeweler::Commands::Version::Base
  # source://jeweler//lib/jeweler/commands/version/bump_minor.rb#5
  def update_version; end
end

# source://jeweler//lib/jeweler/commands/version/bump_patch.rb#4
class Jeweler::Commands::Version::BumpPatch < ::Jeweler::Commands::Version::Base
  # source://jeweler//lib/jeweler/commands/version/bump_patch.rb#5
  def update_version; end
end

# source://jeweler//lib/jeweler/commands/version/write.rb#4
class Jeweler::Commands::Version::Write < ::Jeweler::Commands::Version::Base
  # Returns the value of attribute build.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def build; end

  # Sets the attribute build
  #
  # @param value the value to set the attribute build to.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def build=(_arg0); end

  # Returns the value of attribute major.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def major; end

  # Sets the attribute major
  #
  # @param value the value to set the attribute major to.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def major=(_arg0); end

  # Returns the value of attribute minor.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def minor; end

  # Sets the attribute minor
  #
  # @param value the value to set the attribute minor to.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def minor=(_arg0); end

  # Returns the value of attribute patch.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def patch; end

  # Sets the attribute patch
  #
  # @param value the value to set the attribute patch to.
  #
  # source://jeweler//lib/jeweler/commands/version/write.rb#5
  def patch=(_arg0); end

  # source://jeweler//lib/jeweler/commands/version/write.rb#6
  def update_version; end
end

# source://jeweler//lib/jeweler/commands/write_gemspec.rb#3
class Jeweler::Commands::WriteGemspec
  # @return [WriteGemspec] a new instance of WriteGemspec
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#7
  def initialize; end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def base_dir=(_arg0); end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def gemspec=(_arg0); end

  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#22
  def gemspec_helper; end

  # Sets the attribute gemspec_helper
  #
  # @param value the value to set the attribute gemspec_helper to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#5
  def gemspec_helper=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def output=(_arg0); end

  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#11
  def run; end

  # Returns the value of attribute version.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def version=(_arg0); end

  # Returns the value of attribute version_helper.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def version_helper; end

  # Sets the attribute version_helper
  #
  # @param value the value to set the attribute version_helper to.
  #
  # source://jeweler//lib/jeweler/commands/write_gemspec.rb#4
  def version_helper=(_arg0); end

  class << self
    # source://jeweler//lib/jeweler/commands/write_gemspec.rb#26
    def build_for(jeweler); end
  end
end

# source://jeweler//lib/jeweler/gemspec_helper.rb#2
class Jeweler::GemSpecHelper
  # @return [GemSpecHelper] a new instance of GemSpecHelper
  # @yield [spec]
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#5
  def initialize(spec, base_dir = T.unsafe(nil)); end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#3
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#3
  def base_dir=(_arg0); end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#74
  def gem_path; end

  # Checks whether it uses the version helper or the users defined version.
  #
  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#83
  def has_version?; end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#55
  def normalize_files(array_attribute); end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#48
  def parse; end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#40
  def path; end

  # Adds extra space when outputting an array. This helps create better version control diffs, because otherwise it is all on the same line.
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#66
  def prettyify_array(gemspec_ruby, array_name); end

  # Returns the value of attribute spec.
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#3
  def spec; end

  # Sets the attribute spec
  #
  # @param value the value to set the attribute spec to.
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#3
  def spec=(_arg0); end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#25
  def to_ruby; end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#78
  def update_version(version); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/gemspec_helper.rb#12
  def valid?; end

  # source://jeweler//lib/jeweler/gemspec_helper.rb#19
  def write; end
end

# source://jeweler//lib/jeweler/gemspec_helper.rb#46
Jeweler::GemSpecHelper::PARSE_SAFE = T.let(T.unsafe(nil), Integer)

# Deprecated tasks for publishing to Gemcutter. See Jeweler::RubygemsDotOrgTasks
# for the current tasks to use.
#
# source://jeweler//lib/jeweler/gemcutter_tasks.rb#6
class Jeweler::GemcutterTasks < ::Jeweler::RubygemsDotOrgTasks; end

# Gemspec related error
#
# source://jeweler//lib/jeweler/errors.rb#3
class Jeweler::GemspecError < ::StandardError; end

# Rake tasks for putting a Jeweler gem on Rubyforge.
#
# Jeweler::Tasks.new needs to be used before this.
#
# Basic usage:
#
#     Jeweler::RubyforgeTasks.new
#
# Easy enough, right?
#
# There are a few options you can tweak:
#
#  * project: the rubyforge project to operate on. This defaults to whatever you specified in your gemspec. Defaults to your gem name.
#  * remote_doc_path: the place to upload docs to on Rubyforge under /var/www/gforge-projects/#{project}/
#
# See also http://wiki.github.com/technicalpickles/jeweler/rubyforge
#
# source://jeweler//lib/jeweler/rubyforge_tasks.rb#21
class Jeweler::RubyforgeTasks < ::Rake::TaskLib
  # @return [RubyforgeTasks] a new instance of RubyforgeTasks
  # @yield [_self]
  # @yieldparam _self [Jeweler::RubyforgeTasks] the object that the method was called on
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#31
  def initialize; end

  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#51
  def define; end

  # Task to be used for generating documentation, before they are uploaded. Defaults to rdoc.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#27
  def doc_task; end

  # Task to be used for generating documentation, before they are uploaded. Defaults to rdoc.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#27
  def doc_task=(_arg0); end

  # Returns the value of attribute jeweler.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#39
  def jeweler; end

  # Sets the attribute jeweler
  #
  # @param value the value to set the attribute jeweler to.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#29
  def jeweler=(_arg0); end

  # The RubyForge project to interact with. Defaults to whatever is in your jeweler gemspec.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#47
  def project; end

  # The RubyForge project to interact with. Defaults to whatever is in your jeweler gemspec.
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#23
  def project=(_arg0); end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#91
  def publish_documentation?; end

  # The path to upload docs to. It is relative to /var/www/gforge-projects/#{project}/, and defaults to your gemspec's name
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#43
  def remote_doc_path; end

  # The path to upload docs to. It is relative to /var/www/gforge-projects/#{project}/, and defaults to your gemspec's name
  #
  # source://jeweler//lib/jeweler/rubyforge_tasks.rb#25
  def remote_doc_path=(_arg0); end
end

# Rake tasks for putting a Jeweler gem on Gemcutter.
#
# Jeweler::Tasks.new needs to be used before this.
#
# Basic usage:
#
#     Jeweler::RubygemsDotOrgTasks.new
#
# Easy enough, right?
#
# source://jeweler//lib/jeweler/rubygems_dot_org_tasks.rb#14
class Jeweler::RubygemsDotOrgTasks < ::Rake::TaskLib
  # @return [RubygemsDotOrgTasks] a new instance of RubygemsDotOrgTasks
  # @yield [_self]
  # @yieldparam _self [Jeweler::RubygemsDotOrgTasks] the object that the method was called on
  #
  # source://jeweler//lib/jeweler/rubygems_tasks.rb#17
  def initialize; end

  # source://jeweler//lib/jeweler/rubygems_tasks.rb#27
  def define; end

  # Returns the value of attribute jeweler.
  #
  # source://jeweler//lib/jeweler/rubygems_tasks.rb#23
  def jeweler; end

  # Sets the attribute jeweler
  #
  # @param value the value to set the attribute jeweler to.
  #
  # source://jeweler//lib/jeweler/rubygems_tasks.rb#15
  def jeweler=(_arg0); end
end

# source://jeweler//lib/jeweler/specification.rb#11
module Jeweler::Specification
  # source://jeweler//lib/jeweler/specification.rb#17
  def extra_rdoc_files; end

  # source://jeweler//lib/jeweler/specification.rb#23
  def extra_rdoc_files=(value); end

  # source://jeweler//lib/jeweler/specification.rb#17
  def files; end

  # source://jeweler//lib/jeweler/specification.rb#23
  def files=(value); end

  # Used by Specification#to_ruby to generate a ruby-respresentation of a Gem::Specification
  #
  # source://jeweler//lib/jeweler/specification.rb#84
  def ruby_code(obj); end

  # Assigns the Jeweler defaults to the Gem::Specification
  #
  # source://jeweler//lib/jeweler/specification.rb#32
  def set_jeweler_defaults(base_dir, git_base_dir = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/specification.rb#105
  def blank?(value); end

  # Backported (or rather forward-ported) from Bunder::Runtime#dependencies_for.
  # This method was available until Bundler 1.13, and then removed. We need it
  # to be able to tell which gems are listed in the Gemfile without loading
  # those gems first.
  #
  # source://jeweler//lib/jeweler/specification.rb#97
  def bundler_dependencies_for(bundler_runtime, *groups); end

  class << self
    # source://jeweler//lib/jeweler/specification.rb#12
    def filelist_attribute(name); end
  end
end

# Rake tasks for managing your gem.
#
# Here's a basic usage example:
#
#   Jeweler::Tasks.new do |gem|
#     gem.name = "jeweler"
#     gem.summary = "Simple and opinionated helper for creating RubyGem projects on GitHub"
#     gem.email = "josh@technicalpickles.com"
#     gem.homepage = "http://github.com/technicalpickles/jeweler"
#     gem.description = "Simple and opinionated helper for creating RubyGem projects on GitHub"
#     gem.authors = ["Josh Nichols"]
#   end
#
# The block variable gem is actually a Gem::Specification, so you can
# do anything you would normally do with a Gem::Specification.
# For more details, see the official gemspec reference:
# http://guides.rubygems.org/specification-reference
#
# In addition, it provides reasonable defaults for several values. See Jeweler::Specification for more details.
#
# source://jeweler//lib/jeweler/tasks.rb#39
class Jeweler::Tasks < ::Rake::TaskLib
  # @return [Tasks] a new instance of Tasks
  #
  # source://jeweler//lib/jeweler/tasks.rb#43
  def initialize(gemspec = T.unsafe(nil), &gemspec_building_block); end

  # Returns the value of attribute gemspec.
  #
  # source://jeweler//lib/jeweler/tasks.rb#40
  def gemspec; end

  # Sets the attribute gemspec
  #
  # @param value the value to set the attribute gemspec to.
  #
  # source://jeweler//lib/jeweler/tasks.rb#40
  def gemspec=(_arg0); end

  # Returns the value of attribute gemspec_building_block.
  #
  # source://jeweler//lib/jeweler/tasks.rb#40
  def gemspec_building_block; end

  # Sets the attribute gemspec_building_block
  #
  # @param value the value to set the attribute gemspec_building_block to.
  #
  # source://jeweler//lib/jeweler/tasks.rb#40
  def gemspec_building_block=(_arg0); end

  # source://jeweler//lib/jeweler/tasks.rb#51
  def jeweler; end

  # Sets the attribute jeweler
  #
  # @param value the value to set the attribute jeweler to.
  #
  # source://jeweler//lib/jeweler/tasks.rb#41
  def jeweler=(_arg0); end

  private

  # source://jeweler//lib/jeweler/tasks.rb#83
  def define; end

  # source://jeweler//lib/jeweler/tasks.rb#57
  def jeweler!; end

  # source://jeweler//lib/jeweler/tasks.rb#74
  def release_args; end

  # @return [Boolean]
  #
  # source://jeweler//lib/jeweler/tasks.rb#63
  def yield_gemspec_set_version?; end
end

# source://jeweler//lib/jeweler/version.rb#2
module Jeweler::Version; end

# source://jeweler//lib/jeweler/version.rb#6
Jeweler::Version::BUILD = T.let(T.unsafe(nil), T.untyped)

# source://jeweler//lib/jeweler/version.rb#3
Jeweler::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://jeweler//lib/jeweler/version.rb#4
Jeweler::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://jeweler//lib/jeweler/version.rb#5
Jeweler::Version::PATCH = T.let(T.unsafe(nil), Integer)

# source://jeweler//lib/jeweler/version.rb#8
Jeweler::Version::STRING = T.let(T.unsafe(nil), String)

# source://jeweler//lib/jeweler/version_helper.rb#9
class Jeweler::VersionHelper
  # @return [VersionHelper] a new instance of VersionHelper
  #
  # source://jeweler//lib/jeweler/version_helper.rb#86
  def initialize(base_dir); end

  # Returns the value of attribute base_dir.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#10
  def base_dir; end

  # Sets the attribute base_dir
  #
  # @param value the value to set the attribute base_dir to.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#10
  def base_dir=(_arg0); end

  # Returns the value of attribute build.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#11
  def build; end

  # source://jeweler//lib/jeweler/version_helper.rb#98
  def bump_major; end

  # source://jeweler//lib/jeweler/version_helper.rb#105
  def bump_minor; end

  # source://jeweler//lib/jeweler/version_helper.rb#111
  def bump_patch; end

  # Returns the value of attribute major.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#11
  def major; end

  # Returns the value of attribute minor.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#11
  def minor; end

  # Returns the value of attribute patch.
  #
  # source://jeweler//lib/jeweler/version_helper.rb#11
  def patch; end

  # source://jeweler//lib/jeweler/version_helper.rb#131
  def plaintext_path; end

  # source://jeweler//lib/jeweler/version_helper.rb#123
  def to_s; end

  # source://jeweler//lib/jeweler/version_helper.rb#116
  def update_to(major, minor, patch, build = T.unsafe(nil)); end

  # source://jeweler//lib/jeweler/version_helper.rb#127
  def yaml_path; end

  private

  # source://jeweler//lib/jeweler/version_helper.rb#137
  def path_to_version_file(filename); end
end

# source://jeweler//lib/jeweler/version_helper.rb#54
module Jeweler::VersionHelper::PlaintextExtension
  # source://jeweler//lib/jeweler/version_helper.rb#61
  def parse_plaintext; end

  # source://jeweler//lib/jeweler/version_helper.rb#81
  def path; end

  # source://jeweler//lib/jeweler/version_helper.rb#73
  def read_plaintext; end

  # source://jeweler//lib/jeweler/version_helper.rb#77
  def refresh; end

  # source://jeweler//lib/jeweler/version_helper.rb#55
  def write; end
end

# source://jeweler//lib/jeweler/version_helper.rb#13
module Jeweler::VersionHelper::YamlExtension
  # source://jeweler//lib/jeweler/version_helper.rb#33
  def parse_yaml; end

  # source://jeweler//lib/jeweler/version_helper.rb#49
  def path; end

  # source://jeweler//lib/jeweler/version_helper.rb#41
  def read_yaml; end

  # source://jeweler//lib/jeweler/version_helper.rb#29
  def refresh; end

  # source://jeweler//lib/jeweler/version_helper.rb#20
  def to_hash; end

  # source://jeweler//lib/jeweler/version_helper.rb#14
  def write; end
end

# source://jeweler//lib/jeweler/errors.rb#6
class Jeweler::VersionYmlError < ::StandardError; end

# source://jeweler//lib/jeweler/tasks.rb#8
class Rake::Application
  # source://rake/13.0.6/lib/rake/application.rb#49
  def initialize; end

  # source://rake/13.0.6/lib/rake/application.rb#777
  def add_import(fn); end

  # source://rake/13.0.6/lib/rake/application.rb#139
  def add_loader(ext, loader); end

  # source://rake/13.0.6/lib/rake/application.rb#758
  def collect_command_line_tasks(args); end

  # source://rake/13.0.6/lib/rake/application.rb#772
  def default_task_name; end

  # source://rake/13.0.6/lib/rake/application.rb#258
  def deprecate(old_usage, new_usage, call_site); end

  # source://rake/13.0.6/lib/rake/application.rb#222
  def display_cause_details(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#206
  def display_error_message(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#245
  def display_exception_backtrace(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#214
  def display_exception_details(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#229
  def display_exception_details_seen; end

  # source://rake/13.0.6/lib/rake/application.rb#237
  def display_exception_message_details(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#381
  def display_prerequisites; end

  # source://rake/13.0.6/lib/rake/application.rb#298
  def display_tasks_and_comments; end

  # source://rake/13.0.6/lib/rake/application.rb#349
  def dynamic_width; end

  # source://rake/13.0.6/lib/rake/application.rb#353
  def dynamic_width_stty; end

  # source://rake/13.0.6/lib/rake/application.rb#357
  def dynamic_width_tput; end

  # source://rake/13.0.6/lib/rake/application.rb#201
  def exit_because_of_exception(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#678
  def find_rakefile_location; end

  # source://rake/13.0.6/lib/rake/application.rb#644
  def handle_options(argv); end

  # source://rake/13.0.6/lib/rake/application.rb#233
  def has_cause?(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#274
  def have_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#88
  def init(app_name = T.unsafe(nil), argv = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#157
  def invoke_task(task_string); end

  # The jeweler instance that has be instantiated in the current Rakefile.
  #
  # This is usually useful if you want to get at info like version from other files.
  #
  # source://jeweler//lib/jeweler/tasks.rb#14
  def jeweler; end

  # Returns the value of attribute jeweler_tasks.
  #
  # source://jeweler//lib/jeweler/tasks.rb#9
  def jeweler_tasks; end

  # Sets the attribute jeweler_tasks
  #
  # @param value the value to set the attribute jeweler_tasks to.
  #
  # source://jeweler//lib/jeweler/tasks.rb#9
  def jeweler_tasks=(_arg0); end

  # source://rake/13.0.6/lib/rake/application.rb#782
  def load_imports; end

  # source://rake/13.0.6/lib/rake/application.rb#102
  def load_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#24
  def name; end

  # source://rake/13.0.6/lib/rake/application.rb#145
  def options; end

  # source://rake/13.0.6/lib/rake/application.rb#27
  def original_dir; end

  # source://rake/13.0.6/lib/rake/application.rb#163
  def parse_task_string(string); end

  # source://rake/13.0.6/lib/rake/application.rb#690
  def print_rakefile_directory(location); end

  # source://rake/13.0.6/lib/rake/application.rb#664
  def rake_require(file_name, paths = T.unsafe(nil), loaded = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#30
  def rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#798
  def rakefile_location(backtrace = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#695
  def raw_load_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#79
  def run(argv = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#122
  def run_with_threads; end

  # source://rake/13.0.6/lib/rake/application.rb#807
  def set_default_options; end

  # source://rake/13.0.6/lib/rake/application.rb#185
  def standard_exception_handling; end

  # source://rake/13.0.6/lib/rake/application.rb#402
  def standard_rake_options; end

  # source://rake/13.0.6/lib/rake/application.rb#727
  def system_dir; end

  # source://rake/13.0.6/lib/rake/application.rb#33
  def terminal_columns; end

  # source://rake/13.0.6/lib/rake/application.rb#33
  def terminal_columns=(_arg0); end

  # source://rake/13.0.6/lib/rake/application.rb#337
  def terminal_width; end

  # source://rake/13.0.6/lib/rake/application.rb#150
  def thread_pool; end

  # source://rake/13.0.6/lib/rake/application.rb#109
  def top_level; end

  # source://rake/13.0.6/lib/rake/application.rb#36
  def top_level_tasks; end

  # source://rake/13.0.6/lib/rake/application.rb#388
  def trace(*strings); end

  # source://rake/13.0.6/lib/rake/application.rb#370
  def truncate(string, width); end

  # source://rake/13.0.6/lib/rake/application.rb#293
  def truncate_output?; end

  # source://rake/13.0.6/lib/rake/application.rb#39
  def tty_output=(_arg0); end

  # source://rake/13.0.6/lib/rake/application.rb#287
  def tty_output?; end

  # source://rake/13.0.6/lib/rake/application.rb#361
  def unix?; end

  # source://rake/13.0.6/lib/rake/application.rb#366
  def windows?; end

  private

  # source://rake/13.0.6/lib/rake/application.rb#721
  def glob(path, &block); end

  # source://rake/13.0.6/lib/rake/application.rb#267
  def has_chain?(exception); end

  # source://rake/13.0.6/lib/rake/application.rb#620
  def select_tasks_to_show(options, show_tasks, value); end

  # source://rake/13.0.6/lib/rake/application.rb#627
  def select_trace_output(options, trace_option, value); end

  # source://rake/13.0.6/lib/rake/application.rb#393
  def sort_options(options); end

  # source://rake/13.0.6/lib/rake/application.rb#744
  def standard_system_dir; end
end
