# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionview` gem.
# Please instead update this file by running `bin/tapioca gem actionview`.


class ActionController::Base < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::BasicImplicitRender
  extend ::AbstractController::Helpers::Resolution

  def __callbacks; end
  def __callbacks?; end
  def _helper_methods; end
  def _helper_methods=(_arg0); end
  def _helper_methods?; end
  def _layout_conditions; end
  def _layout_conditions?; end
  def _process_action_callbacks; end
  def _renderers; end
  def _renderers=(_arg0); end
  def _renderers?; end
  def _run_process_action_callbacks(&block); end
  def _view_cache_dependencies; end
  def _view_cache_dependencies=(_arg0); end
  def _view_cache_dependencies?; end
  def _wrapper_options; end
  def _wrapper_options=(_arg0); end
  def _wrapper_options?; end
  def alert; end
  def allow_forgery_protection; end
  def allow_forgery_protection=(value); end
  def asset_host; end
  def asset_host=(value); end
  def assets_dir; end
  def assets_dir=(value); end
  def csrf_token_storage_strategy; end
  def csrf_token_storage_strategy=(value); end
  def default_asset_host_protocol; end
  def default_asset_host_protocol=(value); end
  def default_static_extension; end
  def default_static_extension=(value); end
  def default_url_options; end
  def default_url_options=(_arg0); end
  def default_url_options?; end
  def enable_fragment_cache_logging; end
  def enable_fragment_cache_logging=(value); end
  def etag_with_template_digest; end
  def etag_with_template_digest=(_arg0); end
  def etag_with_template_digest?; end
  def etaggers; end
  def etaggers=(_arg0); end
  def etaggers?; end
  def flash(*_arg0, **_arg1, &_arg2); end
  def forgery_protection_origin_check; end
  def forgery_protection_origin_check=(value); end
  def forgery_protection_strategy; end
  def forgery_protection_strategy=(value); end
  def fragment_cache_keys; end
  def fragment_cache_keys=(_arg0); end
  def fragment_cache_keys?; end
  def helpers_path; end
  def helpers_path=(_arg0); end
  def helpers_path?; end
  def include_all_helpers; end
  def include_all_helpers=(_arg0); end
  def include_all_helpers?; end
  def javascripts_dir; end
  def javascripts_dir=(value); end
  def log_warning_on_csrf_failure; end
  def log_warning_on_csrf_failure=(value); end
  def logger; end
  def logger=(value); end
  def notice; end
  def per_form_csrf_tokens; end
  def per_form_csrf_tokens=(value); end
  def perform_caching; end
  def perform_caching=(value); end
  def raise_on_missing_callback_actions; end
  def raise_on_missing_callback_actions=(val); end
  def raise_on_open_redirects; end
  def raise_on_open_redirects=(val); end
  def relative_url_root; end
  def relative_url_root=(value); end
  def request_forgery_protection_token; end
  def request_forgery_protection_token=(value); end
  def rescue_handlers; end
  def rescue_handlers=(_arg0); end
  def rescue_handlers?; end
  def stylesheets_dir; end
  def stylesheets_dir=(value); end

  private

  def _layout(lookup_context, formats); end
  def _protected_ivars; end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def _helpers; end
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
    def _process_action_callbacks; end
    def _process_action_callbacks=(value); end
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
    def allow_forgery_protection; end
    def allow_forgery_protection=(value); end
    def asset_host; end
    def asset_host=(value); end
    def assets_dir; end
    def assets_dir=(value); end
    def csrf_token_storage_strategy; end
    def csrf_token_storage_strategy=(value); end
    def default_asset_host_protocol; end
    def default_asset_host_protocol=(value); end
    def default_static_extension; end
    def default_static_extension=(value); end
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
    def enable_fragment_cache_logging; end
    def enable_fragment_cache_logging=(value); end
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
    def forgery_protection_origin_check; end
    def forgery_protection_origin_check=(value); end
    def forgery_protection_strategy; end
    def forgery_protection_strategy=(value); end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
    def javascripts_dir; end
    def javascripts_dir=(value); end
    def log_warning_on_csrf_failure; end
    def log_warning_on_csrf_failure=(value); end
    def logger; end
    def logger=(value); end
    def middleware_stack; end
    def per_form_csrf_tokens; end
    def per_form_csrf_tokens=(value); end
    def perform_caching; end
    def perform_caching=(value); end
    def raise_on_missing_callback_actions; end
    def raise_on_missing_callback_actions=(val); end
    def raise_on_open_redirects; end
    def raise_on_open_redirects=(val); end
    def relative_url_root; end
    def relative_url_root=(value); end
    def request_forgery_protection_token; end
    def request_forgery_protection_token=(value); end
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
    def stylesheets_dir; end
    def stylesheets_dir=(value); end
    def without_modules(*modules); end
  end
end

module ActionView
  extend ::ActiveSupport::Autoload

  class << self
    def deprecator; end
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

class ActionView::AbstractRenderer
  def initialize(lookup_context); end

  def any_templates?(*_arg0, **_arg1, &_arg2); end
  def formats(*_arg0, **_arg1, &_arg2); end
  def render; end
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  private

  def build_rendered_collection(templates, spacer); end
  def build_rendered_template(content, template); end
  def extract_details(options); end
  def prepend_formats(formats); end
end

ActionView::AbstractRenderer::NO_DETAILS = T.let(T.unsafe(nil), Hash)

module ActionView::AbstractRenderer::ObjectRendering
  def initialize(lookup_context, options); end

  private

  def local_variable(path); end
  def merge_prefix_into_object_path(prefix, object_path); end
  def partial_path(object, view); end
  def raise_invalid_identifier(path); end
  def raise_invalid_option_as(as); end
end

ActionView::AbstractRenderer::ObjectRendering::IDENTIFIER_ERROR_MESSAGE = T.let(T.unsafe(nil), String)
ActionView::AbstractRenderer::ObjectRendering::OPTION_AS_ERROR_MESSAGE = T.let(T.unsafe(nil), String)
ActionView::AbstractRenderer::ObjectRendering::PREFIXED_PARTIAL_NAMES = T.let(T.unsafe(nil), Concurrent::Map)

class ActionView::AbstractRenderer::RenderedCollection
  def initialize(rendered_templates, spacer); end

  def body; end
  def format; end
  def rendered_templates; end

  class << self
    def empty(format); end
  end
end

class ActionView::AbstractRenderer::RenderedCollection::EmptyCollection
  def initialize(format); end

  def body; end
  def format; end
end

class ActionView::AbstractRenderer::RenderedTemplate
  def initialize(body, template); end

  def body; end
  def format; end
  def template; end
end

ActionView::AbstractRenderer::RenderedTemplate::EMPTY_SPACER = T.let(T.unsafe(nil), T.untyped)
class ActionView::ActionViewError < ::StandardError; end

class ActionView::Base
  include ::ActionView::Context
  include ::ERB::Escape
  include ::ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionView::Helpers
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def initialize(lookup_context, assigns, controller); end

  def _routes; end
  def _routes=(_arg0); end
  def _routes?; end
  def _run(method, template, locals, buffer, add_to_stack: T.unsafe(nil), has_strict_locals: T.unsafe(nil), &block); end
  def annotate_rendered_view_with_filenames; end
  def annotate_rendered_view_with_filenames=(val); end
  def assign(new_assigns); end
  def assigns; end
  def assigns=(_arg0); end
  def automatically_disable_submit_tag; end
  def automatically_disable_submit_tag=(val); end
  def compiled_method_container; end
  def config; end
  def config=(_arg0); end
  def debug_missing_translation; end
  def debug_missing_translation=(val); end
  def default_formats; end
  def default_formats=(val); end
  def field_error_proc; end
  def field_error_proc=(val); end
  def formats(*_arg0, **_arg1, &_arg2); end
  def formats=(arg); end
  def in_rendering_context(options); end
  def locale(*_arg0, **_arg1, &_arg2); end
  def locale=(arg); end
  def logger; end
  def logger=(_arg0); end
  def logger?; end
  def lookup_context; end
  def prefix_partial_path_with_controller_namespace; end
  def prefix_partial_path_with_controller_namespace=(_arg0); end
  def prefix_partial_path_with_controller_namespace?; end
  def streaming_completion_on_exception; end
  def streaming_completion_on_exception=(val); end
  def view_paths(*_arg0, **_arg1, &_arg2); end
  def view_paths=(arg); end
  def view_renderer; end

  class << self
    def _routes; end
    def _routes=(value); end
    def _routes?; end
    def annotate_rendered_view_with_filenames; end
    def annotate_rendered_view_with_filenames=(val); end
    def automatically_disable_submit_tag; end
    def automatically_disable_submit_tag=(val); end
    def cache_template_loading; end
    def cache_template_loading=(value); end
    def changed?(other); end
    def debug_missing_translation; end
    def debug_missing_translation=(val); end
    def default_form_builder; end
    def default_form_builder=(val); end
    def default_formats; end
    def default_formats=(val); end
    def empty; end
    def erb_trim_mode=(arg); end
    def field_error_proc; end
    def field_error_proc=(val); end
    def logger; end
    def logger=(value); end
    def logger?; end
    def prefix_partial_path_with_controller_namespace; end
    def prefix_partial_path_with_controller_namespace=(value); end
    def prefix_partial_path_with_controller_namespace?; end
    def streaming_completion_on_exception; end
    def streaming_completion_on_exception=(val); end
    def with_context(context, assigns = T.unsafe(nil), controller = T.unsafe(nil)); end
    def with_empty_template_cache; end
    def with_view_paths(view_paths, assigns = T.unsafe(nil), controller = T.unsafe(nil)); end
    def xss_safe?; end
  end
end

module ActionView::CacheExpiry; end

class ActionView::CacheExpiry::ViewReloader
  def initialize(watcher:, &block); end

  def execute; end
  def updated?; end

  private

  def all_view_paths; end
  def build_watcher; end
  def dirs_to_watch; end
  def rebuild_watcher; end
  def reload!; end
end

module ActionView::CollectionCaching
  extend ::ActiveSupport::Concern

  private

  def cache_collection_render(instrumentation_payload, view, template, collection); end
  def callable_cache_key?; end
  def collection_by_cache_keys(view, template, collection); end
  def expanded_cache_key(key, view, template, digest_path); end
  def fetch_or_cache_partial(cached_partials, template, order_by:); end
  def will_cache?(options, view); end
end

class ActionView::CollectionRenderer < ::ActionView::PartialRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering

  def render_collection_derive_partial(collection, context, block); end
  def render_collection_with_partial(collection, partial, context, block); end

  private

  def collection_with_template(view, template, layout, collection); end
  def render_collection(collection, view, path, template, layout, block); end
  def retrieve_variable(path); end
end

class ActionView::CollectionRenderer::CollectionIterator
  include ::Enumerable

  def initialize(collection); end

  def each(&blk); end
  def length; end
  def preload!; end
  def size; end
end

class ActionView::CollectionRenderer::MixedCollectionIterator < ::ActionView::CollectionRenderer::CollectionIterator
  def initialize(collection, paths); end

  def each_with_info; end
end

class ActionView::CollectionRenderer::PreloadCollectionIterator < ::ActionView::CollectionRenderer::SameCollectionIterator
  def initialize(collection, path, variables, relation); end

  def each_with_info; end
  def from_collection(collection); end
  def preload!; end
end

class ActionView::CollectionRenderer::SameCollectionIterator < ::ActionView::CollectionRenderer::CollectionIterator
  def initialize(collection, path, variables); end

  def each_with_info; end
  def from_collection(collection); end
end

module ActionView::Context
  def _layout_for(name = T.unsafe(nil)); end
  def _prepare_context; end
  def output_buffer; end
  def output_buffer=(_arg0); end
  def view_flow; end
  def view_flow=(_arg0); end
end

class ActionView::DependencyTracker
  extend ::ActiveSupport::Autoload

  class << self
    def find_dependencies(name, template, view_paths = T.unsafe(nil)); end
    def register_tracker(extension, tracker); end
    def remove_tracker(handler); end
  end
end

class ActionView::DependencyTracker::ERBTracker
  def initialize(name, template, view_paths = T.unsafe(nil)); end

  def dependencies; end

  private

  def add_dependencies(render_dependencies, arguments, pattern); end
  def add_dynamic_dependency(dependencies, dependency); end
  def add_static_dependency(dependencies, dependency, quote_type); end
  def directory; end
  def explicit_dependencies; end
  def name; end
  def render_dependencies; end
  def resolve_directories(wildcard_dependencies); end
  def source; end
  def template; end

  class << self
    def call(name, template, view_paths = T.unsafe(nil)); end
    def supports_view_paths?; end
  end
end

ActionView::DependencyTracker::ERBTracker::EXPLICIT_DEPENDENCY = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::IDENTIFIER = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::LAYOUT_DEPENDENCY = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::LAYOUT_HASH_KEY = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::PARTIAL_HASH_KEY = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::RENDER_ARGUMENTS = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::STRING = T.let(T.unsafe(nil), Regexp)
ActionView::DependencyTracker::ERBTracker::VARIABLE_OR_METHOD_CHAIN = T.let(T.unsafe(nil), Regexp)

class ActionView::DependencyTracker::RubyTracker
  def initialize(name, template, view_paths = T.unsafe(nil), parser_class: T.unsafe(nil)); end

  def dependencies; end

  private

  def explicit_dependencies; end
  def name; end
  def render_dependencies; end
  def resolve_directories(wildcard_dependencies); end
  def template; end
  def view_paths; end

  class << self
    def call(name, template, view_paths = T.unsafe(nil)); end
    def supports_view_paths?; end
  end
end

ActionView::DependencyTracker::RubyTracker::EXPLICIT_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

class ActionView::Digestor
  class << self
    def digest(name:, finder:, format: T.unsafe(nil), dependencies: T.unsafe(nil)); end
    def logger; end
    def tree(name, finder, partial = T.unsafe(nil), seen = T.unsafe(nil)); end

    private

    def find_template(finder, name, prefixes, partial, keys); end
  end
end

class ActionView::Digestor::Injected < ::ActionView::Digestor::Node
  def digest(finder, _ = T.unsafe(nil)); end
end

class ActionView::Digestor::Missing < ::ActionView::Digestor::Node
  def digest(finder, _ = T.unsafe(nil)); end
end

class ActionView::Digestor::Node
  def initialize(name, logical_name, template, children = T.unsafe(nil)); end

  def children; end
  def dependency_digest(finder, stack); end
  def digest(finder, stack = T.unsafe(nil)); end
  def logical_name; end
  def name; end
  def template; end
  def to_dep_map; end

  class << self
    def create(name, logical_name, template, partial); end
  end
end

class ActionView::Digestor::NullLogger
  class << self
    def debug(_); end
    def error(_); end
  end
end

class ActionView::Digestor::Partial < ::ActionView::Digestor::Node; end
ActionView::ENCODING_FLAG = T.let(T.unsafe(nil), String)
class ActionView::EncodingError < ::StandardError; end

class ActionView::FileSystemResolver < ::ActionView::Resolver
  def initialize(path); end

  def ==(resolver); end
  def all_template_paths; end
  def built_templates; end
  def clear_cache; end
  def eql?(resolver); end
  def path; end
  def to_path; end
  def to_s; end

  private

  def _find_all(name, prefix, partial, details, key, locals); end
  def build_unbound_template(template); end
  def escape_entry(entry); end
  def filter_and_sort_by_details(templates, requested_details); end
  def source_for_template(template); end
  def template_glob(glob); end
  def unbound_templates_from_path(path); end
end

module ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  class << self
    def eager_load!; end
  end
end

module ActionView::Helpers::ActiveModelHelper; end

module ActionView::Helpers::ActiveModelInstanceTag
  def content_tag(type, options, *_arg2); end
  def error_message; end
  def error_wrapping(html_tag); end
  def object; end
  def tag(type, options, *_arg2); end

  private

  def object_has_errors?; end
  def select_markup_helper?(type); end
  def tag_generate_errors?(options); end
end

module ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def apply_stylesheet_media_default; end
  def apply_stylesheet_media_default=(val); end
  def audio_tag(*sources); end
  def auto_discovery_link_tag(type = T.unsafe(nil), url_options = T.unsafe(nil), tag_options = T.unsafe(nil)); end
  def favicon_link_tag(source = T.unsafe(nil), options = T.unsafe(nil)); end
  def image_decoding; end
  def image_decoding=(val); end
  def image_loading; end
  def image_loading=(val); end
  def image_tag(source, options = T.unsafe(nil)); end
  def javascript_include_tag(*sources); end
  def picture_tag(*sources, &block); end
  def preload_link_tag(source, options = T.unsafe(nil)); end
  def preload_links_header; end
  def preload_links_header=(val); end
  def stylesheet_link_tag(*sources); end
  def video_tag(*sources); end

  private

  def check_for_image_tag_errors(options); end
  def extract_dimensions(size); end
  def multiple_sources_tag_builder(type, sources); end
  def resolve_asset_source(asset_type, source, skip_pipeline); end
  def resolve_link_as(extname, mime_type); end
  def send_preload_links_header(preload_links, max_header_size: T.unsafe(nil)); end

  class << self
    def apply_stylesheet_media_default; end
    def apply_stylesheet_media_default=(val); end
    def image_decoding; end
    def image_decoding=(val); end
    def image_loading; end
    def image_loading=(val); end
    def preload_links_header; end
    def preload_links_header=(val); end
  end
end

ActionView::Helpers::AssetTagHelper::MAX_HEADER_SIZE = T.let(T.unsafe(nil), Integer)

module ActionView::Helpers::AssetUrlHelper
  def asset_path(source, options = T.unsafe(nil)); end
  def asset_url(source, options = T.unsafe(nil)); end
  def audio_path(source, options = T.unsafe(nil)); end
  def audio_url(source, options = T.unsafe(nil)); end
  def compute_asset_extname(source, options = T.unsafe(nil)); end
  def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end
  def compute_asset_path(source, options = T.unsafe(nil)); end
  def font_path(source, options = T.unsafe(nil)); end
  def font_url(source, options = T.unsafe(nil)); end
  def image_path(source, options = T.unsafe(nil)); end
  def image_url(source, options = T.unsafe(nil)); end
  def javascript_path(source, options = T.unsafe(nil)); end
  def javascript_url(source, options = T.unsafe(nil)); end
  def path_to_asset(source, options = T.unsafe(nil)); end
  def path_to_audio(source, options = T.unsafe(nil)); end
  def path_to_font(source, options = T.unsafe(nil)); end
  def path_to_image(source, options = T.unsafe(nil)); end
  def path_to_javascript(source, options = T.unsafe(nil)); end
  def path_to_stylesheet(source, options = T.unsafe(nil)); end
  def path_to_video(source, options = T.unsafe(nil)); end
  def public_compute_asset_path(source, options = T.unsafe(nil)); end
  def stylesheet_path(source, options = T.unsafe(nil)); end
  def stylesheet_url(source, options = T.unsafe(nil)); end
  def url_to_asset(source, options = T.unsafe(nil)); end
  def url_to_audio(source, options = T.unsafe(nil)); end
  def url_to_font(source, options = T.unsafe(nil)); end
  def url_to_image(source, options = T.unsafe(nil)); end
  def url_to_javascript(source, options = T.unsafe(nil)); end
  def url_to_stylesheet(source, options = T.unsafe(nil)); end
  def url_to_video(source, options = T.unsafe(nil)); end
  def video_path(source, options = T.unsafe(nil)); end
  def video_url(source, options = T.unsafe(nil)); end
end

ActionView::Helpers::AssetUrlHelper::ASSET_EXTENSIONS = T.let(T.unsafe(nil), Hash)
ActionView::Helpers::AssetUrlHelper::ASSET_PUBLIC_DIRECTORIES = T.let(T.unsafe(nil), Hash)
ActionView::Helpers::AssetUrlHelper::URI_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionView::Helpers::AtomFeedHelper
  def atom_feed(options = T.unsafe(nil), &block); end
end

class ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml); end

  private

  def method_missing(method, *arguments, &block); end
  def xhtml_block?(method, arguments); end
end

ActionView::Helpers::AtomFeedHelper::AtomBuilder::XHTML_TAG_NAMES = T.let(T.unsafe(nil), Set)

class ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder < ::ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml, view, feed_options = T.unsafe(nil)); end

  def entry(record, options = T.unsafe(nil)); end
  def updated(date_or_time = T.unsafe(nil)); end
end

module ActionView::Helpers::CacheHelper
  def cache(name = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def cache_fragment_name(name = T.unsafe(nil), skip_digest: T.unsafe(nil), digest_path: T.unsafe(nil)); end
  def cache_if(condition, name = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def cache_unless(condition, name = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def caching?; end
  def digest_path_from_template(template); end
  def uncacheable!; end

  private

  def fragment_for(name = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def fragment_name_with_digest(name, digest_path); end
  def read_fragment_for(name, options); end
  def write_fragment_for(name, options, &block); end
end

module ActionView::Helpers::CacheHelper::CachingRegistry
  extend ::ActionView::Helpers::CacheHelper::CachingRegistry

  def caching?; end
  def track_caching; end
end

class ActionView::Helpers::CacheHelper::UncacheableFragmentError < ::StandardError; end

module ActionView::Helpers::CaptureHelper
  def capture(*args, &block); end
  def content_for(name, content = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def content_for?(name); end
  def provide(name, content = T.unsafe(nil), &block); end
  def with_output_buffer(buf = T.unsafe(nil)); end
end

module ActionView::Helpers::ContentExfiltrationPreventionHelper
  def prepend_content_exfiltration_prevention; end
  def prepend_content_exfiltration_prevention=(val); end
  def prevent_content_exfiltration(html); end

  class << self
    def prepend_content_exfiltration_prevention; end
    def prepend_content_exfiltration_prevention=(val); end
  end
end

ActionView::Helpers::ContentExfiltrationPreventionHelper::CLOSE_CDATA_COMMENT = T.let(T.unsafe(nil), ActiveSupport::SafeBuffer)
ActionView::Helpers::ContentExfiltrationPreventionHelper::CLOSE_FORM_TAG = T.let(T.unsafe(nil), ActiveSupport::SafeBuffer)
ActionView::Helpers::ContentExfiltrationPreventionHelper::CLOSE_OPTION_TAG = T.let(T.unsafe(nil), ActiveSupport::SafeBuffer)
ActionView::Helpers::ContentExfiltrationPreventionHelper::CLOSE_QUOTES_COMMENT = T.let(T.unsafe(nil), ActiveSupport::SafeBuffer)
ActionView::Helpers::ContentExfiltrationPreventionHelper::CONTENT_EXFILTRATION_PREVENTION_MARKUP = T.let(T.unsafe(nil), ActiveSupport::SafeBuffer)

module ActionView::Helpers::ControllerHelper
  def action_name(*_arg0, **_arg1, &_arg2); end
  def assign_controller(controller); end
  def controller; end
  def controller=(_arg0); end
  def controller_name(*_arg0, **_arg1, &_arg2); end
  def controller_path(*_arg0, **_arg1, &_arg2); end
  def cookies(*_arg0, **_arg1, &_arg2); end
  def flash(*_arg0, **_arg1, &_arg2); end
  def headers(*_arg0, **_arg1, &_arg2); end
  def logger; end
  def params(*_arg0, **_arg1, &_arg2); end
  def request; end
  def request=(_arg0); end
  def request_forgery_protection_token(*_arg0, **_arg1, &_arg2); end
  def respond_to?(method_name, include_private = T.unsafe(nil)); end
  def response(*_arg0, **_arg1, &_arg2); end
  def session(*_arg0, **_arg1, &_arg2); end
end

ActionView::Helpers::ControllerHelper::CONTROLLER_DELEGATES = T.let(T.unsafe(nil), Array)

module ActionView::Helpers::CspHelper
  def csp_meta_tag(**options); end
end

module ActionView::Helpers::CsrfHelper
  def csrf_meta_tag; end
  def csrf_meta_tags; end
end

module ActionView::Helpers::DateHelper
  def date_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def datetime_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def distance_of_time_in_words(from_time, to_time = T.unsafe(nil), options = T.unsafe(nil)); end
  def distance_of_time_in_words_to_now(from_time, options = T.unsafe(nil)); end
  def select_date(date = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_datetime(datetime = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_day(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_hour(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_minute(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_month(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_second(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_time(datetime = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def select_year(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def time_ago_in_words(from_time, options = T.unsafe(nil)); end
  def time_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def time_tag(date_or_time, *args, &block); end

  private

  def normalize_distance_of_time_argument_to_time(value); end
end

ActionView::Helpers::DateHelper::MINUTES_IN_QUARTER_YEAR = T.let(T.unsafe(nil), Integer)
ActionView::Helpers::DateHelper::MINUTES_IN_THREE_QUARTERS_YEAR = T.let(T.unsafe(nil), Integer)
ActionView::Helpers::DateHelper::MINUTES_IN_YEAR = T.let(T.unsafe(nil), Integer)

class ActionView::Helpers::DateTimeSelector
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def initialize(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  def select_date; end
  def select_datetime; end
  def select_day; end
  def select_hour; end
  def select_minute; end
  def select_month; end
  def select_second; end
  def select_time; end
  def select_year; end

  private

  def build_day_options(selected); end
  def build_hidden(type, value); end
  def build_options(selected, options = T.unsafe(nil)); end
  def build_options_and_select(type, selected, options = T.unsafe(nil)); end
  def build_select(type, select_options_as_html); end
  def build_selects_from_types(order); end
  def build_year_options(selected, options = T.unsafe(nil)); end
  def css_class_attribute(type, html_options_class, options); end
  def date_order; end
  def day; end
  def day_name(number); end
  def hour; end
  def input_id_from_type(type); end
  def input_name_from_type(type); end
  def min; end
  def month; end
  def month_name(number); end
  def month_names; end
  def prompt_option_tag(type, options); end
  def prompt_text(prompt, type); end
  def sec; end
  def separator(type); end
  def set_day_if_discarded; end
  def translated_date_order; end
  def translated_month_names; end
  def year; end
  def year_name(number); end
end

ActionView::Helpers::DateTimeSelector::AMPM_TRANSLATION = T.let(T.unsafe(nil), Hash)
ActionView::Helpers::DateTimeSelector::DEFAULT_PREFIX = T.let(T.unsafe(nil), String)
ActionView::Helpers::DateTimeSelector::POSITION = T.let(T.unsafe(nil), Hash)

module ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def debug(object); end
end

class ActionView::Helpers::FormBuilder
  include ::ActionView::ModelNaming

  def initialize(object_name, object, template, options); end

  def button(value = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def check_box(method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end
  def collection_check_boxes(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def collection_radio_buttons(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def collection_select(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def color_field(method, options = T.unsafe(nil)); end
  def date_field(method, options = T.unsafe(nil)); end
  def date_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def datetime_field(method, options = T.unsafe(nil)); end
  def datetime_local_field(method, options = T.unsafe(nil)); end
  def datetime_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def email_field(method, options = T.unsafe(nil)); end
  def emitted_hidden_id?; end
  def field_helpers; end
  def field_helpers=(_arg0); end
  def field_helpers?; end
  def field_id(method, *suffixes, namespace: T.unsafe(nil), index: T.unsafe(nil)); end
  def field_name(method, *methods, multiple: T.unsafe(nil), index: T.unsafe(nil)); end
  def fields(scope = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end
  def fields_for(record_name, record_object = T.unsafe(nil), fields_options = T.unsafe(nil), &block); end
  def file_field(method, options = T.unsafe(nil)); end
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def hidden_field(method, options = T.unsafe(nil)); end
  def id; end
  def index; end
  def label(method, text = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def month_field(method, options = T.unsafe(nil)); end
  def multipart; end
  def multipart=(multipart); end
  def multipart?; end
  def number_field(method, options = T.unsafe(nil)); end
  def object; end
  def object=(_arg0); end
  def object_name; end
  def object_name=(_arg0); end
  def options; end
  def options=(_arg0); end
  def password_field(method, options = T.unsafe(nil)); end
  def phone_field(method, options = T.unsafe(nil)); end
  def radio_button(method, tag_value, options = T.unsafe(nil)); end
  def range_field(method, options = T.unsafe(nil)); end
  def search_field(method, options = T.unsafe(nil)); end
  def select(method, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def submit(value = T.unsafe(nil), options = T.unsafe(nil)); end
  def telephone_field(method, options = T.unsafe(nil)); end
  def text_area(method, options = T.unsafe(nil)); end
  def text_field(method, options = T.unsafe(nil)); end
  def time_field(method, options = T.unsafe(nil)); end
  def time_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def time_zone_select(method, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def to_model; end
  def to_partial_path; end
  def url_field(method, options = T.unsafe(nil)); end
  def week_field(method, options = T.unsafe(nil)); end
  def weekday_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  private

  def convert_to_legacy_options(options); end
  def fields_for_nested_model(name, object, fields_options, block); end
  def fields_for_with_nested_attributes(association_name, association, options, block); end
  def nested_attributes_association?(association_name); end
  def nested_child_index(name); end
  def objectify_options(options); end
  def submit_default_value; end

  class << self
    def _to_partial_path; end
    def field_helpers; end
    def field_helpers=(value); end
    def field_helpers?; end
  end
end

module ActionView::Helpers::FormHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  extend ::ActiveSupport::Concern
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def _object_for_form_builder(object); end
  def check_box(object_name, method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end
  def color_field(object_name, method, options = T.unsafe(nil)); end
  def date_field(object_name, method, options = T.unsafe(nil)); end
  def datetime_field(object_name, method, options = T.unsafe(nil)); end
  def datetime_local_field(object_name, method, options = T.unsafe(nil)); end
  def default_form_builder; end
  def default_form_builder=(_arg0); end
  def email_field(object_name, method, options = T.unsafe(nil)); end
  def fields(scope = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end
  def fields_for(record_name, record_object = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def file_field(object_name, method, options = T.unsafe(nil)); end
  def form_for(record, options = T.unsafe(nil), &block); end
  def form_with(model: T.unsafe(nil), scope: T.unsafe(nil), url: T.unsafe(nil), format: T.unsafe(nil), **options, &block); end
  def form_with_generates_ids; end
  def form_with_generates_ids=(val); end
  def form_with_generates_remote_forms; end
  def form_with_generates_remote_forms=(val); end
  def hidden_field(object_name, method, options = T.unsafe(nil)); end
  def label(object_name, method, content_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def month_field(object_name, method, options = T.unsafe(nil)); end
  def multiple_file_field_include_hidden; end
  def multiple_file_field_include_hidden=(val); end
  def number_field(object_name, method, options = T.unsafe(nil)); end
  def password_field(object_name, method, options = T.unsafe(nil)); end
  def phone_field(object_name, method, options = T.unsafe(nil)); end
  def radio_button(object_name, method, tag_value, options = T.unsafe(nil)); end
  def range_field(object_name, method, options = T.unsafe(nil)); end
  def search_field(object_name, method, options = T.unsafe(nil)); end
  def telephone_field(object_name, method, options = T.unsafe(nil)); end
  def text_area(object_name, method, options = T.unsafe(nil)); end
  def text_field(object_name, method, options = T.unsafe(nil)); end
  def time_field(object_name, method, options = T.unsafe(nil)); end
  def url_field(object_name, method, options = T.unsafe(nil)); end
  def week_field(object_name, method, options = T.unsafe(nil)); end

  private

  def apply_form_for_options!(object, options); end
  def default_form_builder_class; end
  def html_options_for_form_with(url_for_options = T.unsafe(nil), model = T.unsafe(nil), html: T.unsafe(nil), local: T.unsafe(nil), skip_enforcing_utf8: T.unsafe(nil), **options); end
  def instantiate_builder(record_name, record_object, options); end

  class << self
    def form_with_generates_ids; end
    def form_with_generates_ids=(val); end
    def form_with_generates_remote_forms; end
    def form_with_generates_remote_forms=(val); end
    def multiple_file_field_include_hidden; end
    def multiple_file_field_include_hidden=(val); end
  end
end

module ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TextHelper
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def collection_check_boxes(object, method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def collection_radio_buttons(object, method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def collection_select(object, method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def grouped_options_for_select(grouped_options, selected_key = T.unsafe(nil), options = T.unsafe(nil)); end
  def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = T.unsafe(nil)); end
  def options_for_select(container, selected = T.unsafe(nil)); end
  def options_from_collection_for_select(collection, value_method, text_method, selected = T.unsafe(nil)); end
  def select(object, method, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def time_zone_options_for_select(selected = T.unsafe(nil), priority_zones = T.unsafe(nil), model = T.unsafe(nil)); end
  def time_zone_select(object, method, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def weekday_options_for_select(selected = T.unsafe(nil), index_as_value: T.unsafe(nil), day_format: T.unsafe(nil), beginning_of_week: T.unsafe(nil)); end
  def weekday_select(object, method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  private

  def extract_selected_and_disabled(selected); end
  def extract_values_from_collection(collection, value_method, selected); end
  def option_html_attributes(element); end
  def option_text_and_value(option); end
  def option_value_selected?(value, selected); end
  def prompt_text(prompt); end
  def value_for_collection(item, value); end
end

module ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  extend ::ActiveSupport::Concern
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def button_tag(content_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def check_box_tag(name, *args); end
  def color_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def date_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def datetime_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def datetime_local_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def default_enforce_utf8; end
  def default_enforce_utf8=(val); end
  def email_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def embed_authenticity_token_in_remote_forms; end
  def embed_authenticity_token_in_remote_forms=(val); end
  def field_id(object_name, method_name, *suffixes, index: T.unsafe(nil), namespace: T.unsafe(nil)); end
  def field_name(object_name, method_name, *method_names, multiple: T.unsafe(nil), index: T.unsafe(nil)); end
  def field_set_tag(legend = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def fieldset_tag(legend = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def file_field_tag(name, options = T.unsafe(nil)); end
  def form_tag(url_for_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def hidden_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def image_submit_tag(source, options = T.unsafe(nil)); end
  def label_tag(name = T.unsafe(nil), content_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def month_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def number_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def password_field_tag(name = T.unsafe(nil), value = T.unsafe(nil), options = T.unsafe(nil)); end
  def phone_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def radio_button_tag(name, value, *args); end
  def range_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def search_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def select_tag(name, option_tags = T.unsafe(nil), options = T.unsafe(nil)); end
  def submit_tag(value = T.unsafe(nil), options = T.unsafe(nil)); end
  def telephone_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def text_area_tag(name, content = T.unsafe(nil), options = T.unsafe(nil)); end
  def text_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def time_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def url_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def utf8_enforcer_tag; end
  def week_field_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  def convert_direct_upload_option_to_url(options); end
  def extra_tags_for_form(html_options); end
  def form_tag_html(html_options); end
  def form_tag_with_body(html_options, content); end
  def html_options_for_form(url_for_options, options); end
  def sanitize_to_id(name); end
  def set_default_disable_with(value, tag_options); end

  class << self
    def default_enforce_utf8; end
    def default_enforce_utf8=(val); end
    def embed_authenticity_token_in_remote_forms; end
    def embed_authenticity_token_in_remote_forms=(val); end
  end
end

module ActionView::Helpers::JavaScriptHelper
  def escape_javascript(javascript); end
  def j(javascript); end
  def javascript_cdata_section(content); end
  def javascript_tag(content_or_options_with_block = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
end

ActionView::Helpers::JavaScriptHelper::JS_ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

module ActionView::Helpers::NumberHelper
  def number_to_currency(number, options = T.unsafe(nil)); end
  def number_to_human(number, options = T.unsafe(nil)); end
  def number_to_human_size(number, options = T.unsafe(nil)); end
  def number_to_percentage(number, options = T.unsafe(nil)); end
  def number_to_phone(number, options = T.unsafe(nil)); end
  def number_with_delimiter(number, options = T.unsafe(nil)); end
  def number_with_precision(number, options = T.unsafe(nil)); end

  private

  def delegate_number_helper_method(method, number, options); end
  def escape_units(units); end
  def escape_unsafe_options(options); end
  def parse_float(number, raise_error); end
  def valid_float?(number); end
  def wrap_with_output_safety_handling(number, raise_on_invalid, &block); end
end

class ActionView::Helpers::NumberHelper::InvalidNumberError < ::StandardError
  def initialize(number); end

  def number; end
  def number=(_arg0); end
end

module ActionView::Helpers::OutputSafetyHelper
  def raw(stringish); end
  def safe_join(array, sep = T.unsafe(nil)); end
  def to_sentence(array, options = T.unsafe(nil)); end
end

module ActionView::Helpers::RenderingHelper
  def _layout_for(*args, &block); end
  def render(options = T.unsafe(nil), locals = T.unsafe(nil), &block); end
end

module ActionView::Helpers::SanitizeHelper
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def sanitize(html, options = T.unsafe(nil)); end
  def sanitize_css(style); end
  def sanitizer_vendor; end
  def sanitizer_vendor=(val); end
  def strip_links(html); end
  def strip_tags(html); end

  class << self
    def sanitizer_vendor; end
    def sanitizer_vendor=(val); end
  end
end

module ActionView::Helpers::SanitizeHelper::ClassMethods
  def full_sanitizer; end
  def full_sanitizer=(_arg0); end
  def link_sanitizer; end
  def link_sanitizer=(_arg0); end
  def safe_list_sanitizer; end
  def safe_list_sanitizer=(_arg0); end
  def sanitized_allowed_attributes; end
  def sanitized_allowed_attributes=(attributes); end
  def sanitized_allowed_css_keywords; end
  def sanitized_allowed_css_keywords=(_); end
  def sanitized_allowed_css_properties; end
  def sanitized_allowed_css_properties=(_); end
  def sanitized_allowed_protocols; end
  def sanitized_allowed_protocols=(_); end
  def sanitized_allowed_tags; end
  def sanitized_allowed_tags=(tags); end
  def sanitized_bad_tags; end
  def sanitized_bad_tags=(_); end
  def sanitized_protocol_separator; end
  def sanitized_protocol_separator=(_); end
  def sanitized_shorthand_css_properties; end
  def sanitized_shorthand_css_properties=(_); end
  def sanitized_uri_attributes; end
  def sanitized_uri_attributes=(_); end
  def sanitizer_vendor; end

  private

  def deprecate_option(name); end
end

module ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper

  def cdata_section(content); end
  def class_names(*args); end
  def content_tag(name, content_or_options_with_block = T.unsafe(nil), options = T.unsafe(nil), escape = T.unsafe(nil), &block); end
  def escape_once(html); end
  def tag(name = T.unsafe(nil), options = T.unsafe(nil), open = T.unsafe(nil), escape = T.unsafe(nil)); end
  def token_list(*args); end

  private

  def build_tag_values(*args); end
  def ensure_valid_html5_tag_name(name); end
  def tag_builder; end

  class << self
    def build_tag_values(*args); end
    def ensure_valid_html5_tag_name(name); end
  end
end

ActionView::Helpers::TagHelper::ARIA_PREFIXES = T.let(T.unsafe(nil), Set)
ActionView::Helpers::TagHelper::BOOLEAN_ATTRIBUTES = T.let(T.unsafe(nil), Set)
ActionView::Helpers::TagHelper::DATA_PREFIXES = T.let(T.unsafe(nil), Set)
ActionView::Helpers::TagHelper::PRE_CONTENT_STRINGS = T.let(T.unsafe(nil), Hash)
ActionView::Helpers::TagHelper::TAG_TYPES = T.let(T.unsafe(nil), Hash)

class ActionView::Helpers::TagHelper::TagBuilder
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper

  def initialize(view_context); end

  def a(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def abbr(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def address(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def animate(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def animate_motion(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def animate_transform(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def area(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def article(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def aside(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def attributes(attributes); end
  def audio(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def b(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def base(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def bdi(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def bdo(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def blockquote(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def body(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def boolean_tag_option(key); end
  def br(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def button(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def canvas(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def caption(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def circle(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def cite(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def code(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def col(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def colgroup(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def content_tag_string(name, content, options, escape = T.unsafe(nil)); end
  def data(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def datalist(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def dd(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def del(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def details(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def dfn(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def dialog(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def div(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def dl(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def dt(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def ellipse(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def em(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def embed(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def fieldset(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def figcaption(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def figure(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def footer(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def form(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h1(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h2(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h3(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h4(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h5(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def h6(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def head(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def header(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def hgroup(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def hr(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def html(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def i(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def iframe(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def img(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def input(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def ins(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def kbd(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def keygen(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def label(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def legend(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def li(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def line(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def link(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def main(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def map(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def mark(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def menu(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def meta(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def meter(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def nav(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def noscript(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def object(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def ol(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def optgroup(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def option(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def output(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def p(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def path(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def picture(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def polygon(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def polyline(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def portal(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def pre(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def progress(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def q(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def rect(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def rp(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def rt(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def ruby(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def s(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def samp(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def script(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def search(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def section(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def select(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def self_closing_tag_string(name, options, escape = T.unsafe(nil), tag_suffix = T.unsafe(nil)); end
  def set(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def slot(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def small(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def source(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def span(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def stop(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def strong(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def style(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def sub(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def summary(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def sup(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def table(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def tag_option(key, value, escape); end
  def tag_options(options, escape = T.unsafe(nil)); end
  def tag_string(name, content = T.unsafe(nil), options, escape: T.unsafe(nil), &block); end
  def tbody(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def td(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def template(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def textarea(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def tfoot(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def th(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def thead(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def time(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def title(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def tr(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def track(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def u(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def ul(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def use(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def var(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def video(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def view(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end
  def wbr(content = T.unsafe(nil), escape: T.unsafe(nil), **options, &block); end

  private

  def method_missing(called, *args, escape: T.unsafe(nil), **options, &block); end
  def prefix_tag_option(prefix, key, value, escape); end
  def respond_to_missing?(*args); end

  class << self
    def define_element(name, code_generator:, method_name: T.unsafe(nil)); end
    def define_self_closing_element(name, code_generator:, method_name: T.unsafe(nil)); end
    def define_void_element(name, code_generator:, method_name: T.unsafe(nil)); end
  end
end

module ActionView::Helpers::Tags
  extend ::ActiveSupport::Autoload
end

class ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::ActiveModelInstanceTag
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def initialize(object_name, method_name, template_object, options = T.unsafe(nil)); end

  def object; end
  def render; end

  private

  def add_default_name_and_id(options); end
  def add_default_name_and_id_for_value(tag_value, options); end
  def generate_ids?; end
  def name_and_id_index(options); end
  def retrieve_autoindex(pre_match); end
  def retrieve_object(object); end
  def sanitized_method_name; end
  def sanitized_value(value); end
  def tag_id(index = T.unsafe(nil), namespace = T.unsafe(nil)); end
  def tag_name(multiple = T.unsafe(nil), index = T.unsafe(nil)); end
  def value; end
  def value_before_type_cast; end
  def value_came_from_user?; end
end

class ActionView::Helpers::Tags::CheckBox < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Checkable

  def initialize(object_name, method_name, template_object, checked_value, unchecked_value, options); end

  def render; end

  private

  def checked?(value); end
  def hidden_field_for_checkbox(options); end
end

module ActionView::Helpers::Tags::Checkable
  def input_checked?(options); end
end

class ActionView::Helpers::Tags::CollectionCheckBoxes < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::CollectionHelpers
  include ::ActionView::Helpers::FormOptionsHelper

  def render(&block); end

  private

  def hidden_field_name; end
  def render_component(builder); end
end

class ActionView::Helpers::Tags::CollectionCheckBoxes::CheckBoxBuilder < ::ActionView::Helpers::Tags::CollectionHelpers::Builder
  def check_box(extra_html_options = T.unsafe(nil)); end
end

module ActionView::Helpers::Tags::CollectionHelpers
  def initialize(object_name, method_name, template_object, collection, value_method, text_method, options, html_options); end

  private

  def default_html_options_for_collection(item, value); end
  def hidden_field; end
  def hidden_field_name; end
  def instantiate_builder(builder_class, item, value, text, html_options); end
  def render_collection; end
  def render_collection_for(builder_class, &block); end
  def sanitize_attribute_name(value); end
end

class ActionView::Helpers::Tags::CollectionHelpers::Builder
  def initialize(template_object, object_name, method_name, object, sanitized_attribute_name, text, value, input_html_options); end

  def label(label_html_options = T.unsafe(nil), &block); end
  def object; end
  def text; end
  def value; end
end

class ActionView::Helpers::Tags::CollectionRadioButtons < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::CollectionHelpers
  include ::ActionView::Helpers::FormOptionsHelper

  def render(&block); end

  private

  def render_component(builder); end
end

class ActionView::Helpers::Tags::CollectionRadioButtons::RadioButtonBuilder < ::ActionView::Helpers::Tags::CollectionHelpers::Builder
  def radio_button(extra_html_options = T.unsafe(nil)); end
end

class ActionView::Helpers::Tags::CollectionSelect < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer
  include ::ActionView::Helpers::FormOptionsHelper

  def initialize(object_name, method_name, template_object, collection, value_method, text_method, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::ColorField < ::ActionView::Helpers::Tags::TextField
  def render; end

  private

  def validate_color_string(string); end
end

class ActionView::Helpers::Tags::DateField < ::ActionView::Helpers::Tags::DatetimeField
  private

  def format_datetime(value); end
end

class ActionView::Helpers::Tags::DateSelect < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer

  def initialize(object_name, method_name, template_object, options, html_options); end

  def render; end

  private

  def datetime_selector(options, html_options); end
  def default_datetime(options); end
  def select_type; end

  class << self
    def select_type; end
  end
end

class ActionView::Helpers::Tags::DatetimeField < ::ActionView::Helpers::Tags::TextField
  def render; end

  private

  def datetime_value(value); end
  def format_datetime(value); end
  def parse_datetime(value); end
end

class ActionView::Helpers::Tags::DatetimeLocalField < ::ActionView::Helpers::Tags::DatetimeField
  def initialize(object_name, method_name, template_object, options = T.unsafe(nil)); end

  private

  def format_datetime(value); end

  class << self
    def field_type; end
  end
end

class ActionView::Helpers::Tags::DatetimeSelect < ::ActionView::Helpers::Tags::DateSelect; end
class ActionView::Helpers::Tags::EmailField < ::ActionView::Helpers::Tags::TextField; end

class ActionView::Helpers::Tags::FileField < ::ActionView::Helpers::Tags::TextField
  def render; end

  private

  def hidden_field_for_multiple_file(options); end
end

class ActionView::Helpers::Tags::GroupedCollectionSelect < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer
  include ::ActionView::Helpers::FormOptionsHelper

  def initialize(object_name, method_name, template_object, collection, group_method, group_label_method, option_key_method, option_value_method, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::HiddenField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::Label < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, content_or_options = T.unsafe(nil), options = T.unsafe(nil)); end

  def render(&block); end

  private

  def render_component(builder); end
end

class ActionView::Helpers::Tags::Label::LabelBuilder
  def initialize(template_object, object_name, method_name, object, tag_value); end

  def object; end
  def to_s; end
  def translation; end
end

class ActionView::Helpers::Tags::MonthField < ::ActionView::Helpers::Tags::DatetimeField
  private

  def format_datetime(value); end
end

class ActionView::Helpers::Tags::NumberField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::PasswordField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

module ActionView::Helpers::Tags::Placeholderable
  def initialize(*_arg0); end
end

class ActionView::Helpers::Tags::RadioButton < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Checkable

  def initialize(object_name, method_name, template_object, tag_value, options); end

  def render; end

  private

  def checked?(value); end
end

class ActionView::Helpers::Tags::RangeField < ::ActionView::Helpers::Tags::NumberField; end

class ActionView::Helpers::Tags::SearchField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::Select < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer
  include ::ActionView::Helpers::FormOptionsHelper

  def initialize(object_name, method_name, template_object, choices, options, html_options); end

  def render; end

  private

  def grouped_choices?; end
end

module ActionView::Helpers::Tags::SelectRenderer
  private

  def add_options(option_tags, options, value = T.unsafe(nil)); end
  def placeholder_required?(html_options); end
  def select_content_tag(option_tags, options, html_options); end
end

class ActionView::Helpers::Tags::TelField < ::ActionView::Helpers::Tags::TextField; end

class ActionView::Helpers::Tags::TextArea < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Placeholderable

  def render; end
end

class ActionView::Helpers::Tags::TextField < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Placeholderable

  def render; end

  private

  def field_type; end

  class << self
    def field_type; end
  end
end

class ActionView::Helpers::Tags::TimeField < ::ActionView::Helpers::Tags::DatetimeField
  def initialize(object_name, method_name, template_object, options = T.unsafe(nil)); end

  private

  def format_datetime(value); end
end

class ActionView::Helpers::Tags::TimeSelect < ::ActionView::Helpers::Tags::DateSelect; end

class ActionView::Helpers::Tags::TimeZoneSelect < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer
  include ::ActionView::Helpers::FormOptionsHelper

  def initialize(object_name, method_name, template_object, priority_zones, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::Translator
  def initialize(object, object_name, method_and_value, scope:); end

  def translate; end

  private

  def human_attribute_name; end
  def i18n_default; end
  def method_and_value; end
  def model; end
  def object_name; end
  def scope; end
end

class ActionView::Helpers::Tags::UrlField < ::ActionView::Helpers::Tags::TextField; end

class ActionView::Helpers::Tags::WeekField < ::ActionView::Helpers::Tags::DatetimeField
  private

  def format_datetime(value); end
end

class ActionView::Helpers::Tags::WeekdaySelect < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::SelectRenderer
  include ::ActionView::Helpers::FormOptionsHelper

  def initialize(object_name, method_name, template_object, options, html_options); end

  def render; end
end

module ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  extend ::ActiveSupport::Concern
  include ::ActionView::Helpers::SanitizeHelper

  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def concat(string); end
  def current_cycle(name = T.unsafe(nil)); end
  def cycle(first_value, *values); end
  def excerpt(text, phrase, options = T.unsafe(nil)); end
  def highlight(text, phrases, options = T.unsafe(nil), &block); end
  def pluralize(count, singular, plural_arg = T.unsafe(nil), plural: T.unsafe(nil), locale: T.unsafe(nil)); end
  def reset_cycle(name = T.unsafe(nil)); end
  def safe_concat(string); end
  def simple_format(text, html_options = T.unsafe(nil), options = T.unsafe(nil)); end
  def truncate(text, options = T.unsafe(nil), &block); end
  def word_wrap(text, line_width: T.unsafe(nil), break_sequence: T.unsafe(nil)); end

  private

  def cut_excerpt_part(part_position, part, separator, options); end
  def get_cycle(name); end
  def set_cycle(name, cycle_object); end
  def split_paragraphs(text); end
end

class ActionView::Helpers::TextHelper::Cycle
  def initialize(first_value, *values); end

  def current_value; end
  def reset; end
  def to_s; end
  def values; end

  private

  def next_index; end
  def previous_index; end
  def step_index(n); end
end

module ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  extend ::ActiveSupport::Concern

  def l(object, **options); end
  def localize(object, **options); end
  def t(key, **options); end
  def translate(key, **options); end

  private

  def missing_translation(key, options); end
  def scope_key_by_partial(key); end

  class << self
    def raise_on_missing_translations; end
    def raise_on_missing_translations=(_arg0); end
  end
end

ActionView::Helpers::TranslationHelper::MISSING_TRANSLATION = T.let(T.unsafe(nil), Integer)
ActionView::Helpers::TranslationHelper::NO_DEFAULT = T.let(T.unsafe(nil), Array)

module ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods

  def button_to(name = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def button_to_generates_button_tag; end
  def button_to_generates_button_tag=(val); end
  def current_page?(options = T.unsafe(nil), check_parameters: T.unsafe(nil), **options_as_kwargs); end
  def link_to(name = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def link_to_if(condition, name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def link_to_unless(condition, name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def link_to_unless_current(name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def mail_to(email_address, name = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def phone_to(phone_number, name = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def sms_to(phone_number, name = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def url_for(options = T.unsafe(nil)); end

  private

  def _back_url; end
  def _filtered_referrer; end
  def add_method_to_attributes!(html_options, method); end
  def convert_options_to_data_attributes(options, html_options); end
  def link_to_remote_options?(options); end
  def method_for_options(options); end
  def method_not_get_method?(method); end
  def method_tag(method); end
  def remove_trailing_slash!(url_string); end
  def to_form_params(attribute, namespace = T.unsafe(nil)); end
  def token_tag(token = T.unsafe(nil), form_options: T.unsafe(nil)); end
  def url_target(name, options); end

  class << self
    def button_to_generates_button_tag; end
    def button_to_generates_button_tag=(val); end
  end
end

ActionView::Helpers::UrlHelper::BUTTON_TAG_METHOD_VERBS = T.let(T.unsafe(nil), Array)

module ActionView::Helpers::UrlHelper::ClassMethods
  def _url_for_modules; end
end

ActionView::Helpers::UrlHelper::STRINGIFIED_COMMON_METHODS = T.let(T.unsafe(nil), Hash)

class ActionView::I18nProxy < ::I18n::Config
  def initialize(original_config, lookup_context); end

  def locale; end
  def locale=(value); end
  def lookup_context; end
  def original_config; end
end

module ActionView::Layouts
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionView::ViewPaths
  include ::ActionView::Rendering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods
  mixes_in_class_methods ::ActionView::Layouts::ClassMethods

  def initialize(*_arg0); end

  def _normalize_options(options); end
  def action_has_layout=(_arg0); end
  def action_has_layout?; end

  private

  def _conditional_layout?; end
  def _default_layout(lookup_context, formats, require_layout = T.unsafe(nil)); end
  def _include_layout?(options); end
  def _layout(*_arg0); end
  def _layout_for_option(name); end
  def _normalize_layout(value); end

  module GeneratedClassMethods
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
  end

  module GeneratedInstanceMethods
    def _layout_conditions; end
    def _layout_conditions?; end
  end
end

module ActionView::Layouts::ClassMethods
  def _write_layout_method; end
  def inherited(klass); end
  def layout(layout, conditions = T.unsafe(nil)); end

  private

  def _implied_layout_name; end
end

module ActionView::Layouts::ClassMethods::LayoutConditions
  private

  def _conditional_layout?; end
end

class ActionView::LogSubscriber < ::ActiveSupport::LogSubscriber
  include ::ActionView::LogSubscriber::Utils

  def initialize; end

  def render_collection(event); end
  def render_layout(event); end
  def render_partial(event); end
  def render_template(event); end

  private

  def cache_message(payload); end
  def render_count(payload); end

  class << self
    def attach_to(*_arg0); end
    def log_levels; end
  end
end

class ActionView::LogSubscriber::Start
  include ::ActionView::LogSubscriber::Utils

  def finish(name, id, payload); end
  def silenced?(_); end
  def start(name, id, payload); end
end

module ActionView::LogSubscriber::Utils
  def logger; end

  private

  def from_rails_root(string); end
  def rails_root; end
end

ActionView::LogSubscriber::VIEWS_PATTERN = T.let(T.unsafe(nil), Regexp)

class ActionView::LookupContext
  include ::ActionView::LookupContext::Accessors
  include ::ActionView::LookupContext::DetailsCache
  include ::ActionView::LookupContext::ViewPaths

  def initialize(view_paths, details = T.unsafe(nil), prefixes = T.unsafe(nil)); end

  def digest_cache; end
  def formats=(values); end
  def locale; end
  def locale=(value); end
  def prefixes; end
  def prefixes=(_arg0); end
  def with_prepended_formats(formats); end

  private

  def initialize_details(target, details); end

  class << self
    def register_detail(name, &block); end
    def registered_details; end
    def registered_details=(_arg0); end
  end
end

module ActionView::LookupContext::Accessors
  def default_formats; end
  def default_handlers; end
  def default_locale; end
  def default_variants; end
  def formats; end
  def formats=(value); end
  def handlers; end
  def handlers=(value); end
  def locale; end
  def locale=(value); end
  def variants; end
  def variants=(value); end
end

ActionView::LookupContext::Accessors::DEFAULT_PROCS = T.let(T.unsafe(nil), Hash)

module ActionView::LookupContext::DetailsCache
  def cache; end
  def cache=(_arg0); end
  def details_key; end
  def disable_cache; end

  private

  def _set_detail(key, value); end
end

class ActionView::LookupContext::DetailsKey
  def eql?(_arg0); end

  class << self
    def clear; end
    def details_cache_key(details); end
    def digest_cache(details); end
    def digest_caches; end
    def view_context_class; end
  end
end

module ActionView::LookupContext::ViewPaths
  def any?(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil)); end
  def any_templates?(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil)); end
  def append_view_paths(paths); end
  def exists?(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil), keys = T.unsafe(nil), **options); end
  def find(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil), keys = T.unsafe(nil), options = T.unsafe(nil)); end
  def find_all(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil), keys = T.unsafe(nil), options = T.unsafe(nil)); end
  def find_template(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil), keys = T.unsafe(nil), options = T.unsafe(nil)); end
  def html_fallback_for_js; end
  def prepend_view_paths(paths); end
  def template_exists?(name, prefixes = T.unsafe(nil), partial = T.unsafe(nil), keys = T.unsafe(nil), **options); end
  def view_paths; end

  private

  def build_view_paths(paths); end
  def detail_args_for(options); end
  def detail_args_for_any; end
  def normalize_name(name, prefixes); end
end

class ActionView::MissingTemplate < ::ActionView::ActionViewError
  include ::DidYouMean::Correctable

  def initialize(paths, path, prefixes, partial, details, *_arg5); end

  def corrections; end
  def partial; end
  def path; end
  def paths; end
  def prefixes; end
end

class ActionView::MissingTemplate::Results
  def initialize(size); end

  def add(path, score); end
  def should_record?(score); end
  def to_a; end
end

class ActionView::MissingTemplate::Results::Result < ::Struct
  def path; end
  def path=(_); end
  def score; end
  def score=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActionView::ModelNaming
  def convert_to_model(object); end
  def model_name_from_record_or_class(record_or_class); end
end

class ActionView::ObjectRenderer < ::ActionView::PartialRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering

  def initialize(lookup_context, options); end

  def render_object_derive_partial(object, context, block); end
  def render_object_with_partial(object, partial, context, block); end

  private

  def render_partial_template(view, locals, template, layout, block); end
  def template_keys(path); end
end

class ActionView::OutputBuffer
  def initialize(buffer = T.unsafe(nil)); end

  def <<(value); end
  def ==(other); end
  def append=(value); end
  def blank?(*_arg0, **_arg1, &_arg2); end
  def capture(*args); end
  def concat(value); end
  def empty?(*_arg0, **_arg1, &_arg2); end
  def encode!(*_arg0, **_arg1, &_arg2); end
  def encoding(*_arg0, **_arg1, &_arg2); end
  def force_encoding(*_arg0, **_arg1, &_arg2); end
  def html_safe; end
  def html_safe?; end
  def length(*_arg0, **_arg1, &_arg2); end
  def raw; end
  def raw_buffer; end
  def safe_append=(value); end
  def safe_concat(value); end
  def safe_expr_append=(val); end
  def to_s; end
  def to_str; end

  private

  def initialize_copy(other); end
end

class ActionView::OutputFlow
  def initialize; end

  def append(key, value); end
  def append!(key, value); end
  def content; end
  def get(key); end
  def set(key, value); end
end

class ActionView::PartialIteration
  def initialize(size); end

  def first?; end
  def index; end
  def iterate!; end
  def last?; end
  def size; end
end

class ActionView::PartialRenderer < ::ActionView::AbstractRenderer
  include ::ActionView::CollectionCaching

  def initialize(lookup_context, options); end

  def collection_cache; end
  def collection_cache=(val); end
  def render(partial, context, block); end

  private

  def find_template(path, locals); end
  def render_partial_template(view, locals, template, layout, block); end
  def template_keys(_); end

  class << self
    def collection_cache; end
    def collection_cache=(val); end
  end
end

module ActionView::PathRegistry
  class << self
    def all_file_system_resolvers; end
    def all_resolvers; end
    def cast_file_system_resolvers(paths); end
    def file_system_resolver_hooks; end
    def get_view_paths(klass); end
    def set_view_paths(klass, paths); end
  end
end

class ActionView::PathSet
  include ::Enumerable

  def initialize(paths = T.unsafe(nil)); end

  def +(other); end
  def [](*_arg0, **_arg1, &_arg2); end
  def compact; end
  def each(*_arg0, **_arg1, &_arg2); end
  def exists?(path, prefixes, partial, details, details_key, locals); end
  def find(path, prefixes, partial, details, details_key, locals); end
  def find_all(path, prefixes, partial, details, details_key, locals); end
  def include?(*_arg0, **_arg1, &_arg2); end
  def paths; end
  def size(*_arg0, **_arg1, &_arg2); end
  def to_ary; end

  private

  def initialize_copy(other); end
  def search_combinations(prefixes); end
  def typecast(paths); end
end

class ActionView::Railtie < ::Rails::Engine
  class << self
    def __callbacks; end
  end
end

class ActionView::RawOutputBuffer
  def initialize(buffer); end

  def <<(value); end
  def raw; end
end

class ActionView::RawStreamingBuffer
  def initialize(buffer); end

  def <<(value); end
  def raw; end
end

module ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  extend ::ActionView::RecordIdentifier
  extend ::ActionView::ModelNaming

  def dom_class(record_or_class, prefix = T.unsafe(nil)); end
  def dom_id(record_or_class, prefix = T.unsafe(nil)); end

  private

  def record_key_for_dom_id(record); end
end

ActionView::RecordIdentifier::JOIN = T.let(T.unsafe(nil), String)
ActionView::RecordIdentifier::NEW = T.let(T.unsafe(nil), String)
module ActionView::RenderParser; end
ActionView::RenderParser::ALL_KNOWN_KEYS = T.let(T.unsafe(nil), Array)

class ActionView::RenderParser::Base
  def initialize(name, code); end

  private

  def directory; end
  def partial_to_virtual_path(render_type, partial_path); end
end

ActionView::RenderParser::Default = ActionView::RenderParser::PrismRenderParser

class ActionView::RenderParser::PrismRenderParser < ::ActionView::RenderParser::Base
  def render_calls; end

  private

  def render_call_options(node); end
  def render_call_template(node); end
end

ActionView::RenderParser::RENDER_TYPE_KEYS = T.let(T.unsafe(nil), Array)

class ActionView::Renderer
  def initialize(lookup_context); end

  def cache_hits; end
  def lookup_context; end
  def lookup_context=(_arg0); end
  def render(context, options); end
  def render_body(context, options); end
  def render_partial(context, options, &block); end
  def render_to_object(context, options); end

  private

  def collection_from_object(object); end
  def collection_from_options(options); end
  def render_partial_to_object(context, options, &block); end
  def render_template_to_object(context, options); end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods

  def initialize; end

  def process(*_arg0, **_arg1, &_arg2); end
  def render_to_body(options = T.unsafe(nil)); end
  def rendered_format; end
  def view_context; end
  def view_context_class; end
  def view_renderer; end

  private

  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end
  def _normalize_options(options); end
  def _process_format(format); end
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  def _helpers; end
  def _routes; end
  def build_view_context_class(klass, supports_path, routes, helpers); end
  def eager_load!; end
  def inherit_view_context_class?; end
  def view_context_class; end
end

class ActionView::Resolver
  def all_template_paths; end
  def built_templates; end
  def caching; end
  def caching=(val); end
  def caching?(&_arg0); end
  def clear_cache; end
  def find_all(name, prefix = T.unsafe(nil), partial = T.unsafe(nil), details = T.unsafe(nil), key = T.unsafe(nil), locals = T.unsafe(nil)); end

  private

  def _find_all(name, prefix, partial, details, key, locals); end
  def find_templates(name, prefix, partial, details, locals = T.unsafe(nil)); end

  class << self
    def caching; end
    def caching=(val); end
    def caching?; end
  end
end

class ActionView::Resolver::PathParser
  def build_path_regex; end
  def parse(path); end
end

class ActionView::Resolver::PathParser::ParsedPath < ::Struct
  def details; end
  def details=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes

  def default_url_options=(val); end
  def url_for(options = T.unsafe(nil)); end
  def url_options; end

  private

  def _generate_paths_by_default; end
  def _routes_context; end
  def ensure_only_path_option(options); end
  def optimize_routes_generation?; end

  class << self
    def default_url_options=(val); end
  end
end

class ActionView::StreamingBuffer
  def initialize(block); end

  def <<(value); end
  def append=(value); end
  def block; end
  def capture; end
  def concat(value); end
  def html_safe; end
  def html_safe?; end
  def raw; end
  def safe_append=(value); end
  def safe_concat(value); end
end

class ActionView::StreamingFlow < ::ActionView::OutputFlow
  def initialize(view, fiber); end

  def append!(key, value); end
  def get(key); end

  private

  def inside_fiber?; end
end

class ActionView::StreamingTemplateRenderer < ::ActionView::TemplateRenderer
  def render_template(view, template, layout_name = T.unsafe(nil), locals = T.unsafe(nil)); end

  private

  def delayed_render(buffer, template, layout, view, locals); end
end

class ActionView::StreamingTemplateRenderer::Body
  def initialize(&start); end

  def each(&block); end

  private

  def log_error(exception); end
end

class ActionView::SyntaxErrorInTemplate < ::ActionView::Template::Error
  def initialize(template, offending_code_string); end

  def annotated_source_code; end
  def message; end
end

class ActionView::Template
  extend ::ActiveSupport::Autoload
  extend ::ActionView::Template::Handlers

  def initialize(source, identifier, handler, locals:, format: T.unsafe(nil), variant: T.unsafe(nil), virtual_path: T.unsafe(nil)); end

  def encode!; end
  def format; end
  def handler; end
  def identifier; end
  def inspect; end
  def locals; end
  def marshal_dump; end
  def marshal_load(array); end
  def method_name; end
  def render(view, locals, buffer = T.unsafe(nil), implicit_locals: T.unsafe(nil), add_to_stack: T.unsafe(nil), &block); end
  def short_identifier; end
  def source; end
  def spot(location); end
  def strict_locals!; end
  def strict_locals?; end
  def supports_streaming?; end
  def translate_location(backtrace_location, spot); end
  def type; end
  def variable; end
  def variant; end
  def virtual_path; end

  private

  def compile(mod); end
  def compile!(view); end
  def compiled_source; end
  def find_node_by_id(node, node_id); end
  def handle_render_error(view, e); end
  def identifier_method_name; end
  def instrument(action, &block); end
  def instrument_payload; end
  def instrument_render_template(&block); end
  def locals_code; end
  def offset; end

  class << self
    def frozen_string_literal; end
    def frozen_string_literal=(_arg0); end
    def mime_types_implementation=(implementation); end
  end
end

class ActionView::Template::Error < ::ActionView::ActionViewError
  def initialize(template); end

  def annotated_source_code; end
  def backtrace; end
  def backtrace_locations; end
  def cause; end
  def file_name; end
  def line_number; end
  def source_extract(indentation = T.unsafe(nil)); end
  def sub_template_message; end
  def sub_template_of(template_path); end
  def template; end

  private

  def formatted_code_for(source_code, line_counter, indent); end
  def source_location; end
end

ActionView::Template::Error::SOURCE_CODE_RADIUS = T.let(T.unsafe(nil), Integer)

class ActionView::Template::HTML
  def initialize(string, type); end

  def format; end
  def identifier; end
  def inspect; end
  def render(*args); end
  def to_str; end
  def type; end
end

module ActionView::Template::Handlers
  def handler_for_extension(extension); end
  def register_default_template_handler(extension, klass); end
  def register_template_handler(*extensions, handler); end
  def registered_template_handler(extension); end
  def template_handler_extensions; end
  def unregister_template_handler(*extensions); end

  class << self
    def extended(base); end
    def extensions; end
  end
end

class ActionView::Template::Handlers::Builder
  def call(template, source); end
  def default_format; end
  def default_format=(_arg0); end
  def default_format?; end

  private

  def require_engine; end

  class << self
    def default_format; end
    def default_format=(value); end
    def default_format?; end
  end
end

class ActionView::Template::Handlers::ERB
  def call(template, source); end
  def erb_implementation; end
  def erb_implementation=(_arg0); end
  def erb_implementation?; end
  def erb_trim_mode; end
  def erb_trim_mode=(_arg0); end
  def erb_trim_mode?; end
  def escape_ignore_list; end
  def escape_ignore_list=(_arg0); end
  def escape_ignore_list?; end
  def handles_encoding?; end
  def strip_trailing_newlines; end
  def strip_trailing_newlines=(_arg0); end
  def strip_trailing_newlines?; end
  def supports_streaming?; end
  def translate_location(spot, backtrace_location, source); end

  private

  def find_offset(compiled, source_tokens, error_column); end
  def valid_encoding(string, encoding); end

  class << self
    def call(template, source); end
    def erb_implementation; end
    def erb_implementation=(value); end
    def erb_implementation?; end
    def erb_trim_mode; end
    def erb_trim_mode=(value); end
    def erb_trim_mode?; end
    def escape_ignore_list; end
    def escape_ignore_list=(value); end
    def escape_ignore_list?; end
    def strip_trailing_newlines; end
    def strip_trailing_newlines=(value); end
    def strip_trailing_newlines?; end
  end
end

ActionView::Template::Handlers::ERB::ENCODING_TAG = T.let(T.unsafe(nil), Regexp)

class ActionView::Template::Handlers::ERB::Erubi < ::Erubi::Engine
  def initialize(input, properties = T.unsafe(nil)); end

  private

  def add_code(code); end
  def add_expression(indicator, code); end
  def add_postamble(_); end
  def add_text(text); end
  def flush_newline_if_pending(src); end
end

ActionView::Template::Handlers::ERB::Erubi::BLOCK_EXPR = T.let(T.unsafe(nil), Regexp)
class ActionView::Template::Handlers::ERB::LocationParsingError < ::StandardError; end

class ActionView::Template::Handlers::Html < ::ActionView::Template::Handlers::Raw
  def call(template, source); end
end

class ActionView::Template::Handlers::Raw
  def call(template, source); end
end

class ActionView::Template::Inline < ::ActionView::Template
  def compile(mod); end
end

ActionView::Template::Inline::Finalizer = T.let(T.unsafe(nil), Proc)
ActionView::Template::LEADING_ENCODING_REGEXP = T.let(T.unsafe(nil), Regexp)
ActionView::Template::NONE = T.let(T.unsafe(nil), Object)
ActionView::Template::RUBY_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

class ActionView::Template::RawFile
  def initialize(filename); end

  def format; end
  def format=(_arg0); end
  def identifier; end
  def render(*args); end
  def type; end
  def type=(_arg0); end
end

class ActionView::Template::Renderable
  def initialize(renderable); end

  def format; end
  def identifier; end
  def render(context, *args); end
end

ActionView::Template::STRICT_LOCALS_REGEX = T.let(T.unsafe(nil), Regexp)

class ActionView::Template::SimpleType
  def initialize(symbol); end

  def ==(type); end
  def ref; end
  def symbol; end
  def to_s; end
  def to_str; end
  def to_sym; end

  class << self
    def [](type); end
    def symbols; end
    def valid_symbols?(symbols); end
  end
end

module ActionView::Template::Sources
  extend ::ActiveSupport::Autoload
end

class ActionView::Template::Sources::File
  def initialize(filename); end

  def to_s; end
end

class ActionView::Template::Text
  def initialize(string); end

  def format; end
  def identifier; end
  def inspect; end
  def render(*args); end
  def to_str; end
  def type; end
  def type=(_arg0); end
end

ActionView::Template::Types = Mime

class ActionView::TemplateDetails
  def initialize(locale, handler, format, variant); end

  def format; end
  def format_or_default; end
  def handler; end
  def handler_class; end
  def locale; end
  def matches?(requested); end
  def sort_key_for(requested); end
  def variant; end
end

class ActionView::TemplateDetails::Requested
  def initialize(locale:, handlers:, formats:, variants:); end

  def formats; end
  def formats_idx; end
  def handlers; end
  def handlers_idx; end
  def locale; end
  def locale_idx; end
  def variants; end
  def variants_idx; end

  private

  def build_idx_hash(arr); end
end

ActionView::TemplateDetails::Requested::ANY_HASH = T.let(T.unsafe(nil), Hash)
ActionView::TemplateError = ActionView::Template::Error

class ActionView::TemplatePath
  def initialize(name, prefix, partial, virtual); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def name; end
  def partial; end
  def partial?; end
  def prefix; end
  def to_s; end
  def to_str; end
  def virtual; end
  def virtual_path; end

  class << self
    def build(name, prefix, partial); end
    def parse(virtual); end
    def virtual(name, prefix, partial); end
  end
end

class ActionView::TemplateRenderer < ::ActionView::AbstractRenderer
  def render(context, options); end

  private

  def determine_template(options); end
  def find_layout(layout, keys, formats); end
  def render_template(view, template, layout_name, locals); end
  def render_with_layout(view, template, path, locals); end
  def resolve_layout(layout, keys, formats); end
end

class ActionView::TestCase < ::ActiveSupport::TestCase
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::Assertions
  include ::AbstractController::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::RoutingUrlFor
  include ::ActionView::TestCase::Behavior
  extend ::ActionDispatch::Assertions::RoutingAssertions::ClassMethods
  extend ::AbstractController::Helpers::Resolution
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods
  extend ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  extend ::ActionView::TestCase::Behavior::ClassMethods

  def _helper_methods; end
  def _helper_methods=(_arg0); end
  def _helper_methods?; end
  def debug_missing_translation; end
  def debug_missing_translation=(val); end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def _helpers; end
    def content_class; end
    def content_class=(value); end
    def content_class?; end
    def debug_missing_translation; end
    def debug_missing_translation=(val); end
  end
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::RoutingUrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::AbstractController::Helpers
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Testing::ConstantLookup

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionDispatch::Assertions::RoutingAssertions::ClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  mixes_in_class_methods ::ActionView::TestCase::Behavior::ClassMethods

  def _routes; end
  def config; end
  def controller; end
  def controller=(_arg0); end
  def lookup_context(*_arg0, **_arg1, &_arg2); end
  def output_buffer; end
  def output_buffer=(_arg0); end
  def render(options = T.unsafe(nil), local_assigns = T.unsafe(nil), &block); end
  def rendered; end
  def rendered=(_arg0); end
  def rendered_views; end
  def request; end
  def request=(_arg0); end
  def setup_with_controller; end

  private

  def _user_defined_ivars; end
  def _view; end
  def document_root_element; end
  def method_missing(selector, *_arg1, **_arg2, &_arg3); end
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
  def view; end
  def view_assigns; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def content_class; end
    def content_class=(value); end
    def content_class?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end
  def helper_class; end
  def helper_class=(_arg0); end
  def helper_method(*methods); end
  def inherited(descendant); end
  def new(*_arg0); end
  def register_parser(format, callable = T.unsafe(nil), &block); end
  def tests(helper_class); end

  private

  def include_helper_modules!; end
end

ActionView::TestCase::Behavior::INTERNAL_IVARS = T.let(T.unsafe(nil), Array)

module ActionView::TestCase::Behavior::Locals
  def render(options = T.unsafe(nil), local_assigns = T.unsafe(nil)); end
  def rendered_views; end
  def rendered_views=(_arg0); end
end

class ActionView::TestCase::Behavior::RenderedViewContent < ::String
  def html; end
  def json; end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def initialize; end

  def add(view, locals); end
  def locals_for(view); end
  def rendered_views; end
  def view_rendered?(view, expected_locals); end
end

module ActionView::TestCase::HelperMethods
  def _test_case; end
  def protect_against_forgery?; end
end

class ActionView::TestCase::TestController < ::ActionController::Base
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess

  def initialize; end

  def controller_path=(path); end
  def params; end
  def params=(_arg0); end
  def request; end
  def request=(_arg0); end
  def response; end
  def response=(_arg0); end

  private

  def _layout(lookup_context, formats); end

  class << self
    def controller_name; end
    def controller_path; end
    def controller_path=(_arg0); end
    def middleware_stack; end
  end
end

class ActionView::UnboundTemplate
  def initialize(source, identifier, details:, virtual_path:); end

  def bind_locals(locals); end
  def built_templates; end
  def details; end
  def format(*_arg0, **_arg1, &_arg2); end
  def handler(*_arg0, **_arg1, &_arg2); end
  def locale(*_arg0, **_arg1, &_arg2); end
  def variant(*_arg0, **_arg1, &_arg2); end
  def virtual_path; end

  private

  def build_template(locals); end
  def normalize_locals(locals); end
end

module ActionView::VERSION; end
ActionView::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
ActionView::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
ActionView::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)
ActionView::VERSION::STRING = T.let(T.unsafe(nil), String)
ActionView::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  def _prefixes; end
  def any_templates?(*_arg0, **_arg1, &_arg2); end
  def append_view_path(path); end
  def details_for_lookup; end
  def formats(*_arg0, **_arg1, &_arg2); end
  def formats=(arg); end
  def locale(*_arg0, **_arg1, &_arg2); end
  def locale=(arg); end
  def lookup_context; end
  def prepend_view_path(path); end
  def template_exists?(*_arg0, **_arg1, &_arg2); end
  def view_paths(*_arg0, **_arg1, &_arg2); end
end

module ActionView::ViewPaths::ClassMethods
  def _build_view_paths(paths); end
  def _prefixes; end
  def _view_paths; end
  def _view_paths=(paths); end
  def append_view_path(path); end
  def prepend_view_path(path); end
  def view_paths; end
  def view_paths=(paths); end

  private

  def local_prefixes; end
end

class ActionView::WrongEncodingError < ::ActionView::EncodingError
  def initialize(string, encoding); end

  def message; end
end

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end
