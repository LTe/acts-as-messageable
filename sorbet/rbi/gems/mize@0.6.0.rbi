# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mize` gem.
# Please instead update this file by running `bin/tapioca gem mize`.

module Mize
  extend ::Mize::Configure

  class << self
    def cache_clear; end
    def wrapped; end
    def wrapped=(_arg0); end

    private

    def each_cache; end
  end
end

module Mize::CacheMethods
  def mize_cache_clear; end
  def mize_cache_clear_name(name); end

  private

  def __mize_cache__; end
  def __mize_cache__=(cache); end
  def build_key(name, *args); end
  def build_key_prefix(name); end
  def memoize_apply_visibility(id); end
end

module Mize::CacheProtocol; end

module Mize::Configure
  def cache(cache); end
  def configure(&block); end
  def default_cache; end
  def default_cache=(_arg0); end
end

class Mize::DefaultCache
  include ::Mize::CacheProtocol
  include ::MonitorMixin

  def initialize; end

  def clear(options = T.unsafe(nil)); end
  def delete(name, options = T.unsafe(nil)); end
  def each_name(&block); end
  def exist?(name, options = T.unsafe(nil)); end
  def prototype; end
  def read(name, options = T.unsafe(nil)); end
  def write(name, value, options = T.unsafe(nil)); end

  private

  def initialize_dup(other); end
end

Mize::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

module Mize::Memoize
  include ::Mize::CacheMethods

  def memoize(method: T.unsafe(nil), function: T.unsafe(nil), freeze: T.unsafe(nil), store_nil: T.unsafe(nil)); end

  private

  def wrap_method(method_id, freeze: T.unsafe(nil), function: T.unsafe(nil), store_nil: T.unsafe(nil)); end

  class << self
    private

    def compute_result(method_id, orig_method, key, context, args, kargs, freeze); end
  end
end

module Mize::Reload
  def reload(*_arg0); end
end

Mize::VERSION = T.let(T.unsafe(nil), String)
Mize::VERSION_ARRAY = T.let(T.unsafe(nil), Array)
Mize::VERSION_BUILD = T.let(T.unsafe(nil), Integer)
Mize::VERSION_MAJOR = T.let(T.unsafe(nil), Integer)
Mize::VERSION_MINOR = T.let(T.unsafe(nil), Integer)

class Module
  include ::Mize::CacheMethods
  include ::Mize::Memoize
end
