# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday` gem.
# Please instead update this file by running `bin/tapioca gem faraday`.

# source://rake/13.0.6/lib/rake/clean.rb#63
::CLEAN = T.let(T.unsafe(nil), Rake::FileList)

# source://rake/13.0.6/lib/rake/clean.rb#73
::CLOBBER = T.let(T.unsafe(nil), Rake::FileList)

# source://yard/0.9.28/lib/yard.rb#61
::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard/0.9.28/lib/yard.rb#62
::RUBY19 = T.let(T.unsafe(nil), TrueClass)

# Public: This is the main namespace for Faraday.  You can either use it to
# create Faraday::Connection objects, or access it directly.
#
# Examples
#
#   Faraday.get "http://faraday.com"
#
#   conn = Faraday.new "http://faraday.com"
#   conn.get '/'
#
# source://faraday//lib/faraday.rb#16
module Faraday
  class << self
    # source://faraday//lib/faraday.rb#231
    def const_missing(name); end

    # Public: Gets or sets the Symbol key identifying a default Adapter to use
    # for the default Faraday::Connection.
    #
    # source://faraday//lib/faraday.rb#29
    def default_adapter; end

    # Public: Updates default adapter while resetting
    # #default_connection.
    #
    # Returns the new default_adapter.
    #
    # source://faraday//lib/faraday.rb#88
    def default_adapter=(adapter); end

    # Gets the default connection used for simple scripts.
    #
    # Returns a Faraday::Connection, configured with the #default_adapter.
    #
    # source://faraday//lib/faraday.rb#110
    def default_connection; end

    # Public: Sets the default Faraday::Connection for simple scripts that
    # access the Faraday constant directly.
    #
    #     Faraday.get "https://faraday.com"
    #
    # source://faraday//lib/faraday.rb#35
    def default_connection=(_arg0); end

    # Gets the default connection options used when calling Faraday#new.
    #
    # Returns a Faraday::ConnectionOptions.
    #
    # source://faraday//lib/faraday.rb#117
    def default_connection_options; end

    # Public: Sets the default options used when calling Faraday#new.
    #
    # source://faraday//lib/faraday.rb#38
    def default_connection_options=(_arg0); end

    # Public: Gets or sets the path that the Faraday libs are loaded from.
    #
    # source://faraday//lib/faraday.rb#25
    def lib_path; end

    # Public: Gets or sets the path that the Faraday libs are loaded from.
    #
    # source://faraday//lib/faraday.rb#25
    def lib_path=(_arg0); end

    # Public: Initializes a new Faraday::Connection.
    #
    # url     - The optional String base URL to use as a prefix for all
    #           requests.  Can also be the options Hash.
    # options - The optional Hash used to configure this Faraday::Connection.
    #           Any of these values will be set on every request made, unless
    #           overridden for a specific request.
    #           :url     - String base URL.
    #           :params  - Hash of URI query unencoded key/value pairs.
    #           :headers - Hash of unencoded HTTP header key/value pairs.
    #           :request - Hash of request options.
    #           :ssl     - Hash of SSL options.
    #           :proxy   - Hash of Proxy options.
    #
    # Examples
    #
    #   Faraday.new 'http://faraday.com'
    #
    #   # http://faraday.com?page=1
    #   Faraday.new 'http://faraday.com', :params => {:page => 1}
    #
    #   # same
    #
    #   Faraday.new :url => 'http://faraday.com',
    #     :params => {:page => 1}
    #
    # Returns a Faraday::Connection.
    #
    # source://faraday//lib/faraday.rb#67
    def new(url = T.unsafe(nil), options = T.unsafe(nil)); end

    # Internal: Requires internal Faraday libraries.
    #
    # *libs - One or more relative String names to Faraday classes.
    #
    # Returns nothing.
    #
    # source://faraday//lib/faraday.rb#78
    def require_lib(*libs); end

    # Internal: Requires internal Faraday libraries.
    #
    # *libs - One or more relative String names to Faraday classes.
    #
    # Returns nothing.
    #
    # source://faraday//lib/faraday.rb#78
    def require_libs(*libs); end

    # Public: Gets or sets the root path that Faraday is being loaded from.
    # This is the root from where the libraries are auto-loaded from.
    #
    # source://faraday//lib/faraday.rb#22
    def root_path; end

    # Public: Gets or sets the root path that Faraday is being loaded from.
    # This is the root from where the libraries are auto-loaded from.
    #
    # source://faraday//lib/faraday.rb#22
    def root_path=(_arg0); end

    private

    # Internal: Proxies method calls on the Faraday constant to
    # #default_connection.
    #
    # source://faraday//lib/faraday.rb#98
    def method_missing(name, *args, &block); end
  end
end

# Public: This is a base class for all Faraday adapters.  Adapters are
# responsible for fulfilling a Faraday request.
#
# source://faraday//lib/faraday/adapter.rb#4
class Faraday::Adapter < ::Faraday::Middleware
  extend ::Faraday::Adapter::Parallelism
  extend ::Faraday::AutoloadHelper

  # source://faraday//lib/faraday/adapter.rb#33
  def call(env); end

  # source://faraday//lib/faraday/adapter.rb#37
  def save_response(env, status, body, headers = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/adapter.rb#5
Faraday::Adapter::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# EventMachine adapter is useful for either asynchronous requests
# when in EM reactor loop or for making parallel requests in
# synchronous code.
#
# source://faraday//lib/faraday/adapter/em_http.rb#6
class Faraday::Adapter::EMHttp < ::Faraday::Adapter
  include ::Faraday::Adapter::EMHttp::Options

  # source://faraday//lib/faraday/adapter/em_http.rb#88
  def call(env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#151
  def error_message(client); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/em_http.rb#169
  def parallel?(env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#94
  def perform_request(env); end

  # TODO: reuse the connection to support pipelining
  #
  # source://faraday//lib/faraday/adapter/em_http.rb#140
  def perform_single_request(env); end

  # @raise [errklass]
  #
  # source://faraday//lib/faraday/adapter/em_http.rb#155
  def raise_error(msg); end

  class << self
    # source://faraday//lib/faraday/adapter/em_http.rb#84
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

# The parallel manager is designed to start an EventMachine loop
# and block until all registered requests have been completed.
#
# source://faraday//lib/faraday/adapter/em_http.rb#175
class Faraday::Adapter::EMHttp::Manager
  # @return [Manager] a new instance of Manager
  #
  # source://faraday//lib/faraday/adapter/em_http.rb#176
  def initialize; end

  # source://faraday//lib/faraday/adapter/em_http.rb#190
  def add; end

  # source://faraday//lib/faraday/adapter/em_http.rb#221
  def check_finished; end

  # source://faraday//lib/faraday/adapter/em_http.rb#215
  def perform_request; end

  # source://faraday//lib/faraday/adapter/em_http.rb#180
  def reset; end

  # source://faraday//lib/faraday/adapter/em_http.rb#199
  def run; end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/em_http.rb#188
  def running?; end
end

# source://faraday//lib/faraday/adapter/em_http.rb#7
module Faraday::Adapter::EMHttp::Options
  # source://faraday//lib/faraday/adapter/em_http.rb#67
  def configure_compression(options, env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#33
  def configure_proxy(options, env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#43
  def configure_socket(options, env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#52
  def configure_ssl(options, env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#61
  def configure_timeout(options, env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#8
  def connection_config(env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#28
  def read_body(env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#17
  def request_config(env); end

  # source://faraday//lib/faraday/adapter/em_http.rb#73
  def request_options(env); end
end

# source://faraday//lib/faraday/adapter/em_synchrony.rb#5
class Faraday::Adapter::EMSynchrony < ::Faraday::Adapter
  include ::Faraday::Adapter::EMHttp::Options

  # source://faraday//lib/faraday/adapter/em_synchrony.rb#20
  def call(env); end

  class << self
    # source://faraday//lib/faraday/adapter/em_synchrony.rb#16
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

# source://faraday//lib/faraday/adapter/em_synchrony/parallel_manager.rb#4
class Faraday::Adapter::EMSynchrony::ParallelManager
  # Add requests to queue. The `request` argument should be a
  # `EM::HttpRequest` object.
  #
  # source://faraday//lib/faraday/adapter/em_synchrony/parallel_manager.rb#8
  def add(request, method, *args, &block); end

  # Run all requests on queue with `EM::Synchrony::Multi`, wrapping
  # it in a reactor and fiber if needed.
  #
  # source://faraday//lib/faraday/adapter/em_synchrony/parallel_manager.rb#19
  def run; end

  private

  # Main `EM::Synchrony::Multi` performer.
  #
  # source://faraday//lib/faraday/adapter/em_synchrony/parallel_manager.rb#43
  def perform; end

  # The request queue.
  #
  # source://faraday//lib/faraday/adapter/em_synchrony/parallel_manager.rb#38
  def queue; end
end

# source://faraday//lib/faraday/adapter/excon.rb#3
class Faraday::Adapter::Excon < ::Faraday::Adapter
  # @return [Excon] a new instance of Excon
  #
  # source://faraday//lib/faraday/adapter/excon.rb#6
  def initialize(app, connection_options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/adapter/excon.rb#11
  def call(env); end

  # TODO: support streaming requests
  #
  # source://faraday//lib/faraday/adapter/excon.rb#76
  def read_body(env); end
end

# source://faraday//lib/faraday/adapter/httpclient.rb#3
class Faraday::Adapter::HTTPClient < ::Faraday::Adapter
  # source://faraday//lib/faraday/adapter/httpclient.rb#10
  def call(env); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#6
  def client; end

  # source://faraday//lib/faraday/adapter/httpclient.rb#66
  def configure_proxy(proxy); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#61
  def configure_socket(bind); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#73
  def configure_ssl(ssl); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#85
  def configure_timeouts(req); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#98
  def ssl_cert_store(ssl); end

  # source://faraday//lib/faraday/adapter/httpclient.rb#106
  def ssl_verify_mode(ssl); end
end

# source://faraday//lib/faraday/adapter/net_http.rb#11
class Faraday::Adapter::NetHttp < ::Faraday::Adapter
  # source://faraday//lib/faraday/adapter/net_http.rb#30
  def call(env); end

  # source://faraday//lib/faraday/adapter/net_http.rb#98
  def configure_ssl(http, ssl); end

  # source://faraday//lib/faraday/adapter/net_http.rb#61
  def create_request(env); end

  # source://faraday//lib/faraday/adapter/net_http.rb#90
  def net_http_connection(env); end

  # source://faraday//lib/faraday/adapter/net_http.rb#77
  def perform_request(http, env); end

  # source://faraday//lib/faraday/adapter/net_http.rb#111
  def ssl_cert_store(ssl); end

  # source://faraday//lib/faraday/adapter/net_http.rb#119
  def ssl_verify_mode(ssl); end

  # @yield [net_http_connection(env)]
  #
  # source://faraday//lib/faraday/adapter/net_http.rb#86
  def with_net_http_connection(env); end
end

# source://faraday//lib/faraday/adapter/net_http.rb#12
Faraday::Adapter::NetHttp::NET_HTTP_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://faraday//lib/faraday/adapter/net_http_persistent.rb#7
class Faraday::Adapter::NetHttpPersistent < ::Faraday::Adapter::NetHttp
  # source://faraday//lib/faraday/adapter/net_http_persistent.rb#38
  def configure_ssl(http, ssl); end

  # source://faraday//lib/faraday/adapter/net_http_persistent.rb#24
  def perform_request(http, env); end

  # @yield [Net::HTTP::Persistent.new 'Faraday', proxy_uri]
  #
  # source://faraday//lib/faraday/adapter/net_http_persistent.rb#10
  def with_net_http_connection(env); end
end

# Public: This module marks an Adapter as supporting parallel requests.
#
# source://faraday//lib/faraday/adapter.rb#20
module Faraday::Adapter::Parallelism
  # source://faraday//lib/faraday/adapter.rb#24
  def inherited(subclass); end

  # Sets the attribute supports_parallel
  #
  # @param value the value to set the attribute supports_parallel to.
  #
  # source://faraday//lib/faraday/adapter.rb#21
  def supports_parallel=(_arg0); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter.rb#22
  def supports_parallel?; end
end

# source://faraday//lib/faraday/adapter/patron.rb#3
class Faraday::Adapter::Patron < ::Faraday::Adapter
  # @return [Patron] a new instance of Patron
  #
  # source://faraday//lib/faraday/adapter/patron.rb#6
  def initialize(app, &block); end

  # source://faraday//lib/faraday/adapter/patron.rb#11
  def call(env); end

  # source://faraday//lib/faraday/adapter/patron.rb#70
  def create_session; end
end

# Sends requests to a Rack app.
#
# Examples
#
#   class MyRackApp
#     def call(env)
#       [200, {'Content-Type' => 'text/html'}, ["hello world"]]
#     end
#   end
#
#   Faraday.new do |conn|
#     conn.adapter :rack, MyRackApp.new
#   end
#
# source://faraday//lib/faraday/adapter/rack.rb#16
class Faraday::Adapter::Rack < ::Faraday::Adapter
  # @return [Rack] a new instance of Rack
  #
  # source://faraday//lib/faraday/adapter/rack.rb#22
  def initialize(faraday_app, rack_app); end

  # source://faraday//lib/faraday/adapter/rack.rb#28
  def call(env); end

  # source://faraday//lib/faraday/adapter/rack.rb#53
  def execute_request(env, rack_env); end
end

# not prefixed with "HTTP_"
#
# source://faraday//lib/faraday/adapter/rack.rb#20
Faraday::Adapter::Rack::SPECIAL_HEADERS = T.let(T.unsafe(nil), Array)

# test = Faraday::Connection.new do
#   use Faraday::Adapter::Test do |stub|
#     stub.get '/nigiri/sake.json' do
#       [200, {}, 'hi world']
#     end
#   end
# end
#
# resp = test.get '/nigiri/sake.json'
# resp.body # => 'hi world'
#
# source://faraday//lib/faraday/adapter/test.rb#14
class Faraday::Adapter::Test < ::Faraday::Adapter
  # @return [Test] a new instance of Test
  #
  # source://faraday//lib/faraday/adapter/test.rb#134
  def initialize(app, stubs = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#144
  def call(env); end

  # @yield [stubs]
  #
  # source://faraday//lib/faraday/adapter/test.rb#140
  def configure; end

  # Returns the value of attribute stubs.
  #
  # source://faraday//lib/faraday/adapter/test.rb#15
  def stubs; end

  # Sets the attribute stubs
  #
  # @param value the value to set the attribute stubs to.
  #
  # source://faraday//lib/faraday/adapter/test.rb#15
  def stubs=(_arg0); end
end

# source://faraday//lib/faraday/adapter/test.rb#97
class Faraday::Adapter::Test::Stub < ::Struct
  # @return [Stub] a new instance of Stub
  #
  # source://faraday//lib/faraday/adapter/test.rb#98
  def initialize(full, headers, body, block); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/test.rb#123
  def headers_match?(request_headers); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/test.rb#106
  def matches?(request_uri, request_headers, request_body); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/test.rb#117
  def params_match?(request_params); end

  # source://faraday//lib/faraday/adapter/test.rb#129
  def to_s; end
end

# source://faraday//lib/faraday/adapter/test.rb#17
class Faraday::Adapter::Test::Stubs
  # @return [Stubs] a new instance of Stubs
  # @yield [_self]
  # @yieldparam _self [Faraday::Adapter::Test::Stubs] the object that the method was called on
  #
  # source://faraday//lib/faraday/adapter/test.rb#21
  def initialize; end

  # source://faraday//lib/faraday/adapter/test.rb#64
  def delete(path, headers = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/test.rb#27
  def empty?; end

  # source://faraday//lib/faraday/adapter/test.rb#44
  def get(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#48
  def head(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#31
  def match(request_method, path, headers, body); end

  # source://faraday//lib/faraday/adapter/test.rb#68
  def options(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#60
  def patch(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#52
  def post(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#56
  def put(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # Raises an error if any of the stubbed calls have not been made.
  #
  # source://faraday//lib/faraday/adapter/test.rb#73
  def verify_stubbed_calls; end

  protected

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/test.rb#92
  def matches?(stack, path, headers, body); end

  # source://faraday//lib/faraday/adapter/test.rb#87
  def new_stub(request_method, path, headers = T.unsafe(nil), body = T.unsafe(nil), &block); end
end

# source://faraday//lib/faraday/adapter/test.rb#18
class Faraday::Adapter::Test::Stubs::NotFound < ::StandardError; end

# source://faraday//lib/faraday/adapter/typhoeus.rb#3
class Faraday::Adapter::Typhoeus < ::Faraday::Adapter
  # source://faraday//lib/faraday/adapter/typhoeus.rb#12
  def call(env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#90
  def configure_proxy(req, env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#108
  def configure_socket(req, env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#80
  def configure_ssl(req, env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#102
  def configure_timeout(req, env); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/adapter/typhoeus.rb#118
  def parallel?(env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#18
  def perform_request(env); end

  # TODO: support streaming requests
  #
  # source://faraday//lib/faraday/adapter/typhoeus.rb#29
  def read_body(env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#33
  def request(env); end

  # source://faraday//lib/faraday/adapter/typhoeus.rb#114
  def request_options(env); end

  class << self
    # source://faraday//lib/faraday/adapter/typhoeus.rb#6
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

# Internal: Adds the ability for other modules to manage autoloadable
# constants.
#
# source://faraday//lib/faraday/autoload.rb#4
module Faraday::AutoloadHelper
  # Internal: Filters the module's contents with those that have been already
  # autoloaded.
  #
  # Returns an Array of Class/Module objects.
  #
  # source://faraday//lib/faraday/autoload.rb#45
  def all_loaded_constants; end

  # Internal: Registers the constants to be auto loaded.
  #
  # prefix  - The String require prefix.  If the path is inside Faraday, then
  #           it will be prefixed with the root path of this loaded Faraday
  #           version.
  # options - Hash of Symbol => String library names.
  #
  # Examples.
  #
  #   Faraday.autoload_all 'faraday/foo',
  #     :Bar => 'bar'
  #
  #   # requires faraday/foo/bar to load Faraday::Bar.
  #   Faraday::Bar
  #
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday/autoload.rb#22
  def autoload_all(prefix, options); end

  # Internal: Loads each autoloaded constant.  If thread safety is a concern,
  # wrap this in a Mutex.
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday/autoload.rb#35
  def load_autoloaded_constants; end
end

# source://faraday//lib/faraday/error.rb#5
class Faraday::ClientError < ::Faraday::Error
  # @return [ClientError] a new instance of ClientError
  #
  # source://faraday//lib/faraday/error.rb#8
  def initialize(ex, response = T.unsafe(nil)); end

  # source://faraday//lib/faraday/error.rb#23
  def backtrace; end

  # source://faraday//lib/faraday/error.rb#31
  def inspect; end

  # Returns the value of attribute response.
  #
  # source://faraday//lib/faraday/error.rb#6
  def response; end
end

# Similar but not compatible with ::CompositeReadIO provided by multipart-post.
#
# source://faraday//lib/faraday/upload_io.rb#12
class Faraday::CompositeReadIO
  # @return [CompositeReadIO] a new instance of CompositeReadIO
  #
  # source://faraday//lib/faraday/upload_io.rb#13
  def initialize(*parts); end

  # source://faraday//lib/faraday/upload_io.rb#46
  def close; end

  # source://faraday//lib/faraday/upload_io.rb#50
  def ensure_open_and_readable; end

  # source://faraday//lib/faraday/upload_io.rb#19
  def length; end

  # Read from IOs in order until `length` bytes have been received.
  #
  # source://faraday//lib/faraday/upload_io.rb#29
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  # source://faraday//lib/faraday/upload_io.rb#23
  def rewind; end

  private

  # source://faraday//lib/faraday/upload_io.rb#60
  def advance_io; end

  # source://faraday//lib/faraday/upload_io.rb#56
  def current_io; end
end

# Public: Connection objects manage the default properties and the middleware
# stack for fulfilling an HTTP request.
#
# Examples
#
#   conn = Faraday::Connection.new 'http://sushi.com'
#
#   # GET http://sushi.com/nigiri
#   conn.get 'nigiri'
#   # => #<Faraday::Response>
#
# source://faraday//lib/faraday/connection.rb#13
class Faraday::Connection
  extend ::Forwardable

  # Public: Initializes a new Faraday::Connection.
  #
  # url     - URI or String base URL to use as a prefix for all
  #           requests (optional).
  # options - Hash or Faraday::ConnectionOptions.
  #           :url     - URI or String base URL (default: "http:/").
  #           :params  - Hash of URI query unencoded key/value pairs.
  #           :headers - Hash of unencoded HTTP header key/value pairs.
  #           :request - Hash of request options.
  #           :ssl     - Hash of SSL options.
  #           :proxy   - URI, String or Hash of HTTP proxy options
  #                     (default: "http_proxy" environment variable).
  #                     :uri      - URI or String
  #                     :user     - String (optional)
  #                     :password - String (optional)
  #
  # @return [Connection] a new instance of Connection
  # @yield [_self]
  # @yieldparam _self [Faraday::Connection] the object that the method was called on
  #
  # source://faraday//lib/faraday/connection.rb#57
  def initialize(url = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def adapter(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def app(*args, &block); end

  # Public: Sets up a custom Authorization header.
  #
  # type  - The String authorization type.
  # token - The String or Hash token.  A String value is taken literally, and
  #         a Hash is encoded into comma separated key/value pairs.
  #
  # Examples
  #
  #   conn.authorization :Bearer, 'mF_9.B5f-4.1JqM'
  #   conn.headers['Authorization']
  #   # => "Bearer mF_9.B5f-4.1JqM"
  #
  #   conn.authorization :Token, :token => 'abcdef', :foo => 'bar'
  #   conn.headers['Authorization']
  #   # => "Token token=\"abcdef\",
  #               foo=\"bar\""
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday/connection.rb#234
  def authorization(type, token); end

  # Public: Sets up the Authorization header with these credentials, encoded
  # with base64.
  #
  # login - The authentication login.
  # pass  - The authentication password.
  #
  # Examples
  #
  #   conn.basic_auth 'Aladdin', 'open sesame'
  #   conn.headers['Authorization']
  #   # => "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday/connection.rb#195
  def basic_auth(login, pass); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def build(*args, &block); end

  # Internal: Build an absolute URL based on url_prefix.
  #
  # url    - A String or URI-like object
  # params - A Faraday::Utils::ParamsHash to replace the query values
  #          of the resulting url (default: nil).
  #
  # Returns the resulting URI instance.
  #
  # source://faraday//lib/faraday/connection.rb#399
  def build_exclusive_url(url = T.unsafe(nil), params = T.unsafe(nil), params_encoder = T.unsafe(nil)); end

  # Creates and configures the request object.
  #
  # Returns the new Request.
  #
  # source://faraday//lib/faraday/connection.rb#383
  def build_request(method); end

  # Public: Takes a relative url for a request and combines it with the defaults
  # set on the connection instance.
  #
  #   conn = Faraday::Connection.new { ... }
  #   conn.url_prefix = "https://sushi.com/api?token=abc"
  #   conn.scheme      # => https
  #   conn.path_prefix # => "/api"
  #
  #   conn.build_url("nigiri?page=2")      # => https://sushi.com/api/nigiri?token=abc&page=2
  #   conn.build_url("nigiri", :page => 2) # => https://sushi.com/api/nigiri?token=abc&page=2
  #
  # source://faraday//lib/faraday/connection.rb#347
  def build_url(url = T.unsafe(nil), extra_params = T.unsafe(nil)); end

  # Public: Returns the Faraday::Builder for this Connection.
  #
  # source://faraday//lib/faraday/connection.rb#28
  def builder; end

  # Internal: Traverse the middleware stack in search of a
  # parallel-capable adapter.
  #
  # Yields in case of not found.
  #
  # Returns a parallel manager or nil if not found.
  #
  # source://faraday//lib/faraday/connection.rb#244
  def default_parallel_manager; end

  # Public: Sets the default parallel manager for this connection.
  #
  # source://faraday//lib/faraday/connection.rb#40
  def default_parallel_manager=(_arg0); end

  # source://faraday//lib/faraday/connection.rb#139
  def delete(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Internal: Creates a duplicate of this Faraday::Connection.
  #
  # Returns a Faraday::Connection.
  #
  # source://faraday//lib/faraday/connection.rb#415
  def dup; end

  # source://faraday//lib/faraday/connection.rb#139
  def get(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#139
  def head(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Public: Returns a Hash of unencoded HTTP header key/value pairs.
  #
  # source://faraday//lib/faraday/connection.rb#21
  def headers; end

  # Public: Sets the Hash of unencoded HTTP header key/value pairs.
  #
  # source://faraday//lib/faraday/connection.rb#102
  def headers=(hash); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def host(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def host=(*args, &block); end

  # Public: Sets up the parallel manager to make a set of requests.
  #
  # manager - The parallel manager that this Connection's Adapter uses.
  #
  # Yields a block to execute multiple requests.
  # Returns nothing.
  #
  # source://faraday//lib/faraday/connection.rb#271
  def in_parallel(manager = T.unsafe(nil)); end

  # Public: Determine if this Faraday::Connection can make parallel requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/connection.rb#261
  def in_parallel?; end

  # Public: Returns a Hash of the request options.
  #
  # source://faraday//lib/faraday/connection.rb#31
  def options; end

  # Public: Returns the parallel manager for this Connection.
  #
  # source://faraday//lib/faraday/connection.rb#37
  def parallel_manager; end

  # Public: Returns a Hash of URI query unencoded key/value pairs.
  #
  # source://faraday//lib/faraday/connection.rb#18
  def params; end

  # Public: Sets the Hash of URI query unencoded key/value pairs.
  #
  # source://faraday//lib/faraday/connection.rb#97
  def params=(hash); end

  # source://faraday//lib/faraday/connection.rb#176
  def patch(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def path_prefix(*args, &block); end

  # Public: Sets the path prefix and ensures that it always has a leading
  # slash.
  #
  # value - A String.
  #
  # Returns the new String path prefix.
  #
  # source://faraday//lib/faraday/connection.rb#329
  def path_prefix=(value); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def port(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def port=(*args, &block); end

  # source://faraday//lib/faraday/connection.rb#176
  def post(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # Public: Gets or Sets the Hash proxy options.
  #
  # source://faraday//lib/faraday/connection.rb#284
  def proxy(arg = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#176
  def put(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def request(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def response(*args, &block); end

  # Builds and runs the Faraday::Request.
  #
  # method  - The Symbol HTTP method.
  # url     - The String or URI to access.
  # body    - The String body
  # headers - Hash of unencoded HTTP header key/value pairs.
  #
  # Returns a Faraday::Response.
  #
  # source://faraday//lib/faraday/connection.rb#365
  def run_request(method, url, body, headers); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def scheme(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def scheme=(*args, &block); end

  # source://faraday//lib/faraday/connection.rb#431
  def set_authorization_header(header_type, *args); end

  # Public: Returns a Hash of the SSL options.
  #
  # source://faraday//lib/faraday/connection.rb#34
  def ssl; end

  # Public: Sets up the Authorization header with the given token.
  #
  # token   - The String token.
  # options - Optional Hash of extra token options.
  #
  # Examples
  #
  #   conn.token_auth 'abcdef', :foo => 'bar'
  #   conn.headers['Authorization']
  #   # => "Token token=\"abcdef\",
  #               foo=\"bar\""
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday/connection.rb#212
  def token_auth(token, options = T.unsafe(nil)); end

  # Public: Returns a URI with the prefix used for all requests from this
  # Connection.  This includes a default host name, scheme, port, and path.
  #
  # source://faraday//lib/faraday/connection.rb#25
  def url_prefix; end

  # Public: Parses the giving url with URI and stores the individual
  # components in this connection.  These components serve as defaults for
  # requests made by this connection.
  #
  # url - A String or URI.
  #
  # Examples
  #
  #   conn = Faraday::Connection.new { ... }
  #   conn.url_prefix = "https://sushi.com/api"
  #   conn.scheme      # => https
  #   conn.path_prefix # => "/api"
  #
  #   conn.get("nigiri?page=2") # accesses https://sushi.com/api/nigiri
  #
  # Returns the parsed URI from teh given input..
  #
  # source://faraday//lib/faraday/connection.rb#308
  def url_prefix=(url, encoder = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def use(*args, &block); end

  # Internal: Yields username and password extracted from a URI if they both exist.
  #
  # source://faraday//lib/faraday/connection.rb#425
  def with_uri_credentials(uri); end
end

# A Set of allowed HTTP verbs.
#
# source://faraday//lib/faraday/connection.rb#15
Faraday::Connection::METHODS = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/error.rb#36
class Faraday::ConnectionFailed < ::Faraday::ClientError; end

# source://faraday//lib/faraday/options.rb#239
class Faraday::ConnectionOptions < ::Faraday::Options
  # source://faraday//lib/faraday/options.rb#155
  def builder_class; end

  # source://faraday//lib/faraday/options.rb#249
  def new_builder(block); end

  # source://faraday//lib/faraday/options.rb#155
  def request; end

  # source://faraday//lib/faraday/options.rb#155
  def ssl; end
end

# source://faraday//lib/faraday/options.rb#255
class Faraday::Env < ::Faraday::Options
  extend ::Forwardable

  # Public
  #
  # source://faraday//lib/faraday/options.rb#282
  def [](key); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#291
  def []=(key, value); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#310
  def clear_body; end

  # Internal
  #
  # source://faraday//lib/faraday/options.rb#339
  def custom_members; end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#345
  def in_member_set?(key); end

  # source://faraday//lib/faraday/options.rb#325
  def inspect; end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#305
  def needs_body?; end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#321
  def parallel?; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def params_encoder(*args, &block); end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#316
  def parse_body?; end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#300
  def success?; end

  class << self
    # Public
    #
    # source://faraday//lib/faraday/options.rb#273
    def from(value); end

    # Internal
    #
    # source://faraday//lib/faraday/options.rb#355
    def member_set; end
  end
end

# source://faraday//lib/faraday/options.rb#257
Faraday::Env::ContentLength = T.let(T.unsafe(nil), String)

# A Set of HTTP verbs that typically send a body.  If no body is set for
# these requests, the Content-Length header is set to 0.
#
# source://faraday//lib/faraday/options.rb#263
Faraday::Env::MethodsWithBodies = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/options.rb#258
Faraday::Env::StatusesWithoutBody = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/options.rb#259
Faraday::Env::SuccessfulStatuses = T.let(T.unsafe(nil), Range)

# source://faraday//lib/faraday/error.rb#2
class Faraday::Error < ::StandardError; end

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::ClientError = Faraday::ClientError

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::ConnectionFailed = Faraday::ConnectionFailed

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::MissingDependency = Faraday::MissingDependency

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::ParsingError = Faraday::ParsingError

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::ResourceNotFound = Faraday::ResourceNotFound

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::SSLError = Faraday::SSLError

# source://faraday//lib/faraday/error.rb#51
Faraday::Error::TimeoutError = Faraday::TimeoutError

# source://faraday//lib/faraday/parameters.rb#130
module Faraday::FlatParamsEncoder
  class << self
    # source://faraday//lib/faraday/parameters.rb#174
    def decode(query); end

    # source://faraday//lib/faraday/parameters.rb#136
    def encode(params); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def escape(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def unescape(*args, &block); end
  end
end

# source://faraday//lib/faraday/middleware.rb#2
class Faraday::Middleware
  extend ::Faraday::MiddlewareRegistry

  # @return [Middleware] a new instance of Middleware
  #
  # source://faraday//lib/faraday/middleware.rb#33
  def initialize(app = T.unsafe(nil)); end

  class << self
    # Executes a block which should try to require and reference dependent libraries
    #
    # source://faraday//lib/faraday/middleware.rb#13
    def dependency(lib = T.unsafe(nil)); end

    # @private
    #
    # source://faraday//lib/faraday/middleware.rb#28
    def inherited(subclass); end

    # Returns the value of attribute load_error.
    #
    # source://faraday//lib/faraday/middleware.rb#6
    def load_error; end

    # @return [Boolean]
    #
    # source://faraday//lib/faraday/middleware.rb#24
    def loaded?; end

    # source://faraday//lib/faraday/middleware.rb#19
    def new(*_arg0); end

    private

    # Sets the attribute load_error
    #
    # @param value the value to set the attribute load_error to.
    #
    # source://faraday//lib/faraday/middleware.rb#6
    def load_error=(_arg0); end
  end
end

# Public: Adds the ability for other modules to register and lookup
# middleware classes.
#
# source://faraday//lib/faraday.rb#137
module Faraday::MiddlewareRegistry
  # source://faraday//lib/faraday.rb#200
  def fetch_middleware(key); end

  # source://faraday//lib/faraday.rb#204
  def load_middleware(key); end

  # Public: Lookup middleware class with a registered Symbol shortcut.
  #
  # key - The Symbol key for the registered middleware.
  #
  # Examples
  #
  #   module Faraday
  #     class Whatever
  #       register_middleware :foo => Foo
  #     end
  #   end
  #
  #   Faraday::Whatever.lookup_middleware(:foo)
  #   # => Faraday::Whatever::Foo
  #
  # Returns a middleware Class.
  #
  # source://faraday//lib/faraday.rb#187
  def lookup_middleware(key); end

  # source://faraday//lib/faraday.rb#192
  def middleware_mutex(&block); end

  # Public: Register middleware class(es) on the current module.
  #
  # mapping - A Hash mapping Symbol keys to classes. Classes can be expressed
  #           as fully qualified constant, or a Proc that will be lazily
  #           called to return the former.
  #
  # Examples
  #
  #   module Faraday
  #     class Whatever
  #       # Middleware looked up by :foo returns Faraday::Whatever::Foo.
  #       register_middleware :foo => Foo
  #
  #       # Middleware looked up by :bar returns Faraday::Whatever.const_get(:Bar)
  #       register_middleware :bar => :Bar
  #
  #       # Middleware looked up by :baz requires 'baz' and returns Faraday::Whatever.const_get(:Baz)
  #       register_middleware :baz => [:Baz, 'baz']
  #     end
  #   end
  #
  # Returns nothing.
  #
  # source://faraday//lib/faraday.rb#160
  def register_middleware(autoload_path = T.unsafe(nil), mapping = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/error.rb#3
class Faraday::MissingDependency < ::Faraday::Error; end

# source://faraday//lib/faraday/parameters.rb#4
module Faraday::NestedParamsEncoder
  class << self
    # source://faraday//lib/faraday/parameters.rb#66
    def decode(query); end

    # Internal: convert a nested hash with purely numeric keys into an array.
    # FIXME: this is not compatible with Rack::Utils.parse_nested_query
    #
    # source://faraday//lib/faraday/parameters.rb#117
    def dehash(hash, depth); end

    # source://faraday//lib/faraday/parameters.rb#10
    def encode(params); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def escape(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def unescape(*args, &block); end
  end
end

# Subclasses Struct with some special helpers for converting from a Hash to
# a Struct.
#
# source://faraday//lib/faraday/options.rb#5
class Faraday::Options < ::Struct
  # source://faraday//lib/faraday/options.rb#163
  def [](key); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#46
  def clear; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#39
  def delete(key); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#11
  def each; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#86
  def each_key; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#101
  def each_value; end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#81
  def empty?; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#56
  def fetch(key, *args); end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#94
  def has_key?(key); end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#109
  def has_value?(value); end

  # Internal
  #
  # source://faraday//lib/faraday/options.rb#126
  def inspect; end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#94
  def key?(key); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#76
  def keys; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#51
  def merge(value); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#19
  def merge!(obj); end

  # source://faraday//lib/faraday/options.rb#172
  def symbolized_key_set; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#116
  def to_hash; end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#19
  def update(obj); end

  # Public
  #
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#109
  def value?(value); end

  # Public
  #
  # source://faraday//lib/faraday/options.rb#71
  def values_at(*keys); end

  class << self
    # Internal
    #
    # source://faraday//lib/faraday/options.rb#148
    def attribute_options; end

    # source://faraday//lib/faraday/options.rb#182
    def fetch_error_class; end

    # Public
    #
    # source://faraday//lib/faraday/options.rb#6
    def from(value); end

    # @private
    #
    # source://faraday//lib/faraday/options.rb#176
    def inherited(subclass); end

    # source://faraday//lib/faraday/options.rb#152
    def memoized(key); end

    # source://faraday//lib/faraday/options.rb#159
    def memoized_attributes; end

    # Internal
    #
    # source://faraday//lib/faraday/options.rb#138
    def options(mapping); end

    # Internal
    #
    # source://faraday//lib/faraday/options.rb#143
    def options_for(key); end
  end
end

# source://faraday//lib/faraday/error.rb#38
class Faraday::ParsingError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/upload_io.rb#66
Faraday::Parts = Multipart::Post::Parts

# source://faraday//lib/faraday/options.rb#216
class Faraday::ProxyOptions < ::Faraday::Options
  extend ::Forwardable

  # source://forwardable/1.3.1/forwardable.rb#226
  def host(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def host=(*args, &block); end

  # source://faraday//lib/faraday/options.rb#155
  def password; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def path(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def path=(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def port(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def port=(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def scheme(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def scheme=(*args, &block); end

  # source://faraday//lib/faraday/options.rb#155
  def user; end

  class << self
    # source://faraday//lib/faraday/options.rb#220
    def from(value); end
  end
end

# A Builder that processes requests into responses by passing through an inner
# middleware stack (heavily inspired by Rack).
#
#   Faraday::Connection.new(:url => 'http://sushi.com') do |builder|
#     builder.request  :url_encoded  # Faraday::Request::UrlEncoded
#     builder.adapter  :net_http     # Faraday::Adapter::NetHttp
#   end
#
# source://faraday//lib/faraday/rack_builder.rb#9
class Faraday::RackBuilder
  # @return [RackBuilder] a new instance of RackBuilder
  #
  # source://faraday//lib/faraday/rack_builder.rb#52
  def initialize(handlers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/rack_builder.rb#166
  def ==(other); end

  # source://faraday//lib/faraday/rack_builder.rb#69
  def [](idx); end

  # source://faraday//lib/faraday/rack_builder.rb#99
  def adapter(key, *args, &block); end

  # The "rack app" wrapped in middleware. All requests are sent here.
  #
  # The builder is responsible for creating the app object. After this,
  # the builder gets locked to ensure no further modifications are made
  # to the middleware stack.
  #
  # Returns an object that responds to `call` and returns a Response.
  #
  # source://faraday//lib/faraday/rack_builder.rb#149
  def app; end

  # @yield [_self]
  # @yieldparam _self [Faraday::RackBuilder] the object that the method was called on
  #
  # source://faraday//lib/faraday/rack_builder.rb#63
  def build(options = T.unsafe(nil)); end

  # ENV Keys
  # :method - a symbolized request method (:get, :post)
  # :body   - the request body that will eventually be converted to a string.
  # :url    - URI instance for the current request.
  # :status           - HTTP response status code
  # :request_headers  - hash of HTTP Headers to be sent to the server
  # :response_headers - Hash of HTTP headers from the server
  # :parallel_manager - sent if the connection is in parallel mode
  # :request - Hash of options for configuring the request.
  #   :timeout      - open/read timeout Integer in seconds
  #   :open_timeout - read timeout Integer in seconds
  #   :proxy        - Hash of proxy options
  #     :uri        - Proxy Server URI
  #     :user       - Proxy server username
  #     :password   - Proxy server password
  # :ssl - Hash of options for configuring SSL requests.
  #
  # source://faraday//lib/faraday/rack_builder.rb#190
  def build_env(connection, request); end

  # Processes a Request into a Response by passing it through this Builder's
  # middleware stack.
  #
  # connection - Faraday::Connection
  # request    - Faraday::Request
  #
  # Returns a Faraday::Response.
  #
  # source://faraday//lib/faraday/rack_builder.rb#138
  def build_response(connection, request); end

  # source://faraday//lib/faraday/rack_builder.rb#126
  def delete(handler); end

  # source://faraday//lib/faraday/rack_builder.rb#170
  def dup; end

  # Returns the value of attribute handlers.
  #
  # source://faraday//lib/faraday/rack_builder.rb#10
  def handlers; end

  # Sets the attribute handlers
  #
  # @param value the value to set the attribute handlers to.
  #
  # source://faraday//lib/faraday/rack_builder.rb#10
  def handlers=(_arg0); end

  # methods to push onto the various positions in the stack:
  #
  # source://faraday//lib/faraday/rack_builder.rb#105
  def insert(index, *args, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#114
  def insert_after(index, *args, &block); end

  # methods to push onto the various positions in the stack:
  #
  # source://faraday//lib/faraday/rack_builder.rb#105
  def insert_before(index, *args, &block); end

  # Locks the middleware stack to ensure no further modifications are possible.
  #
  # source://faraday//lib/faraday/rack_builder.rb#74
  def lock!; end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/rack_builder.rb#78
  def locked?; end

  # source://faraday//lib/faraday/rack_builder.rb#91
  def request(key, *args, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#95
  def response(key, *args, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#119
  def swap(index, *args, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#161
  def to_app(inner_app); end

  # source://faraday//lib/faraday/rack_builder.rb#82
  def use(klass, *args, &block); end

  private

  # source://faraday//lib/faraday/rack_builder.rb#207
  def assert_index(index); end

  # @raise [StackLocked]
  #
  # source://faraday//lib/faraday/rack_builder.rb#199
  def raise_if_locked; end

  # source://faraday//lib/faraday/rack_builder.rb#203
  def use_symbol(mod, key, *args, &block); end
end

# borrowed from ActiveSupport::Dependencies::Reference &
# ActionDispatch::MiddlewareStack::Middleware
#
# source://faraday//lib/faraday/rack_builder.rb#17
class Faraday::RackBuilder::Handler
  # @return [Handler] a new instance of Handler
  #
  # source://faraday//lib/faraday/rack_builder.rb#26
  def initialize(klass, *args, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#37
  def ==(other); end

  # source://faraday//lib/faraday/rack_builder.rb#47
  def build(app); end

  # source://faraday//lib/faraday/rack_builder.rb#35
  def inspect; end

  # source://faraday//lib/faraday/rack_builder.rb#34
  def klass; end

  # Returns the value of attribute name.
  #
  # source://faraday//lib/faraday/rack_builder.rb#24
  def name; end
end

# Error raised when trying to modify the stack after calling `lock!`
#
# source://faraday//lib/faraday/rack_builder.rb#13
class Faraday::RackBuilder::StackLocked < ::RuntimeError; end

# Used to setup urls, params, headers, and the request body in a sane manner.
#
#   @connection.post do |req|
#     req.url 'http://localhost', 'a' => '1' # 'http://localhost?a=1'
#     req.headers['b'] = '2' # Header
#     req.params['c']  = '3' # GET Param
#     req['b']         = '2' # also Header
#     req.body = 'abc'
#   end
#
# source://faraday//lib/faraday/request.rb#12
class Faraday::Request < ::Struct
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::AutoloadHelper

  # source://faraday//lib/faraday/request.rb#62
  def [](key); end

  # source://faraday//lib/faraday/request.rb#66
  def []=(key, value); end

  # Public: Replace request headers, preserving the existing hash type
  #
  # source://faraday//lib/faraday/request.rb#40
  def headers=(hash); end

  # Public: Replace params, preserving the existing hash type
  #
  # source://faraday//lib/faraday/request.rb#31
  def params=(hash); end

  # ENV Keys
  # :method - a symbolized request method (:get, :post)
  # :body   - the request body that will eventually be converted to a string.
  # :url    - URI instance for the current request.
  # :status           - HTTP response status code
  # :request_headers  - hash of HTTP Headers to be sent to the server
  # :response_headers - Hash of HTTP headers from the server
  # :parallel_manager - sent if the connection is in parallel mode
  # :request - Hash of options for configuring the request.
  #   :timeout      - open/read timeout Integer in seconds
  #   :open_timeout - read timeout Integer in seconds
  #   :proxy        - Hash of proxy options
  #     :uri        - Proxy Server URI
  #     :user       - Proxy server username
  #     :password   - Proxy server password
  # :ssl - Hash of options for configuring SSL requests.
  #
  # source://faraday//lib/faraday/request.rb#86
  def to_env(connection); end

  # source://faraday//lib/faraday/request.rb#48
  def url(path, params = T.unsafe(nil)); end

  class << self
    # source://faraday//lib/faraday/request.rb#24
    def create(request_method); end
  end
end

# source://faraday//lib/faraday/request/authorization.rb#2
class Faraday::Request::Authorization < ::Faraday::Middleware
  # @return [Authorization] a new instance of Authorization
  #
  # source://faraday//lib/faraday/request/authorization.rb#28
  def initialize(app, type, token); end

  # Public
  #
  # source://faraday//lib/faraday/request/authorization.rb#34
  def call(env); end

  class << self
    # Internal
    #
    # source://faraday//lib/faraday/request/authorization.rb#18
    def build_hash(type, hash); end

    # Public
    #
    # source://faraday//lib/faraday/request/authorization.rb#6
    def header(type, token); end
  end
end

# source://faraday//lib/faraday/request/authorization.rb#3
Faraday::Request::Authorization::KEY = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/request/basic_authentication.rb#5
class Faraday::Request::BasicAuthentication < ::Faraday::Request::Authorization
  class << self
    # Public
    #
    # source://faraday//lib/faraday/request/basic_authentication.rb#6
    def header(login, pass); end
  end
end

# source://faraday//lib/faraday/request/instrumentation.rb#2
class Faraday::Request::Instrumentation < ::Faraday::Middleware
  # Public: Instruments requests using Active Support.
  #
  # Measures time spent only for synchronous requests.
  #
  # Examples
  #
  #   ActiveSupport::Notifications.subscribe('request.faraday') do |name, starts, ends, _, env|
  #     url = env[:url]
  #     http_method = env[:method].to_s.upcase
  #     duration = ends - starts
  #     $stderr.puts '[%s] %s %s (%.3f s)' % [url.host, http_method, url.request_uri, duration]
  #   end
  #
  # @return [Instrumentation] a new instance of Instrumentation
  #
  # source://faraday//lib/faraday/request/instrumentation.rb#25
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/request/instrumentation.rb#30
  def call(env); end
end

# source://faraday//lib/faraday/request/instrumentation.rb#3
class Faraday::Request::Instrumentation::Options < ::Faraday::Options
  # source://faraday//lib/faraday/request/instrumentation.rb#8
  def instrumenter; end

  # source://faraday//lib/faraday/request/instrumentation.rb#4
  def name; end
end

# source://faraday//lib/faraday/request/multipart.rb#4
class Faraday::Request::Multipart < ::Faraday::Request::UrlEncoded
  # source://faraday//lib/faraday/request/multipart.rb#8
  def call(env); end

  # source://faraday//lib/faraday/request/multipart.rb#35
  def create_multipart(env, params); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/request/multipart.rb#25
  def has_multipart?(obj); end

  # source://faraday//lib/faraday/request/multipart.rb#47
  def process_params(params, prefix = T.unsafe(nil), pieces = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/request/multipart.rb#17
  def process_request?(env); end
end

# source://faraday//lib/faraday/request/multipart.rb#6
Faraday::Request::Multipart::DEFAULT_BOUNDARY = T.let(T.unsafe(nil), String)

# Catches exceptions and retries each request a limited number of times.
#
# By default, it retries 2 times and handles only timeout exceptions. It can
# be configured with an arbitrary number of retries, a list of exceptions to
# handle, a retry interval, a percentage of randomness to add to the retry
# interval, and a backoff factor.
#
# Examples
#
#   Faraday.new do |conn|
#     conn.request :retry, max: 2, interval: 0.05,
#                          interval_randomness: 0.5, backoff_factor: 2
#                          exceptions: [CustomException, 'Timeout::Error']
#     conn.adapter ...
#   end
#
# This example will result in a first interval that is random between 0.05 and 0.075 and a second
# interval that is random between 0.1 and 0.15
#
# source://faraday//lib/faraday/request/retry.rb#21
class Faraday::Request::Retry < ::Faraday::Middleware
  # Public: Initialize middleware
  #
  # Options:
  # max                 - Maximum number of retries (default: 2)
  # interval            - Pause in seconds between retries (default: 0)
  # interval_randomness - The maximum random interval amount expressed
  #                       as a float between 0 and 1 to use in addition to the
  #                       interval. (default: 0)
  # max_interval        - An upper limit for the interval (default: Float::MAX)
  # backoff_factor      - The amount to multiple each successive retry's
  #                       interval amount by in order to provide backoff
  #                       (default: 1)
  # exceptions          - The list of exceptions to handle. Exceptions can be
  #                       given as Class, Module, or String. (default:
  #                       [Errno::ETIMEDOUT, Timeout::Error,
  #                       Error::TimeoutError])
  # methods             - A list of HTTP methods to retry without calling retry_if.  Pass
  #                       an empty Array to call retry_if for all exceptions.
  #                       (defaults to the idempotent HTTP methods in IDEMPOTENT_METHODS)
  # retry_if            - block that will receive the env object and the exception raised
  #                       and should decide if the code should retry still the action or
  #                       not independent of the retry count. This would be useful
  #                       if the exception produced is non-recoverable or if the
  #                       the HTTP method called is not idempotent.
  #                       (defaults to return false)
  #
  # @return [Retry] a new instance of Retry
  #
  # source://faraday//lib/faraday/request/retry.rb#97
  def initialize(app, options = T.unsafe(nil)); end

  # Private: construct an exception matcher object.
  #
  # An exception matcher for the rescue clause can usually be any object that
  # responds to `===`, but for Ruby 1.8 it has to be a Class or Module.
  #
  # source://faraday//lib/faraday/request/retry.rb#131
  def build_exception_matcher(exceptions); end

  # source://faraday//lib/faraday/request/retry.rb#111
  def call(env); end

  # source://faraday//lib/faraday/request/retry.rb#103
  def sleep_amount(retries); end

  private

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/request/retry.rb#149
  def retry_request?(env, exception); end
end

# source://faraday//lib/faraday/request/retry.rb#23
Faraday::Request::Retry::IDEMPOTENT_METHODS = T.let(T.unsafe(nil), Array)

# source://faraday//lib/faraday/request/retry.rb#26
class Faraday::Request::Retry::Options < ::Faraday::Options
  # source://faraday//lib/faraday/request/retry.rb#53
  def backoff_factor; end

  # source://faraday//lib/faraday/request/retry.rb#57
  def exceptions; end

  # source://faraday//lib/faraday/request/retry.rb#41
  def interval; end

  # source://faraday//lib/faraday/request/retry.rb#49
  def interval_randomness; end

  # source://faraday//lib/faraday/request/retry.rb#37
  def max; end

  # source://faraday//lib/faraday/request/retry.rb#45
  def max_interval; end

  # source://faraday//lib/faraday/request/retry.rb#62
  def methods; end

  # source://faraday//lib/faraday/request/retry.rb#66
  def retry_if; end

  class << self
    # source://faraday//lib/faraday/request/retry.rb#29
    def from(value); end
  end
end

# source://faraday//lib/faraday/request/retry.rb#27
Faraday::Request::Retry::Options::DEFAULT_CHECK = T.let(T.unsafe(nil), Proc)

# source://faraday//lib/faraday/request/token_authentication.rb#3
class Faraday::Request::TokenAuthentication < ::Faraday::Request::Authorization
  # @return [TokenAuthentication] a new instance of TokenAuthentication
  #
  # source://faraday//lib/faraday/request/token_authentication.rb#10
  def initialize(app, token, options = T.unsafe(nil)); end

  class << self
    # Public
    #
    # source://faraday//lib/faraday/request/token_authentication.rb#4
    def header(token, options = T.unsafe(nil)); end
  end
end

# source://faraday//lib/faraday/request/url_encoded.rb#2
class Faraday::Request::UrlEncoded < ::Faraday::Middleware
  # source://faraday//lib/faraday/request/url_encoded.rb#10
  def call(env); end

  # source://faraday//lib/faraday/request/url_encoded.rb#18
  def match_content_type(env); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/request/url_encoded.rb#25
  def process_request?(env); end

  # source://faraday//lib/faraday/request/url_encoded.rb#30
  def request_type(env); end

  class << self
    # Returns the value of attribute mime_type.
    #
    # source://faraday//lib/faraday/request/url_encoded.rb#6
    def mime_type; end

    # Sets the attribute mime_type
    #
    # @param value the value to set the attribute mime_type to.
    #
    # source://faraday//lib/faraday/request/url_encoded.rb#6
    def mime_type=(_arg0); end
  end
end

# source://faraday//lib/faraday/request/url_encoded.rb#3
Faraday::Request::UrlEncoded::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/options.rb#193
class Faraday::RequestOptions < ::Faraday::Options
  # source://faraday//lib/faraday/options.rb#195
  def []=(key, value); end
end

# source://faraday//lib/faraday/error.rb#37
class Faraday::ResourceNotFound < ::Faraday::ClientError; end

# source://faraday//lib/faraday/response.rb#4
class Faraday::Response
  extend ::Forwardable
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::AutoloadHelper

  # @return [Response] a new instance of Response
  #
  # source://faraday//lib/faraday/response.rb#27
  def initialize(env = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # Expand the env with more properties, without overriding existing ones.
  # Useful for applying request params after restoring a marshalled Response.
  #
  # source://faraday//lib/faraday/response.rb#87
  def apply_request(request_env); end

  # source://faraday//lib/faraday/response.rb#45
  def body; end

  # Returns the value of attribute env.
  #
  # source://faraday//lib/faraday/response.rb#32
  def env; end

  # source://faraday//lib/faraday/response.rb#62
  def finish(env); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/response.rb#49
  def finished?; end

  # source://faraday//lib/faraday/response.rb#40
  def headers; end

  # because @on_complete_callbacks cannot be marshalled
  #
  # source://faraday//lib/faraday/response.rb#74
  def marshal_dump; end

  # source://faraday//lib/faraday/response.rb#81
  def marshal_load(env); end

  # source://faraday//lib/faraday/response.rb#53
  def on_complete; end

  # source://faraday//lib/faraday/response.rb#36
  def status; end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/response.rb#69
  def success?; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def to_hash(*args, &block); end
end

# source://faraday//lib/faraday/response/logger.rb#4
class Faraday::Response::Logger < ::Faraday::Response::Middleware
  extend ::Forwardable

  # source://faraday//lib/faraday/response/logger.rb#9
  def initialize(app, logger = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/response/logger.rb#20
  def call(env); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def debug(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def error(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def fatal(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def info(*args, &block); end

  # source://faraday//lib/faraday/response/logger.rb#27
  def on_complete(env); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def warn(*args, &block); end

  private

  # source://faraday//lib/faraday/response/logger.rb#39
  def dump_body(body); end

  # source://faraday//lib/faraday/response/logger.rb#35
  def dump_headers(headers); end

  # source://faraday//lib/faraday/response/logger.rb#52
  def log_body?(type); end

  # source://faraday//lib/faraday/response/logger.rb#47
  def pretty_inspect(body); end
end

# source://faraday//lib/faraday/response/logger.rb#7
Faraday::Response::Logger::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# Used for simple response middleware.
#
# source://faraday//lib/faraday/response.rb#6
class Faraday::Response::Middleware < ::Faraday::Middleware
  # source://faraday//lib/faraday/response.rb#7
  def call(env); end

  # Override this to modify the environment after the response has finished.
  # Calls the `parse` method if defined
  #
  # source://faraday//lib/faraday/response.rb#15
  def on_complete(env); end
end

# source://faraday//lib/faraday/response/raise_error.rb#2
class Faraday::Response::RaiseError < ::Faraday::Response::Middleware
  # source://faraday//lib/faraday/response/raise_error.rb#5
  def on_complete(env); end

  # source://faraday//lib/faraday/response/raise_error.rb#17
  def response_values(env); end
end

# source://faraday//lib/faraday/response/raise_error.rb#3
Faraday::Response::RaiseError::ClientErrorStatuses = T.let(T.unsafe(nil), Range)

# source://faraday//lib/faraday/error.rb#46
class Faraday::SSLError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/options.rb#205
class Faraday::SSLOptions < ::Faraday::Options
  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#211
  def disable?; end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/options.rb#207
  def verify?; end
end

# source://faraday//lib/faraday/error.rb#40
class Faraday::TimeoutError < ::Faraday::ClientError
  # @return [TimeoutError] a new instance of TimeoutError
  #
  # source://faraday//lib/faraday/error.rb#41
  def initialize(ex = T.unsafe(nil)); end
end

# source://faraday//lib/faraday.rb#132
Faraday::Timer = Timeout

# source://faraday//lib/faraday/upload_io.rb#65
Faraday::UploadIO = Multipart::Post::UploadIO

# source://faraday//lib/faraday/utils.rb#4
module Faraday::Utils
  extend ::Faraday::Utils

  # Normalize URI() behavior across Ruby versions
  #
  # url - A String or URI.
  #
  # Returns a parsed URI.
  #
  # source://faraday//lib/faraday/utils.rb#254
  def URI(url); end

  # source://github_api/0.16.0/lib/github_api/ext/faraday.rb#20
  def build_nested_query(value, prefix = T.unsafe(nil), encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils.rb#175
  def build_query(params); end

  # Recursive hash merge
  #
  # source://faraday//lib/faraday/utils.rb#299
  def deep_merge(source, hash); end

  # Recursive hash update
  #
  # source://faraday//lib/faraday/utils.rb#287
  def deep_merge!(target, hash); end

  # source://faraday//lib/faraday/utils.rb#204
  def default_params_encoder; end

  # source://faraday//lib/faraday/utils.rb#264
  def default_uri_parser; end

  # source://faraday//lib/faraday/utils.rb#271
  def default_uri_parser=(parser); end

  # source://faraday//lib/faraday/utils.rb#185
  def escape(s); end

  # Stolen from Rack
  #
  # source://faraday//lib/faraday/utils.rb#213
  def normalize_params(params, name, v = T.unsafe(nil)); end

  # Receives a String or URI and returns just the path with the query string sorted.
  #
  # source://faraday//lib/faraday/utils.rb#280
  def normalize_path(url); end

  # source://faraday//lib/faraday/utils.rb#200
  def parse_nested_query(query); end

  # Adapted from Rack
  #
  # source://faraday//lib/faraday/utils.rb#196
  def parse_query(query); end

  # source://faraday//lib/faraday/utils.rb#191
  def unescape(s); end

  protected

  # source://faraday//lib/faraday/utils.rb#305
  def sort_query_params(query); end

  class << self
    # Sets the attribute default_params_encoder
    #
    # @param value the value to set the attribute default_params_encoder to.
    #
    # source://faraday//lib/faraday/utils.rb#209
    def default_params_encoder=(_arg0); end
  end
end

# source://faraday//lib/faraday/utils.rb#193
Faraday::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://faraday//lib/faraday/utils.rb#183
Faraday::Utils::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

# Adapted from Rack::Utils::HeaderHash
#
# source://faraday//lib/faraday/utils.rb#8
class Faraday::Utils::Headers < ::Hash
  # @return [Headers] a new instance of Headers
  #
  # source://faraday//lib/faraday/utils.rb#13
  def initialize(hash = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils.rb#41
  def [](k); end

  # source://faraday//lib/faraday/utils.rb#46
  def []=(k, v); end

  # source://faraday//lib/faraday/utils.rb#60
  def delete(k); end

  # source://faraday//lib/faraday/utils.rb#54
  def fetch(k, *args, &block); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#68
  def has_key?(k); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#68
  def include?(k); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#68
  def key?(k); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#68
  def member?(k); end

  # source://faraday//lib/faraday/utils.rb#82
  def merge(other); end

  # source://faraday//lib/faraday/utils.rb#76
  def merge!(other); end

  # source://faraday//lib/faraday/utils.rb#96
  def parse(header_string); end

  # source://faraday//lib/faraday/utils.rb#87
  def replace(other); end

  # source://faraday//lib/faraday/utils.rb#94
  def to_hash; end

  # source://faraday//lib/faraday/utils.rb#76
  def update(other); end

  protected

  # source://faraday//lib/faraday/utils.rb#113
  def names; end

  private

  # on dup/clone, we need to duplicate @names hash
  #
  # source://faraday//lib/faraday/utils.rb#20
  def initialize_copy(other); end

  class << self
    # source://faraday//lib/faraday/utils.rb#9
    def from(value); end
  end
end

# symbol -> string mapper + cache
#
# source://faraday//lib/faraday/utils.rb#29
Faraday::Utils::Headers::KeyMap = T.let(T.unsafe(nil), Hash)

# hash with stringified keys
#
# source://faraday//lib/faraday/utils.rb#119
class Faraday::Utils::ParamsHash < ::Hash
  # source://faraday//lib/faraday/utils.rb#120
  def [](key); end

  # source://faraday//lib/faraday/utils.rb#124
  def []=(key, value); end

  # source://faraday//lib/faraday/utils.rb#128
  def delete(key); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#132
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#132
  def include?(key); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#132
  def key?(key); end

  # @return [Boolean]
  #
  # source://faraday//lib/faraday/utils.rb#132
  def member?(key); end

  # source://faraday//lib/faraday/utils.rb#148
  def merge(params); end

  # source://faraday//lib/faraday/utils.rb#140
  def merge!(params); end

  # source://faraday//lib/faraday/utils.rb#157
  def merge_query(query, encoder = T.unsafe(nil)); end

  # source://github_api/0.16.0/lib/github_api/ext/faraday.rb#7
  def params_encoder(encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils.rb#152
  def replace(other); end

  # source://github_api/0.16.0/lib/github_api/ext/faraday.rb#15
  def to_query(encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils.rb#140
  def update(params); end

  private

  # source://faraday//lib/faraday/utils.rb#170
  def convert_key(key); end
end

# source://faraday//lib/faraday.rb#17
Faraday::VERSION = T.let(T.unsafe(nil), String)

# not pulling in active-support JUST for this method.  And I love this method.
#
# source://faraday//lib/faraday.rb#249
class Object < ::BasicObject
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::Kernel
end
