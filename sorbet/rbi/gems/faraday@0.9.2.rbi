# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday` gem.
# Please instead update this file by running `bin/tapioca gem faraday`.

module Faraday
  class << self
    def const_missing(name); end
    def default_adapter; end
    def default_adapter=(adapter); end
    def default_connection; end
    def default_connection=(_arg0); end
    def default_connection_options; end
    def default_connection_options=(_arg0); end
    def lib_path; end
    def lib_path=(_arg0); end
    def new(url = T.unsafe(nil), options = T.unsafe(nil)); end
    def require_lib(*libs); end
    def require_libs(*libs); end
    def root_path; end
    def root_path=(_arg0); end

    private

    def method_missing(name, *args, &block); end
  end
end

class Faraday::Connection
  extend ::Forwardable

  def initialize(url = T.unsafe(nil), options = T.unsafe(nil)); end

  def adapter(*args, **_arg1, &block); end
  def app(*args, **_arg1, &block); end
  def authorization(type, token); end
  def basic_auth(login, pass); end
  def build(*args, **_arg1, &block); end
  def build_exclusive_url(url = T.unsafe(nil), params = T.unsafe(nil), params_encoder = T.unsafe(nil)); end
  def build_request(method); end
  def build_url(url = T.unsafe(nil), extra_params = T.unsafe(nil)); end
  def builder; end
  def default_parallel_manager; end
  def default_parallel_manager=(_arg0); end
  def delete(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end
  def dup; end
  def get(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end
  def head(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end
  def headers; end
  def headers=(hash); end
  def host(*args, **_arg1, &block); end
  def host=(*args, **_arg1, &block); end
  def in_parallel(manager = T.unsafe(nil)); end
  def in_parallel?; end
  def options; end
  def parallel_manager; end
  def params; end
  def params=(hash); end
  def patch(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end
  def path_prefix(*args, **_arg1, &block); end
  def path_prefix=(value); end
  def port(*args, **_arg1, &block); end
  def port=(*args, **_arg1, &block); end
  def post(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end
  def proxy(arg = T.unsafe(nil)); end
  def put(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end
  def request(*args, **_arg1, &block); end
  def response(*args, **_arg1, &block); end
  def run_request(method, url, body, headers); end
  def scheme(*args, **_arg1, &block); end
  def scheme=(*args, **_arg1, &block); end
  def set_authorization_header(header_type, *args); end
  def ssl; end
  def token_auth(token, options = T.unsafe(nil)); end
  def url_prefix; end
  def url_prefix=(url, encoder = T.unsafe(nil)); end
  def use(*args, **_arg1, &block); end
  def with_uri_credentials(uri); end
end

Faraday::Connection::METHODS = T.let(T.unsafe(nil), Set)

module Faraday::MiddlewareRegistry
  def fetch_middleware(key); end
  def load_middleware(key); end
  def lookup_middleware(key); end
  def middleware_mutex(&block); end
  def register_middleware(autoload_path = T.unsafe(nil), mapping = T.unsafe(nil)); end
end

class Faraday::Options < ::Struct
  def [](key); end
  def clear; end
  def delete(key); end
  def each; end
  def each_key; end
  def each_value; end
  def empty?; end
  def fetch(key, *args); end
  def has_key?(key); end
  def has_value?(value); end
  def inspect; end
  def key?(key); end
  def keys; end
  def merge(value); end
  def merge!(obj); end
  def symbolized_key_set; end
  def to_hash; end
  def update(obj); end
  def value?(value); end
  def values_at(*keys); end

  class << self
    def attribute_options; end
    def fetch_error_class; end
    def from(value); end
    def inherited(subclass); end
    def memoized(key); end
    def memoized_attributes; end
    def options(mapping); end
    def options_for(key); end
  end
end

class Faraday::ProxyOptions < ::Faraday::Options
  extend ::Forwardable

  def host(*args, **_arg1, &block); end
  def host=(*args, **_arg1, &block); end
  def path(*args, **_arg1, &block); end
  def path=(*args, **_arg1, &block); end
  def port(*args, **_arg1, &block); end
  def port=(*args, **_arg1, &block); end
  def scheme(*args, **_arg1, &block); end
  def scheme=(*args, **_arg1, &block); end

  class << self
    def from(value); end
  end
end

class Faraday::RequestOptions < ::Faraday::Options
  def []=(key, value); end
end

class Faraday::SSLOptions < ::Faraday::Options
  def disable?; end
  def verify?; end
end

Faraday::Timer = Timeout

module Faraday::Utils
  extend ::Faraday::Utils

  def URI(url); end
  def build_nested_query(params); end
  def build_query(params); end
  def deep_merge(source, hash); end
  def deep_merge!(target, hash); end
  def default_params_encoder; end
  def default_uri_parser; end
  def default_uri_parser=(parser); end
  def escape(s); end
  def normalize_params(params, name, v = T.unsafe(nil)); end
  def normalize_path(url); end
  def parse_nested_query(query); end
  def parse_query(query); end
  def unescape(s); end

  protected

  def sort_query_params(query); end

  class << self
    def default_params_encoder=(_arg0); end
  end
end

Faraday::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)
Faraday::Utils::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

class Faraday::Utils::Headers < ::Hash
  def initialize(hash = T.unsafe(nil)); end

  def [](k); end
  def []=(k, v); end
  def delete(k); end
  def fetch(k, *args, &block); end
  def has_key?(k); end
  def include?(k); end
  def key?(k); end
  def member?(k); end
  def merge(other); end
  def merge!(other); end
  def parse(header_string); end
  def replace(other); end
  def to_hash; end
  def update(other); end

  protected

  def names; end

  private

  def initialize_copy(other); end

  class << self
    def from(value); end
  end
end

Faraday::Utils::Headers::KeyMap = T.let(T.unsafe(nil), Hash)

class Faraday::Utils::ParamsHash < ::Hash
  def [](key); end
  def []=(key, value); end
  def delete(key); end
  def has_key?(key); end
  def include?(key); end
  def key?(key); end
  def member?(key); end
  def merge(params); end
  def merge!(params); end
  def merge_query(query, encoder = T.unsafe(nil)); end
  def replace(other); end
  def to_query(encoder = T.unsafe(nil)); end
  def update(params); end

  private

  def convert_key(key); end
end

Faraday::VERSION = T.let(T.unsafe(nil), String)
