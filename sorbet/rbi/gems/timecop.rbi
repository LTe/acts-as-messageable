# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/timecop/all/timecop.rbi
#
# timecop-0.9.4

class Timecop
  def baseline; end
  def baseline=(b); end
  def initialize; end
  def return(&block); end
  def return_to_baseline; end
  def self.allocate; end
  def self.baseline; end
  def self.baseline=(baseline); end
  def self.freeze(*args, &block); end
  def self.frozen?; end
  def self.new(*arg0); end
  def self.return(&block); end
  def self.return_to_baseline; end
  def self.safe_mode=(safe); end
  def self.safe_mode?; end
  def self.scale(*args, &block); end
  def self.send_travel(mock_type, *args, &block); end
  def self.thread_safe; end
  def self.thread_safe=(t); end
  def self.top_stack_item; end
  def self.travel(*args, &block); end
  def self.unfreeze(&block); end
  def set_baseline(b); end
  def set_stack(s); end
  def stack; end
  def thread_safe; end
  def thread_safe=(t); end
  def travel(mock_type, *args, &block); end
  def unmock!; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Timecop::TimeStackItem
  def compute_travel_offset; end
  def date(date_klass = nil); end
  def datetime(datetime_klass = nil); end
  def day; end
  def hour; end
  def initialize(mock_type, *args); end
  def min; end
  def mock_type; end
  def month; end
  def parse_time(*args); end
  def rational_to_utc_offset(rational); end
  def scaled_time; end
  def scaling_factor; end
  def sec; end
  def time(time_klass = nil); end
  def time_klass; end
  def times_are_equal_within_epsilon(t1, t2, epsilon_in_seconds); end
  def travel_offset; end
  def travel_offset_days; end
  def utc_offset; end
  def utc_offset_to_rational(utc_offset); end
  def year; end
end
class Time
  def self.mock_time; end
  def self.new(*args); end
  def self.new_with_mock_time(*args); end
  def self.new_without_mock_time(*arg0); end
  def self.now_with_mock_time; end
  def self.now_without_mock_time(*arg0); end
end
class Date
  def self.closest_wday(wday); end
  def self.mock_date; end
  def self.mocked_time_stack_item; end
  def self.parse_with_mock_date(*args); end
  def self.parse_without_mock_date(*arg0); end
  def self.strptime_with_mock_date(str = nil, fmt = nil, start = nil); end
  def self.strptime_without_mock_date(*arg0); end
  def self.today_with_mock_date; end
  def self.today_without_mock_date(*arg0); end
end
class DateTime < Date
  def self.mock_time; end
  def self.mocked_time_stack_item; end
  def self.now_with_mock_time; end
  def self.now_without_mock_time(*arg0); end
  def self.parse_with_mock_date(*args); end
  def self.parse_without_mock_date(*arg0); end
end
class Timecop::SafeModeException < StandardError
  def initialize; end
end
