# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hashie/all/hashie.rbi
#
# hashie-4.1.0

module Hashie
  def self.logger; end
  def self.logger=(logger); end
end
module Hashie::Extensions
end
module Hashie::Extensions::StringifyKeys
  def stringify_keys!; end
  def stringify_keys; end
end
module Hashie::Extensions::StringifyKeys::ClassMethods
  def stringify_keys!(hash); end
  def stringify_keys(hash); end
  def stringify_keys_recursively!(object); end
end
module Hashie::Extensions::SymbolizeKeys
  def symbolize_keys!; end
  def symbolize_keys; end
end
module Hashie::Extensions::SymbolizeKeys::ClassMethods
  def symbolize_keys!(hash); end
  def symbolize_keys(hash); end
  def symbolize_keys_recursively!(object); end
end
class Hashie::Railtie < Rails::Railtie
end
module Hashie::Extensions::Parsers
end
module Hashie::Extensions::Dash
end
module Hashie::Extensions::Mash
end
module Hashie::Extensions::Array
end
module Hashie::Extensions::PrettyInspect
  def hashie_inspect; end
  def self.included(base); end
end
class Hashie::Hash < Hash
  def flexibly_convert_to_hash(object, options = nil); end
  def hash_inspect; end
  def inspect; end
  def maybe_convert_to_hash(object, options); end
  def to_hash(options = nil); end
  def to_json(*args); end
  def to_mash; end
  include Hashie::Extensions::PrettyInspect
  include Hashie::Extensions::StringifyKeys
end
module Hashie::Extensions::Array::PrettyInspect
  def hashie_inspect; end
  def self.included(base); end
end
class Hashie::Extensions::RubyVersion
  def <=>(other); end
  def initialize(version); end
  def segments; end
  def segments=(arg0); end
  def split_to_segments(version); end
  include Comparable
end
module Hashie::Extensions::RubyVersionCheck
  def self.included(base); end
end
module Hashie::Extensions::RubyVersionCheck::ClassMethods
  def with_minimum_ruby(version); end
  def with_minimum_ruby?(version); end
end
class Hashie::Array < Array
  def array_inspect; end
  def dig(*indexes); end
  def inspect; end
  extend Hashie::Extensions::RubyVersionCheck::ClassMethods
  include Hashie::Extensions::Array::PrettyInspect
  include Hashie::Extensions::RubyVersionCheck
end
module Hashie::Utils
  def self.integer_classes; end
  def self.method_information(bound_method); end
  def self.safe_dup(value); end
end
module Hashie::Extensions::KeyConflictWarning
  def disable_warnings(*method_keys); end
  def disable_warnings?(method_key = nil); end
  def disabled_warnings; end
  def inherited(subclass); end
end
class Hashie::Extensions::KeyConflictWarning::CannotDisableMashWarnings < StandardError
  def initialize; end
end
class Hashie::Mash < Hashie::Hash
  def [](key); end
  def []=(key, value, convert = nil); end
  def _deep_update(other_hash, &blk); end
  def assign_property(name, value); end
  def compact; end
  def convert_key(key); end
  def convert_value(val, duping = nil); end
  def custom_reader(key); end
  def custom_writer(key, value, convert = nil); end
  def deep_merge!(*other_hashes, &blk); end
  def deep_merge(*other_hashes, &blk); end
  def deep_update(*other_hashes, &blk); end
  def delete(key); end
  def dig(*keys); end
  def dup; end
  def extractable_options?; end
  def fetch(key, *args); end
  def has_key?(key); end
  def hash_inspect; end
  def include?(key); end
  def initialize(source_hash = nil, default = nil, &blk); end
  def initializing_reader(key); end
  def inspect; end
  def invert; end
  def key?(key); end
  def log_built_in_message(method_key); end
  def log_collision?(method_key); end
  def member?(key); end
  def merge!(*other_hashes, &blk); end
  def merge(*other_hashes, &blk); end
  def method_missing(method_name, *args, &blk); end
  def method_name_and_suffix(method_name); end
  def method_suffix(method_name); end
  def prefix_method?(method_name); end
  def regular_dup; end
  def regular_key?(arg0); end
  def regular_reader(arg0); end
  def regular_writer(arg0, arg1); end
  def reject(&blk); end
  def replace(other_hash); end
  def respond_to_missing?(method_name, *args); end
  def reverse_merge(other_hash); end
  def select(&blk); end
  def self.[](*arg0); end
  def self.load(path, options = nil); end
  def self.quiet(*method_keys); end
  def shallow_merge(other_hash); end
  def shallow_update(other_hash); end
  def slice(*keys); end
  def to_module(mash_method_name = nil); end
  def to_s; end
  def transform_keys(&blk); end
  def transform_values(&blk); end
  def underbang_reader(key); end
  def update(*other_hashes, &blk); end
  def values_at(*keys); end
  def with_accessors!; end
  extend Hashie::Extensions::KeyConflictWarning
  extend Hashie::Extensions::RubyVersionCheck::ClassMethods
  include Hashie::Extensions::PrettyInspect
  include Hashie::Extensions::RubyVersionCheck
end
