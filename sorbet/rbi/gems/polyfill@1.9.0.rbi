# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `polyfill` gem.
# Please instead update this file by running `bin/tapioca gem polyfill`.

# source://rake/13.0.6/lib/rake/clean.rb#63
::CLEAN = T.let(T.unsafe(nil), Rake::FileList)

# source://rake/13.0.6/lib/rake/clean.rb#73
::CLOBBER = T.let(T.unsafe(nil), Rake::FileList)

# source://yard/0.9.28/lib/yard.rb#61
::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard/0.9.28/lib/yard.rb#62
::RUBY19 = T.let(T.unsafe(nil), TrueClass)

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://polyfill//lib/polyfill.rb#66
  def Polyfill(options = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/version.rb#1
module Polyfill
  private

  # source://polyfill//lib/polyfill.rb#7
  def get(module_name, methods, options = T.unsafe(nil)); end

  class << self
    # source://polyfill//lib/polyfill.rb#7
    def get(module_name, methods, options = T.unsafe(nil)); end
  end
end

# source://polyfill//lib/polyfill/internal_utils.rb#2
module Polyfill::InternalUtils
  private

  # source://polyfill//lib/polyfill/internal_utils.rb#86
  def create_module(*args); end

  # source://polyfill//lib/polyfill/internal_utils.rb#12
  def current_ruby_version; end

  # source://polyfill//lib/polyfill/internal_utils.rb#17
  def ignore_warnings; end

  # source://polyfill//lib/polyfill/internal_utils.rb#41
  def keep_only_these_methods!(mod, whitelist); end

  # source://polyfill//lib/polyfill/internal_utils.rb#74
  def methods_to_keep(modules, methods, lead_symbol, module_name); end

  # source://polyfill//lib/polyfill/internal_utils.rb#48
  def modules_to_use(module_name, versions); end

  # source://polyfill//lib/polyfill/internal_utils.rb#99
  def namify_arguments(*args); end

  # source://polyfill//lib/polyfill/internal_utils.rb#27
  def polyfill_versions_to_use(desired_version = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/internal_utils.rb#136
  def to_f(obj); end

  # source://polyfill//lib/polyfill/internal_utils.rb#149
  def to_hash(obj); end

  # source://polyfill//lib/polyfill/internal_utils.rb#123
  def to_int(obj); end

  # source://polyfill//lib/polyfill/internal_utils.rb#110
  def to_str(obj); end

  class << self
    # source://polyfill//lib/polyfill/internal_utils.rb#86
    def create_module(*args); end

    # source://polyfill//lib/polyfill/internal_utils.rb#12
    def current_ruby_version; end

    # source://polyfill//lib/polyfill/internal_utils.rb#17
    def ignore_warnings; end

    # source://polyfill//lib/polyfill/internal_utils.rb#41
    def keep_only_these_methods!(mod, whitelist); end

    # source://polyfill//lib/polyfill/internal_utils.rb#74
    def methods_to_keep(modules, methods, lead_symbol, module_name); end

    # source://polyfill//lib/polyfill/internal_utils.rb#48
    def modules_to_use(module_name, versions); end

    # source://polyfill//lib/polyfill/internal_utils.rb#99
    def namify_arguments(*args); end

    # source://polyfill//lib/polyfill/internal_utils.rb#27
    def polyfill_versions_to_use(desired_version = T.unsafe(nil)); end

    # source://polyfill//lib/polyfill/internal_utils.rb#136
    def to_f(obj); end

    # source://polyfill//lib/polyfill/internal_utils.rb#149
    def to_hash(obj); end

    # source://polyfill//lib/polyfill/internal_utils.rb#123
    def to_int(obj); end

    # source://polyfill//lib/polyfill/internal_utils.rb#110
    def to_str(obj); end
  end
end

# source://polyfill//lib/polyfill/internal_utils.rb#3
Polyfill::InternalUtils::VERSIONS = T.let(T.unsafe(nil), Hash)

# source://polyfill//lib/polyfill.rb#5
module Polyfill::Module; end

# source://polyfill//lib/polyfill/v2_4/enumerator/lazy.rb#0
module Polyfill::Module::MezpFbnVtZXJhYmxlPT5bIiNjaHVua193aGlsZSJdLCA6dmVyc2lvbj0_1IjIuNCJ9; end

# source://polyfill//lib/polyfill/v2_5/integer.rb#0
module Polyfill::Module::MezpJbnRlZ2VyPT5bIiNjZWlsIiwgIiNmbG9vciIsICIjcm91bmQiLCAiI3RydW5jYXRlIl0sIDp2ZXJzaW9uPT4iMi40In0_; end

# source://polyfill//lib/polyfill/v2_6/kernel.rb#0
module Polyfill::Module::MezpLZXJuZWw9PlsiI3lpZWxkX3NlbGYiXSwgOnZlcnNpb249PiIyLjUifQ__; end

# source://polyfill//lib/polyfill/v2_4/enumerable.rb#0
module Polyfill::Module::MezpOdW1lcmljPT5bIiNkdXAiXSwgOnZlcnNpb249PiIyLjQifQ__; end

# source://polyfill//lib/polyfill/v2_2/enumerable.rb#2
module Polyfill::V2_2; end

# source://polyfill//lib/polyfill/v2_2/enumerable.rb#3
module Polyfill::V2_2::Enumerable
  # @raise [ArgumentError]
  #
  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#4
  def max(n = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#12
  def max_by(n = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#22
  def min(n = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#30
  def min_by(n = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#40
  def slice_after(pattern = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_2/enumerable.rb#61
  def slice_when; end
end

# source://polyfill//lib/polyfill/v2_2/kernel.rb#3
module Polyfill::V2_2::Kernel
  # source://polyfill//lib/polyfill/v2_2/kernel.rb#4
  def itself; end
end

# source://polyfill//lib/polyfill/v2_2/math.rb#3
module Polyfill::V2_2::Math; end

# source://polyfill//lib/polyfill/v2_2/math.rb#4
module Polyfill::V2_2::Math::ClassMethods
  # source://polyfill//lib/polyfill/v2_2/math.rb#5
  def log(*args); end
end

# source://polyfill//lib/polyfill/v2_2/prime.rb#3
module Polyfill::V2_2::Prime; end

# source://polyfill//lib/polyfill/v2_2/prime.rb#4
module Polyfill::V2_2::Prime::ClassMethods
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_2/prime.rb#5
  def prime?(*args); end
end

# source://polyfill//lib/polyfill/v2_2/vector.rb#3
module Polyfill::V2_2::Vector
  # source://polyfill//lib/polyfill/v2_2/vector.rb#4
  def +@; end
end

# source://polyfill//lib/polyfill/v2_3/array.rb#2
module Polyfill::V2_3; end

# source://polyfill//lib/polyfill/v2_3/array.rb#3
module Polyfill::V2_3::Array
  # source://polyfill//lib/polyfill/v2_3/array.rb#4
  def bsearch_index; end

  # source://polyfill//lib/polyfill/v2_3/array.rb#14
  def dig(head, *rest); end
end

# source://polyfill//lib/polyfill/v2_3/enumerable.rb#3
module Polyfill::V2_3::Enumerable
  # source://polyfill//lib/polyfill/v2_3/enumerable.rb#4
  def chunk_while; end

  # source://polyfill//lib/polyfill/v2_3/enumerable.rb#23
  def grep_v(pattern); end

  # source://polyfill//lib/polyfill/v2_3/enumerable.rb#29
  def slice_before(*args); end
end

# source://polyfill//lib/polyfill/v2_3/enumerator/lazy.rb#3
module Polyfill::V2_3::Enumerator; end

# source://polyfill//lib/polyfill/v2_3/enumerator/lazy.rb#4
module Polyfill::V2_3::Enumerator::Lazy
  # source://polyfill//lib/polyfill/v2_3/enumerator/lazy.rb#5
  def grep_v(pattern); end
end

# source://polyfill//lib/polyfill/v2_3/hash.rb#3
module Polyfill::V2_3::Hash
  # source://polyfill//lib/polyfill/v2_3/hash.rb#4
  def <(other); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#12
  def <=(other); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#18
  def >(other); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#26
  def >=(other); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#32
  def dig(head, *rest); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#55
  def fetch_values(*keys); end

  # source://polyfill//lib/polyfill/v2_3/hash.rb#69
  def to_proc; end
end

# source://polyfill//lib/polyfill/v2_3/kernel.rb#3
module Polyfill::V2_3::Kernel
  # source://polyfill//lib/polyfill/v2_3/kernel.rb#4
  def loop; end
end

# source://polyfill//lib/polyfill/v2_3/numeric.rb#3
module Polyfill::V2_3::Numeric
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_3/numeric.rb#4
  def negative?; end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_3/numeric.rb#8
  def positive?; end
end

# source://polyfill//lib/polyfill/v2_3/prime.rb#3
module Polyfill::V2_3::Prime; end

# source://polyfill//lib/polyfill/v2_3/prime.rb#4
module Polyfill::V2_3::Prime::ClassMethods
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_3/prime.rb#5
  def prime?(*args); end
end

# source://polyfill//lib/polyfill/v2_3/string.rb#3
module Polyfill::V2_3::String
  # source://polyfill//lib/polyfill/v2_3/string.rb#20
  def +@; end

  # source://polyfill//lib/polyfill/v2_3/string.rb#24
  def -@; end
end

# source://polyfill//lib/polyfill/v2_3/string.rb#4
module Polyfill::V2_3::String::ClassMethods
  # source://polyfill//lib/polyfill/v2_3/string.rb#5
  def new(*args); end
end

# source://polyfill//lib/polyfill/v2_3/struct.rb#3
module Polyfill::V2_3::Struct
  # source://polyfill//lib/polyfill/v2_3/struct.rb#4
  def dig(head, *rest); end
end

# source://polyfill//lib/polyfill/v2_4/numeric.rb#2
module Polyfill::V2_4; end

# source://polyfill//lib/polyfill/v2_4/array.rb#5
module Polyfill::V2_4::Array
  # source://polyfill//lib/polyfill/v2_4/array.rb#8
  def concat(*others); end

  # source://polyfill//lib/polyfill/v2_4/array.rb#19
  def sum(init = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_4/comparable.rb#3
module Polyfill::V2_4::Comparable
  # source://polyfill//lib/polyfill/v2_4/comparable.rb#4
  def clamp(min, max); end
end

# source://polyfill//lib/polyfill/v2_4/dir.rb#3
module Polyfill::V2_4::Dir; end

# source://polyfill//lib/polyfill/v2_4/dir.rb#4
module Polyfill::V2_4::Dir::ClassMethods
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/dir.rb#5
  def empty?(path_name); end
end

# source://polyfill//lib/polyfill/v2_4/enumerable.rb#5
module Polyfill::V2_4::Enumerable
  # source://polyfill//lib/polyfill/v2_4/enumerable.rb#8
  def chunk(*_arg0); end

  # source://polyfill//lib/polyfill/v2_4/enumerable.rb#14
  def sum(init = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/enumerable.rb#24
  def uniq; end
end

# source://polyfill//lib/polyfill/v2_4/enumerator/lazy.rb#3
module Polyfill::V2_4::Enumerator; end

# source://polyfill//lib/polyfill/v2_4/enumerator/lazy.rb#4
module Polyfill::V2_4::Enumerator::Lazy
  # source://polyfill//lib/polyfill/v2_4/enumerator/lazy.rb#7
  def chunk_while; end

  # source://polyfill//lib/polyfill/v2_4/enumerator/lazy.rb#11
  def uniq; end
end

# source://polyfill//lib/polyfill/v2_4/file.rb#3
module Polyfill::V2_4::File; end

# source://polyfill//lib/polyfill/v2_4/file.rb#4
module Polyfill::V2_4::File::ClassMethods
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/file.rb#5
  def empty?(file_name); end
end

# source://polyfill//lib/polyfill/v2_4/float.rb#3
module Polyfill::V2_4::Float
  # source://polyfill//lib/polyfill/v2_4/float.rb#4
  def ceil(ndigits = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/float.rb#17
  def floor(ndigits = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/float.rb#30
  def truncate(ndigits = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_4/hash.rb#3
module Polyfill::V2_4::Hash
  # source://polyfill//lib/polyfill/v2_4/hash.rb#4
  def compact; end

  # source://polyfill//lib/polyfill/v2_4/hash.rb#8
  def compact!; end

  # source://polyfill//lib/polyfill/v2_4/hash.rb#12
  def transform_values; end

  # source://polyfill//lib/polyfill/v2_4/hash.rb#26
  def transform_values!; end
end

# source://polyfill//lib/polyfill/v2_4/io.rb#5
module Polyfill::V2_4::IO
  # source://polyfill//lib/polyfill/v2_4/io.rb#58
  def each_line(*args); end

  # source://polyfill//lib/polyfill/v2_4/io.rb#91
  def gets(*args); end

  # source://polyfill//lib/polyfill/v2_4/io.rb#107
  def lines(*args); end

  # source://polyfill//lib/polyfill/v2_4/io.rb#140
  def readline(*args); end

  # source://polyfill//lib/polyfill/v2_4/io.rb#156
  def readlines(*args); end
end

# source://polyfill//lib/polyfill/v2_4/io.rb#6
module Polyfill::V2_4::IO::ClassMethods
  # source://polyfill//lib/polyfill/v2_4/io.rb#7
  def foreach(name, *args); end

  # source://polyfill//lib/polyfill/v2_4/io.rb#41
  def readlines(file_name, *args); end
end

# source://polyfill//lib/polyfill/v2_4/i_p_addr.rb#3
module Polyfill::V2_4::IPAddr
  # source://polyfill//lib/polyfill/v2_4/i_p_addr.rb#10
  def <=>(*_arg0); end

  # source://polyfill//lib/polyfill/v2_4/i_p_addr.rb#4
  def ==(*_arg0); end
end

# source://polyfill//lib/polyfill/v2_4/integer.rb#3
module Polyfill::V2_4::Integer
  # source://polyfill//lib/polyfill/v2_4/integer.rb#4
  def ceil(ndigits = T.unsafe(nil)); end

  # @raise [Math::DomainError]
  #
  # source://polyfill//lib/polyfill/v2_4/integer.rb#13
  def digits(base = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/integer.rb#28
  def floor(ndigits = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/integer.rb#37
  def round(ndigits = T.unsafe(nil), half: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/integer.rb#49
  def truncate(ndigits = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_4/match_data.rb#3
module Polyfill::V2_4::MatchData
  # source://polyfill//lib/polyfill/v2_4/match_data.rb#4
  def named_captures; end

  # source://polyfill//lib/polyfill/v2_4/match_data.rb#10
  def values_at(*indexes); end
end

# source://polyfill//lib/polyfill/v2_4/numeric.rb#3
module Polyfill::V2_4::Numeric
  # source://polyfill//lib/polyfill/v2_4/numeric.rb#4
  def clone(freeze: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/numeric.rb#8
  def dup; end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/numeric.rb#12
  def finite?; end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/numeric.rb#16
  def infinite?; end
end

# source://polyfill//lib/polyfill/v2_4/object.rb#3
module Polyfill::V2_4::Object
  # source://polyfill//lib/polyfill/v2_4/object.rb#4
  def clone(freeze: T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_4/pathname.rb#3
module Polyfill::V2_4::Pathname
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/pathname.rb#4
  def empty?; end
end

# source://polyfill//lib/polyfill/v2_4/regexp.rb#3
module Polyfill::V2_4::Regexp
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/regexp.rb#4
  def match?(string, position = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_4/string.rb#5
module Polyfill::V2_4::String
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/string.rb#15
  def casecmp?(other); end

  # source://polyfill//lib/polyfill/v2_4/string.rb#19
  def concat(*others); end

  # source://polyfill//lib/polyfill/v2_4/string.rb#30
  def each_line(*args); end

  # source://polyfill//lib/polyfill/v2_4/string.rb#63
  def lines(*args); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/string.rb#97
  def match?(pattern, position = T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_4/string.rb#101
  def prepend(*others); end

  # source://polyfill//lib/polyfill/v2_4/string.rb#112
  def unpack1(*args); end
end

# source://polyfill//lib/polyfill/v2_4/string.rb#6
module Polyfill::V2_4::String::ClassMethods
  # source://polyfill//lib/polyfill/v2_4/string.rb#7
  def new(*args); end
end

# source://polyfill//lib/polyfill/v2_4/string_io.rb#5
module Polyfill::V2_4::StringIO
  # source://polyfill//lib/polyfill/v2_4/string_io.rb#58
  def each_line(*args); end

  # source://polyfill//lib/polyfill/v2_4/string_io.rb#91
  def gets(*args); end

  # source://polyfill//lib/polyfill/v2_4/string_io.rb#107
  def lines(*args); end

  # source://polyfill//lib/polyfill/v2_4/string_io.rb#140
  def readline(*args); end

  # source://polyfill//lib/polyfill/v2_4/string_io.rb#156
  def readlines(*args); end
end

# source://polyfill//lib/polyfill/v2_4/string_io.rb#6
module Polyfill::V2_4::StringIO::ClassMethods
  # source://polyfill//lib/polyfill/v2_4/string_io.rb#7
  def foreach(name, *args); end

  # source://polyfill//lib/polyfill/v2_4/string_io.rb#41
  def readlines(file_name, *args); end
end

# source://polyfill//lib/polyfill/v2_4/symbol.rb#3
module Polyfill::V2_4::Symbol
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/symbol.rb#4
  def casecmp?(other); end

  # source://polyfill//lib/polyfill/v2_4/symbol.rb#10
  def match(*args); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_4/symbol.rb#18
  def match?(pattern, position = T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_5/array.rb#2
module Polyfill::V2_5; end

# source://polyfill//lib/polyfill/v2_5/array.rb#3
module Polyfill::V2_5::Array
  # source://polyfill//lib/polyfill/v2_5/array.rb#4
  def append(*args); end

  # source://polyfill//lib/polyfill/v2_5/array.rb#8
  def prepend(*args); end
end

# source://polyfill//lib/polyfill/v2_5/big_decimal.rb#3
module Polyfill::V2_5::BigDecimal
  # source://polyfill//lib/polyfill/v2_5/big_decimal.rb#4
  def clone; end

  # source://polyfill//lib/polyfill/v2_5/big_decimal.rb#8
  def dup; end
end

# source://polyfill//lib/polyfill/v2_5/dir.rb#3
module Polyfill::V2_5::Dir; end

# source://polyfill//lib/polyfill/v2_5/dir.rb#4
module Polyfill::V2_5::Dir::ClassMethods
  # source://polyfill//lib/polyfill/v2_5/dir.rb#5
  def children(dirname, encoding: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_5/dir.rb#9
  def each_child(dirname, encoding: T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_5/enumerable.rb#3
module Polyfill::V2_5::Enumerable
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/enumerable.rb#4
  def all?(*pattern); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/enumerable.rb#10
  def any?(*pattern); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/enumerable.rb#16
  def none?(*pattern); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/enumerable.rb#22
  def one?(*pattern); end
end

# source://polyfill//lib/polyfill/v2_5/hash.rb#3
module Polyfill::V2_5::Hash
  # source://polyfill//lib/polyfill/v2_5/hash.rb#4
  def slice(*keys); end

  # source://polyfill//lib/polyfill/v2_5/hash.rb#10
  def transform_keys; end
end

# source://polyfill//lib/polyfill/v2_5/integer.rb#5
module Polyfill::V2_5::Integer
  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/integer.rb#52
  def allbits?(mask); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/integer.rb#57
  def anybits?(mask); end

  # source://polyfill//lib/polyfill/v2_5/integer.rb#36
  def ceil(*_arg0); end

  # source://polyfill//lib/polyfill/v2_5/integer.rb#40
  def floor(*_arg0); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/integer.rb#61
  def nobits?(mask); end

  # source://polyfill//lib/polyfill/v2_5/integer.rb#44
  def round(*_arg0); end

  # source://polyfill//lib/polyfill/v2_5/integer.rb#48
  def truncate(*_arg0); end
end

# source://polyfill//lib/polyfill/v2_5/integer.rb#8
module Polyfill::V2_5::Integer::ClassMethods
  # source://polyfill//lib/polyfill/v2_5/integer.rb#9
  def sqrt(n); end
end

# source://polyfill//lib/polyfill/v2_5/kernel.rb#3
module Polyfill::V2_5::Kernel
  # @yield [_self]
  # @yieldparam _self [Polyfill::V2_5::Kernel] the object that the method was called on
  #
  # source://polyfill//lib/polyfill/v2_5/kernel.rb#4
  def yield_self; end
end

# source://polyfill//lib/polyfill/v2_5/set.rb#3
module Polyfill::V2_5::Set
  # source://polyfill//lib/polyfill/v2_5/set.rb#4
  def ===(other); end

  # source://polyfill//lib/polyfill/v2_5/set.rb#8
  def to_s; end
end

# source://polyfill//lib/polyfill/v2_5/string.rb#3
module Polyfill::V2_5::String
  # source://polyfill//lib/polyfill/v2_5/string.rb#4
  def casecmp(other_str); end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/string.rb#10
  def casecmp?(other_str); end

  # source://polyfill//lib/polyfill/v2_5/string.rb#16
  def delete_prefix(prefix); end

  # source://polyfill//lib/polyfill/v2_5/string.rb#20
  def delete_prefix!(prefix); end

  # source://polyfill//lib/polyfill/v2_5/string.rb#26
  def delete_suffix(suffix); end

  # source://polyfill//lib/polyfill/v2_5/string.rb#30
  def delete_suffix!(suffix); end

  # source://polyfill//lib/polyfill/v2_5/string.rb#48
  def each_grapheme_cluster; end

  # source://polyfill//lib/polyfill/v2_5/string.rb#42
  def grapheme_clusters; end

  # @return [Boolean]
  #
  # source://polyfill//lib/polyfill/v2_5/string.rb#34
  def start_with?(*prefixes); end
end

# source://polyfill//lib/polyfill/v2_5/struct.rb#3
module Polyfill::V2_5::Struct; end

# source://polyfill//lib/polyfill/v2_5/struct.rb#4
module Polyfill::V2_5::Struct::ClassMethods
  # source://polyfill//lib/polyfill/v2_5/struct.rb#5
  def new(*args, keyword_init: T.unsafe(nil)); end
end

# source://polyfill//lib/polyfill/v2_5/time.rb#3
module Polyfill::V2_5::Time; end

# source://polyfill//lib/polyfill/v2_5/time.rb#4
module Polyfill::V2_5::Time::ClassMethods
  # source://polyfill//lib/polyfill/v2_5/time.rb#5
  def at(*args); end
end

# source://polyfill//lib/polyfill/v2_6/array.rb#2
module Polyfill::V2_6; end

# source://polyfill//lib/polyfill/v2_6/array.rb#3
module Polyfill::V2_6::Array
  # source://polyfill//lib/polyfill/v2_6/array.rb#4
  def difference(*arrays); end

  # source://polyfill//lib/polyfill/v2_6/array.rb#10
  def to_h; end

  # source://polyfill//lib/polyfill/v2_6/array.rb#34
  def union(*arrays); end
end

# source://polyfill//lib/polyfill/v2_6/enumerable.rb#3
module Polyfill::V2_6::Enumerable
  # source://polyfill//lib/polyfill/v2_6/enumerable.rb#4
  def to_h; end
end

# source://polyfill//lib/polyfill/v2_6/hash.rb#3
module Polyfill::V2_6::Hash
  # source://polyfill//lib/polyfill/v2_6/hash.rb#28
  def merge(*args); end

  # source://polyfill//lib/polyfill/v2_6/hash.rb#40
  def merge!(*args); end

  # source://polyfill//lib/polyfill/v2_6/hash.rb#4
  def to_h; end

  # source://polyfill//lib/polyfill/v2_6/hash.rb#52
  def update(*args); end
end

# source://polyfill//lib/polyfill/v2_6/kernel.rb#3
module Polyfill::V2_6::Kernel
  # source://polyfill//lib/polyfill/v2_6/kernel.rb#6
  def Complex(*args, exception: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_6/kernel.rb#21
  def Float(arg, exception: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_6/kernel.rb#31
  def Integer(arg, exception: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_6/kernel.rb#41
  def Rational(*args, exception: T.unsafe(nil)); end

  # source://polyfill//lib/polyfill/v2_6/kernel.rb#51
  def then; end
end

# source://polyfill//lib/polyfill/v2_6/open_struct.rb#5
module Polyfill::V2_6::OpenStruct
  # source://polyfill//lib/polyfill/v2_6/open_struct.rb#6
  def to_h; end
end

# source://polyfill//lib/polyfill/v2_6/string.rb#3
module Polyfill::V2_6::String
  # source://polyfill//lib/polyfill/v2_6/string.rb#4
  def split(*_arg0); end
end

# source://polyfill//lib/polyfill/v2_6/struct.rb#3
module Polyfill::V2_6::Struct
  # source://polyfill//lib/polyfill/v2_6/struct.rb#4
  def to_h; end
end

# source://polyfill//lib/polyfill/version.rb#2
Polyfill::VERSION = T.let(T.unsafe(nil), Gem::Version)
