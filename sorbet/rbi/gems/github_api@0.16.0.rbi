# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github_api` gem.
# Please instead update this file by running `bin/tapioca gem github_api`.

# source://github_api//lib/github_api/core_ext/array.rb#3
class Array
  include ::Enumerable

  # Returns a new arrray with keys removed
  #
  # source://github_api//lib/github_api/core_ext/array.rb#7
  def except(*keys); end

  # Similar to except but modifies self
  #
  # source://github_api//lib/github_api/core_ext/array.rb#13
  def except!(*items); end
end

# source://activesupport/7.0.4/lib/active_support/core_ext/array/deprecated_conversions.rb#4
Array::NOT_SET = T.let(T.unsafe(nil), Object)

# source://github_api//lib/github_api/ext/faraday.rb#3
module Faraday
  class << self
    # source://faraday/0.9.2/lib/faraday.rb#231
    def const_missing(name); end

    # source://faraday/0.9.2/lib/faraday.rb#29
    def default_adapter; end

    # source://faraday/0.9.2/lib/faraday.rb#88
    def default_adapter=(adapter); end

    # source://faraday/0.9.2/lib/faraday.rb#110
    def default_connection; end

    # source://faraday/0.9.2/lib/faraday.rb#35
    def default_connection=(_arg0); end

    # source://faraday/0.9.2/lib/faraday.rb#117
    def default_connection_options; end

    # source://faraday/0.9.2/lib/faraday.rb#38
    def default_connection_options=(_arg0); end

    # source://faraday/0.9.2/lib/faraday.rb#25
    def lib_path; end

    # source://faraday/0.9.2/lib/faraday.rb#25
    def lib_path=(_arg0); end

    # source://faraday/0.9.2/lib/faraday.rb#67
    def new(url = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://faraday/0.9.2/lib/faraday.rb#78
    def require_lib(*libs); end

    # source://faraday/0.9.2/lib/faraday.rb#78
    def require_libs(*libs); end

    # source://faraday/0.9.2/lib/faraday.rb#22
    def root_path; end

    # source://faraday/0.9.2/lib/faraday.rb#22
    def root_path=(_arg0); end

    private

    # source://faraday/0.9.2/lib/faraday.rb#98
    def method_missing(name, *args, &block); end
  end
end

# source://faraday/0.9.2/lib/faraday/upload_io.rb#66
Faraday::Parts = Multipart::Post::Parts

# source://faraday/0.9.2/lib/faraday.rb#132
Faraday::Timer = Timeout

# source://faraday/0.9.2/lib/faraday/upload_io.rb#65
Faraday::UploadIO = Multipart::Post::UploadIO

# source://github_api//lib/github_api/ext/faraday.rb#4
module Faraday::Utils
  # source://faraday/0.9.2/lib/faraday/utils.rb#254
  def URI(url); end

  # source://github_api//lib/github_api/ext/faraday.rb#20
  def build_nested_query(value, prefix = T.unsafe(nil), encoder = T.unsafe(nil)); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#175
  def build_query(params); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#299
  def deep_merge(source, hash); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#287
  def deep_merge!(target, hash); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#204
  def default_params_encoder; end

  # source://faraday/0.9.2/lib/faraday/utils.rb#264
  def default_uri_parser; end

  # source://faraday/0.9.2/lib/faraday/utils.rb#271
  def default_uri_parser=(parser); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#185
  def escape(s); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#213
  def normalize_params(params, name, v = T.unsafe(nil)); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#280
  def normalize_path(url); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#200
  def parse_nested_query(query); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#196
  def parse_query(query); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#191
  def unescape(s); end

  protected

  # source://faraday/0.9.2/lib/faraday/utils.rb#305
  def sort_query_params(query); end

  class << self
    # source://faraday/0.9.2/lib/faraday/utils.rb#209
    def default_params_encoder=(_arg0); end
  end
end

# source://faraday/0.9.2/lib/faraday/utils.rb#193
Faraday::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://faraday/0.9.2/lib/faraday/utils.rb#183
Faraday::Utils::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

# source://github_api//lib/github_api/ext/faraday.rb#6
class Faraday::Utils::ParamsHash < ::Hash
  # source://faraday/0.9.2/lib/faraday/utils.rb#120
  def [](key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#124
  def []=(key, value); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#128
  def delete(key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#132
  def has_key?(key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#132
  def include?(key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#132
  def key?(key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#132
  def member?(key); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#148
  def merge(params); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#140
  def merge!(params); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#157
  def merge_query(query, encoder = T.unsafe(nil)); end

  # source://github_api//lib/github_api/ext/faraday.rb#7
  def params_encoder(encoder = T.unsafe(nil)); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#152
  def replace(other); end

  # source://github_api//lib/github_api/ext/faraday.rb#15
  def to_query(encoder = T.unsafe(nil)); end

  # source://faraday/0.9.2/lib/faraday/utils.rb#140
  def update(params); end

  private

  # source://faraday/0.9.2/lib/faraday/utils.rb#170
  def convert_key(key); end
end

# source://faraday/0.9.2/lib/faraday.rb#17
Faraday::VERSION = T.let(T.unsafe(nil), String)

# :nodoc
#
# source://github_api//lib/github_api/version.rb#3
module Github
  extend ::Github::ClassMethods

  mixes_in_class_methods ::Github::ClassMethods

  class << self
    # Default middleware stack that uses default adapter as specified
    # by configuration setup
    #
    # @api private
    # @return [Proc]
    #
    # source://github_api//lib/github_api.rb#43
    def default_middleware(options = T.unsafe(nil)); end

    # Displays deprecation message to the user.
    # Each message is printed once.
    #
    # source://github_api//lib/github_api/deprecation.rb#17
    def deprecate(method, alternate_method = T.unsafe(nil)); end

    # source://github_api//lib/github_api/deprecation.rb#11
    def deprecation_tracker; end

    # Sets the attribute deprecation_tracker
    #
    # @param value the value to set the attribute deprecation_tracker to.
    #
    # source://github_api//lib/github_api/deprecation.rb#9
    def deprecation_tracker=(_arg0); end

    # @private
    #
    # source://github_api//lib/github_api.rb#21
    def included(base); end

    # Delegate to Github::Client
    #
    # @api private
    #
    # source://github_api//lib/github_api.rb#50
    def method_missing(method_name, *args, &block); end

    # Alias for Github::Client.new
    #
    # @api public
    # @param options [Hash] the configuration options
    # @return [Github::Client]
    #
    # source://github_api//lib/github_api.rb#33
    def new(options = T.unsafe(nil), &block); end

    # @return [Boolean]
    #
    # source://github_api//lib/github_api.rb#60
    def respond_to?(method_name, include_private = T.unsafe(nil)); end

    # source://github_api//lib/github_api/deprecation.rb#34
    def warn_deprecation(message); end
  end
end

# Responsible for providing inspection of api methods
#
# source://github_api//lib/github_api/api/config/property.rb#4
class Github::API
  include ::Github::Constants
  include ::Github::Authorization
  include ::Github::MimeType
  include ::Github::Request::Verbs
  include ::Github::RateLimit
  extend ::Github::ClassMethods

  # Create new API
  #
  # @api public
  # @return [API] a new instance of API
  #
  # source://github_api//lib/github_api/api.rb#46
  def initialize(options = T.unsafe(nil), &block); end

  # source://github_api//lib/github_api/api.rb#27
  def adapter; end

  # source://github_api//lib/github_api/api.rb#36
  def adapter=(arg); end

  # Finds api methods in a class
  #
  # @api private
  # @param klass [Class] The klass to inspect for methods.
  #
  # source://github_api//lib/github_api/api/actions.rb#32
  def api_methods_in(klass); end

  # Acts as setter and getter for api requests arguments parsing.
  #
  # Returns Arguments instance.
  #
  # source://github_api//lib/github_api/api.rb#260
  def arguments(args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://github_api//lib/github_api/api.rb#29
  def auto_pagination; end

  # source://github_api//lib/github_api/api.rb#36
  def auto_pagination=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def basic_auth; end

  # source://github_api//lib/github_api/api.rb#36
  def basic_auth=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def client_id; end

  # source://github_api//lib/github_api/api.rb#36
  def client_id=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def client_secret; end

  # source://github_api//lib/github_api/api.rb#36
  def client_secret=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def connection_options; end

  # source://github_api//lib/github_api/api.rb#36
  def connection_options=(arg); end

  # Returns the value of attribute current_options.
  #
  # source://github_api//lib/github_api/api.rb#31
  def current_options; end

  # Sets the attribute current_options
  #
  # @param value the value to set the attribute current_options to.
  #
  # source://github_api//lib/github_api/api.rb#31
  def current_options=(_arg0); end

  # Disable following redirects inside a block
  #
  # @api public
  #
  # source://github_api//lib/github_api/api.rb#85
  def disable_redirects; end

  # source://github_api//lib/github_api/api.rb#27
  def endpoint; end

  # source://github_api//lib/github_api/api.rb#36
  def endpoint=(arg); end

  # Execute action
  #
  # @api private
  # @param action [Symbol]
  #
  # source://github_api//lib/github_api/api.rb#233
  def execute(action, *args, &block); end

  # Extract login and password from basic_auth parameter
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#73
  def extract_basic_auth(auth); end

  # Filter callbacks based on kind
  #
  # @api private
  # @param kind [Symbol] one of :before or :after
  # @return [Array[Hash]]
  #
  # source://github_api//lib/github_api/api.rb#211
  def filter_callbacks(kind, action_name); end

  # source://github_api//lib/github_api/api.rb#27
  def follow_redirects; end

  # source://github_api//lib/github_api/api.rb#36
  def follow_redirects=(arg); end

  # source://github_api//lib/github_api/api.rb#29
  def jsonp_callback; end

  # source://github_api//lib/github_api/api.rb#29
  def jsonp_callback=(_arg0); end

  # source://github_api//lib/github_api/api.rb#27
  def login; end

  # source://github_api//lib/github_api/api.rb#36
  def login=(arg); end

  # Responds to attribute query or attribute clear
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#245
  def method_missing(method_name, *args, &block); end

  # source://github_api//lib/github_api/api.rb#27
  def mime_type; end

  # source://github_api//lib/github_api/api.rb#36
  def mime_type=(arg); end

  # Finds methods included through class modules
  #
  # @api private
  # @param klass [Class] The klass to inspect for methods.
  #
  # source://github_api//lib/github_api/api/actions.rb#49
  def module_methods_in(klass); end

  # source://github_api//lib/github_api/api.rb#27
  def oauth_token; end

  # source://github_api//lib/github_api/api.rb#36
  def oauth_token=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def org; end

  # source://github_api//lib/github_api/api.rb#36
  def org=(arg); end

  # source://github_api//lib/github_api/api.rb#29
  def page; end

  # source://github_api//lib/github_api/api.rb#29
  def page=(_arg0); end

  # source://github_api//lib/github_api/api.rb#27
  def password; end

  # source://github_api//lib/github_api/api.rb#36
  def password=(arg); end

  # source://github_api//lib/github_api/api.rb#29
  def per_page; end

  # source://github_api//lib/github_api/api.rb#36
  def per_page=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def repo; end

  # source://github_api//lib/github_api/api.rb#36
  def repo=(arg); end

  # Run all callbacks associated with this action
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#222
  def run_callbacks(action_name, &block); end

  # Set a configuration option for a given namespace
  #
  # @api public
  # @param option [String]
  # @param value [Object]
  # @param ignore_setter [Boolean]
  # @raise [ArgumentError]
  # @return [self]
  #
  # source://github_api//lib/github_api/api.rb#277
  def set(option, value = T.unsafe(nil), ignore_setter = T.unsafe(nil), &block); end

  # source://github_api//lib/github_api/api.rb#27
  def site; end

  # source://github_api//lib/github_api/api.rb#36
  def site=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def ssl; end

  # source://github_api//lib/github_api/api.rb#36
  def ssl=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def stack; end

  # source://github_api//lib/github_api/api.rb#36
  def stack=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def upload_endpoint; end

  # source://github_api//lib/github_api/api.rb#36
  def upload_endpoint=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def user; end

  # source://github_api//lib/github_api/api.rb#36
  def user=(arg); end

  # source://github_api//lib/github_api/api.rb#27
  def user_agent; end

  # source://github_api//lib/github_api/api.rb#36
  def user_agent=(arg); end

  # Call block with argument
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#65
  def yield_or_eval(&block); end

  private

  # Define setters and getters
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#359
  def define_accessors(option, value); end

  # Dynamically define a method for setting request option
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#370
  def define_singleton_method(method_name, content = T.unsafe(nil)); end

  # Set multiple options
  #
  # @api private
  #
  # source://github_api//lib/github_api/api.rb#349
  def set_options(options); end

  class << self
    # List of after callbacks
    #
    # @api public
    #
    # source://github_api//lib/github_api/api.rb#102
    def after_callbacks; end

    # After request filter
    #
    # @api public
    #
    # source://github_api//lib/github_api/api.rb#116
    def after_request(callback, params = T.unsafe(nil)); end

    # List of before callbacks
    #
    # @api public
    #
    # source://github_api//lib/github_api/api.rb#95
    def before_callbacks; end

    # Before request filter
    #
    # @api public
    #
    # source://github_api//lib/github_api/api.rb#109
    def before_request(callback, params = T.unsafe(nil)); end

    # source://github_api//lib/github_api/api.rb#170
    def clear_request_methods!; end

    # Returns all API public methods for a given class.
    #
    # @api public
    # @return [nil]
    #
    # source://github_api//lib/github_api/api/actions.rb#11
    def extend_with_actions(child_class); end

    # source://github_api//lib/github_api/api.rb#151
    def extra_methods; end

    # Extracts class name from options
    #
    # @api private
    # @example
    #   extract_class_name(:stats, class_name: :statistics)
    # @option options
    # @option options
    # @param options [Hash]
    # @return [String]
    #
    # source://github_api//lib/github_api/api.rb#336
    def extract_class_name(name, options); end

    # @private
    #
    # source://github_api//lib/github_api/api.rb#129
    def inherited(child_class); end

    # source://github_api//lib/github_api/api.rb#145
    def internal_methods; end

    # @private
    #
    # source://github_api//lib/github_api/api.rb#174
    def method_added(method_name); end

    # Defines a namespace
    #
    # @api public
    # @example
    #   namespace :scopes
    # @param names [Array[Symbol]] the name for the scope
    # @return [self]
    #
    # source://github_api//lib/github_api/api.rb#305
    def namespace(*names); end

    # Find all the api methods that should be considred by
    # request callbacks.
    #
    # @api private
    # @return [Set]
    #
    # source://github_api//lib/github_api/api.rb#161
    def request_methods; end

    # Returns the value of attribute root.
    #
    # source://github_api//lib/github_api/api.rb#121
    def root; end

    # source://github_api//lib/github_api/api.rb#125
    def root!; end

    # Returns the value of attribute root.
    #
    # source://github_api//lib/github_api/api.rb#121
    def root?; end
  end
end

# A class responsible for handilng request arguments
#
# source://github_api//lib/github_api/api/arguments.rb#6
class Github::API::Arguments
  include ::Github::Normalizer
  include ::Github::ParameterFilter
  include ::Github::Validations::Presence
  include ::Github::Validations::Format
  include ::Github::Validations::Token
  include ::Github::Validations::Required
  include ::Github::Validations

  # Initialize an Arguments
  #
  # @api public
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Arguments] a new instance of Arguments
  #
  # source://github_api//lib/github_api/api/arguments.rb#33
  def initialize(options = T.unsafe(nil), &block); end

  # Hash like access to request arguments
  #
  # @api public
  # @param property [String, Symbol] the property name
  #
  # source://github_api//lib/github_api/api/arguments.rb#66
  def [](property); end

  # source://github_api//lib/github_api/api/arguments.rb#70
  def []=(property, value); end

  # The request api
  #
  # source://github_api//lib/github_api/api/arguments.rb#20
  def api; end

  # Check if required keys are present inside parameters hash.
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#121
  def assert_required(*required); end

  # Check if parameters match expected values.
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#129
  def assert_values(values, key = T.unsafe(nil)); end

  # source://github_api//lib/github_api/api/arguments.rb#74
  def method_missing(method_name, *args, &block); end

  # Specify optional attribute(s)
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#57
  def optional(*attrs, &block); end

  # Parameters passed to request
  #
  # source://github_api//lib/github_api/api/arguments.rb#14
  def params; end

  # Parse arguments to allow for flexible api calls
  #
  # Arguments can be part of parameters hash or be simple string arguments.
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#91
  def parse(*args, &block); end

  # Remove unknown keys from parameters hash.
  #
  # = Parameters
  #  :recursive - boolean that toggles whether nested filtering should be applied
  #
  # source://github_api//lib/github_api/api/arguments.rb#113
  def permit(keys, key = T.unsafe(nil), options = T.unsafe(nil)); end

  # The remaining unparsed arguments
  #
  # source://github_api//lib/github_api/api/arguments.rb#17
  def remaining; end

  # Specify required attribute(s)
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#47
  def require(*attrs, &block); end

  # Specify required attribute(s)
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/arguments.rb#47
  def required(*attrs, &block); end

  private

  # Check if api has non-empty property
  #
  # @api private
  # @param property [String] the property to check
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/api/arguments.rb#212
  def api_property?(property); end

  # Check if required arguments are present.
  #
  # source://github_api//lib/github_api/api/arguments.rb#219
  def check_requirement!(*args); end

  # Find auto_pagination parameter in options hash
  #
  # source://github_api//lib/github_api/api/arguments.rb#233
  def extract_pagination(options); end

  # Parse array arguments and assign in order to required properties
  #
  # @api public
  # @param args [Array[Object]]
  # @raise ArgumentError
  # @return [nil]
  #
  # source://github_api//lib/github_api/api/arguments.rb#145
  def parse_array(*args); end

  # Remove required arguments from parameters and
  # validate their presence(if not nil or empty string).
  #
  # @api private
  # @param options [Hash[String]]
  # @return [nil]
  #
  # source://github_api//lib/github_api/api/arguments.rb#161
  def parse_hash(options); end

  # Remove required property from hash
  #
  # @api private
  # @param options [Hash[String]] the options to check
  # @param key [String] the key to remove
  # @param val [String] the value to assign
  #
  # source://github_api//lib/github_api/api/arguments.rb#179
  def remove_required(options, key, val); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/api/arguments.rb#82
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  # Update required property from globals if not present
  #
  # @api private
  # @return [Hash[String]]
  #
  # source://github_api//lib/github_api/api/arguments.rb#192
  def update_required_from_global; end

  # Evaluate a block
  #
  # @api privte
  #
  # source://github_api//lib/github_api/api/arguments.rb#242
  def yield_or_eval(&block); end
end

# source://github_api//lib/github_api/api/arguments.rb#11
Github::API::Arguments::AUTO_PAGINATION = T.let(T.unsafe(nil), String)

# A base class for constructing api configuration
#
# source://github_api//lib/github_api/api/config/property.rb#5
class Github::API::Config
  # @return [Config] a new instance of Config
  #
  # source://github_api//lib/github_api/api/config.rb#66
  def initialize(&block); end

  # Provide access to properties
  #
  # @api private
  # @example
  #   config.call do |config|
  #   config.adapter = :net_http
  #   end
  # @return [self]
  #
  # source://github_api//lib/github_api/api/config.rb#101
  def call(&block); end

  # Fetach all the properties and their values
  #
  # @api public
  # @return [Hash[Symbol]]
  #
  # source://github_api//lib/github_api/api/config.rb#83
  def fetch(value = T.unsafe(nil)); end

  # source://github_api//lib/github_api/api/config.rb#70
  def property_names; end

  class << self
    # @private
    #
    # source://github_api//lib/github_api/api/config.rb#59
    def inherited(descendant); end

    # Defines a property on an object's class or instance
    #
    # @api public
    # @example
    #   class Configuration < Api::Config
    #   property :adapter, default: :net_http
    #   property :user, required: true
    #   end
    # @param name [Symbol] the name of a property
    # @param options [#to_hash] the extra options
    # @return [self]
    #
    # source://github_api//lib/github_api/api/config.rb#29
    def property(name, options = T.unsafe(nil)); end

    # Check if property is defined
    #
    # @api public
    # @param name [Symbol] the name to check
    # @return [Boolean]
    #
    # source://github_api//lib/github_api/api/config.rb#49
    def property?(name); end

    # source://github_api//lib/github_api/api/config.rb#74
    def property_names; end

    # Returns the value of attribute property_set.
    #
    # source://github_api//lib/github_api/api/config.rb#54
    def property_set; end

    # source://github_api//lib/github_api/api/config.rb#35
    def update_subclasses(name, options); end
  end
end

# Property objects provide an interface for configuration options
#
# source://github_api//lib/github_api/api/config/property.rb#8
class Github::API::Config::Property
  # @return [Property] a new instance of Property
  #
  # source://github_api//lib/github_api/api/config/property.rb#14
  def initialize(name, options); end

  # Returns the value of attribute default.
  #
  # source://github_api//lib/github_api/api/config/property.rb#11
  def default; end

  # @api private
  #
  # source://github_api//lib/github_api/api/config/property.rb#22
  def define_accessor_methods(properties); end

  # Returns the value of attribute name.
  #
  # source://github_api//lib/github_api/api/config/property.rb#10
  def name; end

  # Returns the value of attribute required.
  #
  # source://github_api//lib/github_api/api/config/property.rb#12
  def required; end
end

# Class responsible for storing configuration properties
#
# source://github_api//lib/github_api/api/config/property_set.rb#8
class Github::API::Config::PropertySet
  include ::Enumerable

  # Initialize an PropertySet
  #
  # @api private
  # @param parent [Object]
  # @param properties [Set]
  # @return [undefined]
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#23
  def initialize(parent = T.unsafe(nil), properties = T.unsafe(nil)); end

  # Adds property to the set
  #
  # @api public
  # @example
  #   properties_set << property
  # @param property [Property]
  # @return [self]
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#54
  def <<(property); end

  # Access property by name
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#64
  def [](name); end

  # Set property value by name
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#72
  def []=(name, property); end

  # @api private
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#102
  def define_reader_method(property, method_name, visibility); end

  # @api private
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#109
  def define_writer_method(property, method_name, visibility); end

  # Iterate over properties
  #
  # @api public
  # @return [self]
  # @yield [property]
  # @yieldparam property [Property]
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#38
  def each; end

  # Check if properties exist
  #
  # @api public
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#97
  def empty?; end

  # Access property by name
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#64
  def fetch(name); end

  # Returns the value of attribute parent.
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#11
  def parent; end

  # Returns the value of attribute properties.
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#13
  def properties; end

  # Convert properties to a hash of property names and
  # corresponding values
  #
  # @api public
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#87
  def to_hash; end

  # Update map with index
  #
  # @api private
  #
  # source://github_api//lib/github_api/api/config/property_set.rb#79
  def update_map(name, property); end
end

# source://github_api//lib/github_api/api/factory.rb#7
class Github::API::Factory
  class << self
    # Convert name to constant
    #
    # source://github_api//lib/github_api/api/factory.rb#25
    def convert_to_constant(classes); end

    # Passes configuration options to instantiated class
    #
    # source://github_api//lib/github_api/api/factory.rb#18
    def create_instance(klass, options, &block); end

    # Instantiates a new github api object
    #
    # @raise [ArgumentError]
    #
    # source://github_api//lib/github_api/api/factory.rb#11
    def new(klass, options = T.unsafe(nil), &block); end
  end
end

# source://github_api//lib/github_api/authorization.rb#4
module Github::Authorization
  # Strategy token
  #
  # source://github_api//lib/github_api/authorization.rb#19
  def auth_code; end

  # Check whether authentication credentials are present
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/authorization.rb#47
  def authenticated?; end

  # Select authentication parameters
  #
  # @api public
  #
  # source://github_api//lib/github_api/authorization.rb#59
  def authentication; end

  # Sends authorization request to GitHub.
  # = Parameters
  # * <tt>:redirect_uri</tt> - Optional string.
  # * <tt>:scope</tt> - Optional string. Comma separated list of scopes.
  #   Available scopes:
  #   * (no scope) - public read-only access (includes public user profile info, public repo info, and gists).
  #   * <tt>user</tt> - DB read/write access to profile info only.
  #   * <tt>public_repo</tt> - DB read/write access, and Git read access to public repos.
  #   * <tt>repo</tt> - DB read/write access, and Git read access to public and private repos.
  #   * <tt>gist</tt> - write access to gists.
  #
  # source://github_api//lib/github_api/authorization.rb#35
  def authorize_url(params = T.unsafe(nil)); end

  # Check whether basic authentication credentials are present
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/authorization.rb#52
  def basic_authed?; end

  # Setup OAuth2 instance
  #
  # source://github_api//lib/github_api/authorization.rb#7
  def client; end

  # Makes request to token endpoint and retrieves access token value
  #
  # source://github_api//lib/github_api/authorization.rb#41
  def get_token(authorization_code, params = T.unsafe(nil)); end

  private

  # @raise [ArgumentError]
  #
  # source://github_api//lib/github_api/authorization.rb#69
  def _verify_client; end
end

# source://github_api//lib/github_api.rb#67
module Github::ClassMethods
  # The client configuration
  #
  # @api public
  # @return [Configuration]
  #
  # source://github_api//lib/github_api.rb#87
  def config; end

  # The client configuration
  #
  # @api public
  # @return [Configuration]
  #
  # source://github_api//lib/github_api.rb#87
  def configuration; end

  # Configure options
  #
  # @api public
  # @example
  #   Github.configure do |c|
  #   c.some_option = true
  #   end
  # @return [nil]
  # @yield the configuration block
  # @yieldparam configuration [Github::Configuration] the configuration instance
  #
  # source://github_api//lib/github_api.rb#106
  def configure; end

  # Requires internal libraries
  #
  # @param prefix [String] the relative path prefix
  # @param libs [Array[String]] the array of libraries to require
  # @return [self]
  #
  # source://github_api//lib/github_api.rb#76
  def require_all(prefix, *libs); end
end

# source://github_api//lib/github_api/client.rb#4
class Github::Client < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def activity_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def activity_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def auth(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def auth_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def auth_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def authorizations_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def authorizations_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def emojis(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def emojis_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def emojis_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def gists(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def gists_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def gists_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_data(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_data_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def git_data_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_ignore(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_ignore_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_ignore_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def git_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def gitignore(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def gitignore_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def gitignore_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def issues_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def markdown(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def markdown_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def markdown_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def meta(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def meta_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def meta_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def oauth(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def oauth_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def oauth_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def octocat(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def octocat_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def octocat_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def organizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def organizations_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def organizations_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def orgs_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def orgs_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pull_requests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pull_requests_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def pull_requests_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pulls(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pulls_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pulls_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def repos_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def say(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def say_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def say_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def scopes(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def scopes_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def scopes_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def search(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def search_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def search_without_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def users_with_callback_client(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def users_without_callback_client(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity.rb#4
class Github::Client::Activity < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def events_with_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def events_without_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def feeds(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def feeds_with_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def feeds_without_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def notifications_with_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def notifications_without_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def starring(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def starring_with_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def starring_without_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def watching_with_callback_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def watching_without_callback_activity(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity/events.rb#14
class Github::Client::Activity::Events < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def issue(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issue_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issue_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issue_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issue_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#62
  def issue_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_issue_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_issue_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_issue_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_org_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_org_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_org_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_organization_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_organization_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_organization_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_orgs_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_orgs_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_public_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repo_network_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repo_network_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repo_network_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_network_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_network_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repository_network_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_org_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_organization_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_organization_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_organization_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_performed(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_performed_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_performed_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_received(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_received_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_user_received_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def network(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def network_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#87
  def network_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def org(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def org_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#113
  def org_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def organization(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def organization_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def organization_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def performed(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def performed_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#186
  def performed_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def public(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def public_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def public_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def public_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def public_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#15
  def public_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def received(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def received_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#148
  def received_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_network(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_network_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repo_network_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_events_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_events_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_network(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_network_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_network_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repository_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#38
  def repository_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def user_org(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_org_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/activity/events.rb#219
  def user_org_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def user_organization(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_organization_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_organization_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_performed(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_performed_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_performed_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_received(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_received_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def user_received_without_callback_events(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity/feeds.rb#13
class Github::Client::Activity::Feeds < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/client/activity/feeds.rb#35
  def get_without_callback_feeds(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_feeds(*args, &block); end

  # source://github_api//lib/github_api/client/activity/feeds.rb#14
  def list_without_callback_feeds(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity/notifications.rb#35
class Github::Client::Activity::Notifications < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/client/activity/notifications.rb#157
  def create_without_callback_notifications(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/client/activity/notifications.rb#172
  def delete_without_callback_notifications(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/client/activity/notifications.rb#61
  def get_without_callback_notifications(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/client/activity/notifications.rb#36
  def list_without_callback_notifications(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def mark(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def mark_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/client/activity/notifications.rb#102
  def mark_without_callback_notifications(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_notifications(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribed?(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity/starring.rb#17
class Github::Client::Activity::Starring < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/client/activity/starring.rb#18
  def list_without_callback_starring(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def star(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def star_with_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/client/activity/starring.rb#102
  def star_without_callback_starring(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def starred(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def starred_with_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/client/activity/starring.rb#51
  def starred_without_callback_starring(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def starring?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unstar(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unstar_with_callback_starring(*args, &block); end

  # source://github_api//lib/github_api/client/activity/starring.rb#122
  def unstar_without_callback_starring(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/activity/watching.rb#16
class Github::Client::Activity::Watching < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#93
  def create_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#112
  def delete_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#17
  def list_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_without_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribed?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_without_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unwatch(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unwatch_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#168
  def unwatch_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def watch(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def watch_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#151
  def watch_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def watched(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def watched_with_callback_watching(*args, &block); end

  # source://github_api//lib/github_api/client/activity/watching.rb#41
  def watched_without_callback_watching(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def watching?(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# OAuth Authorizations API
#
# source://github_api//lib/github_api/client/authorizations.rb#5
class Github::Client::Authorizations < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List authorizations
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.auth.list
  #   github.auth.list { |auth| ... }
  # @see https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def app(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def app_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def app_without_callback_authorizations(*args, &block); end

  # Create a new authorization
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.oauth.create scopes: ["public_repo"], note: 'amdmin script'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations.rb#75
  def create_without_callback_authorizations(*args); end

  # Delete an authorization
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.oauth.delete 'authorization-id'
  # @see https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations.rb#125
  def delete_without_callback_authorizations(*args); end

  # Update an existing authorization
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.oauth.update "authorization-id", add_scopes: ["repo"]
  # @option inputs
  # @option inputs
  # @option params
  # @option inputs
  # @option inputs
  # @param inputs [Hash]
  # @param params [Hash] a customizable set of options
  # @see https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_without_callback_authorizations(*args, &block); end

  # Get a single authorization
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.oauth.get 'authorization-id'
  # @return [ResponseWrapper]
  # @see https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_authorizations(*args, &block); end

  # Get a single authorization
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.oauth.get 'authorization-id'
  # @return [ResponseWrapper]
  # @see https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations.rb#43
  def get_without_callback_authorizations(*args); end

  # List authorizations
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.auth.list
  #   github.auth.list { |auth| ... }
  # @see https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations.rb#22
  def list_without_callback_authorizations(*args); end

  # Delete an authorization
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.oauth.delete 'authorization-id'
  # @see https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_authorizations(*args, &block); end

  # Update an existing authorization
  #
  # @api public
  # @example
  #   github = Github.new basic_auth: 'login:password'
  #   github.oauth.update "authorization-id", add_scopes: ["repo"]
  # @option inputs
  # @option inputs
  # @option params
  # @option inputs
  # @option inputs
  # @param inputs [Hash]
  # @param params [Hash] a customizable set of options
  # @see https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
  #
  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_authorizations(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations.rb#108
  def update_without_callback_authorizations(*args); end

  protected

  # @raise [ArgumentError]
  #
  # source://github_api//lib/github_api/client/authorizations.rb#135
  def raise_authentication_error; end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/authorizations/app.rb#24
class Github::Client::Authorizations::App < ::Github::Client::Authorizations
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def check(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def check_with_callback_app(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations/app.rb#43
  def check_without_callback_app(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_app(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations/app.rb#25
  def create_without_callback_app(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_app(*args, &block); end

  # source://github_api//lib/github_api/client/authorizations/app.rb#71
  def delete_without_callback_app(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_app(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_app(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def revoke(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def revoke_with_callback_app(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def revoke_without_callback_app(*args, &block); end

  protected

  # source://github_api//lib/github_api/client/authorizations/app.rb#91
  def raise_app_authentication_error; end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/emojis.rb#10
class Github::Client::Emojis < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Lists all the emojis.
  #
  # @api public
  # @example
  #   Github.emojis.list
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_emojis(*args, &block); end

  # source://github_api//lib/github_api/client/emojis.rb#11
  def list_without_callback_emojis(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/gists.rb#4
class Github::Client::Gists < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List a user's gists
  #
  # List the authenticated user’s gists or if called anonymously,
  # this will returns all public gists
  #
  # List all public gists
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.list user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.gists.list
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#list-a-users-gists
  # @see https://developer.github.com/v3/gists/#list-all-public-gists github = Github.new
  #   github.gists.list :public
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def comments_without_callback_gists(*args, &block); end

  # List gist commits
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.commits 'gist-id'
  # @see https://developer.github.com/v3/gists/#list-gist-commits
  #
  # source://github_api//lib/github_api/api.rb#195
  def commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#187
  def commits_without_callback_gists(*args); end

  # Create a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.create
  #   description: 'the description for this gist',
  #   public: true,
  #   files: {
  #   'file1.txt' => {
  #   content: 'String file contents'
  #   }
  #   }
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#create-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#129
  def create_without_callback_gists(*args); end

  # Delete a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.delete 'gist-id'
  # @see https://developer.github.com/v3/gists/#delete-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#281
  def delete_without_callback_gists(*args); end

  # Edit a gist
  #
  # @api public
  # @option [String]
  # @option [Hash]
  # @param [String] [Hash] a customizable set of options
  # @param params [Hash]
  # @param [Hash] [Hash] a customizable set of options
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#edit-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#172
  def edit_without_callback_gists(*args); end

  # Get a single gist
  #
  # Get a specific revision of gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.get 'gist-id'
  # @example
  #   github = Github.new
  #   github.gists.get 'gist-id', sha: '
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#get-a-single-gist
  # @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_gists(*args, &block); end

  # Fork a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.fork 'gist-id'
  #
  # source://github_api//lib/github_api/api.rb#195
  def fork(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def fork_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#249
  def fork_without_callback_gists(*args); end

  # List gist forks
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.forks 'gist-id'
  # @see https://developer.github.com/v3/gists/#list-gist-forks
  #
  # source://github_api//lib/github_api/api.rb#195
  def forks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def forks_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#264
  def forks_without_callback_gists(*args); end

  # Get a single gist
  #
  # Get a specific revision of gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.get 'gist-id'
  # @example
  #   github = Github.new
  #   github.gists.get 'gist-id', sha: '
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#get-a-single-gist
  # @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#88
  def get_without_callback_gists(*args); end

  # List a user's gists
  #
  # List the authenticated user’s gists or if called anonymously,
  # this will returns all public gists
  #
  # List all public gists
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.list user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.gists.list
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#list-a-users-gists
  # @see https://developer.github.com/v3/gists/#list-all-public-gists github = Github.new
  #   github.gists.list :public
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#36
  def list_without_callback_gists(*args); end

  # Star a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.star 'gist-id'
  # @see https://developer.github.com/v3/gists/#star-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def star(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def star_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#204
  def star_without_callback_gists(*args); end

  # List the authenticated user's starred gists
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.gists.starred
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/#list-starred-gists
  #
  # source://github_api//lib/github_api/api.rb#195
  def starred(*args, &block); end

  # Check if a gist is starred
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.starred? 'gist-id'
  # @return [Boolean]
  # @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
  #
  # source://github_api//lib/github_api/api.rb#195
  def starred?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def starred_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#62
  def starred_without_callback_gists(*args); end

  # Unstar a gist
  #
  # @api public
  # @see https://developer.github.com/v3/gists/#unstar-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def unstar(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unstar_with_callback_gists(*args, &block); end

  # source://github_api//lib/github_api/client/gists.rb#219
  def unstar_without_callback_gists(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/gists/comments.rb#15
class Github::Client::Gists::Comments < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List comments on a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.list 'gist-id'
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_comments(*args, &block); end

  # Create a comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.create 'gist-id'
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/gists/comments/#create-a-comment
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/gists/comments.rb#56
  def create_without_callback_comments(*args); end

  # Delete a comment
  #
  # @api public
  # @see https://developer.github.com/v3/gists/comments/#delete-a-comment
  #
  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/gists/comments.rb#91
  def delete_without_callback_comments(*args); end

  # Edit a comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.edit 'gist-id', 'comment-id'
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/gists/comments/#edit-a-comment
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/gists/comments.rb#75
  def edit_without_callback_comments(*args); end

  # Get a single comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.get 'gist-id', 'comment-id'
  # @see https://developer.github.com/v3/gists/comments/#get-a-single-comment
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_comments(*args, &block); end

  # Get a single comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.get 'gist-id', 'comment-id'
  # @see https://developer.github.com/v3/gists/comments/#get-a-single-comment
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/gists/comments.rb#35
  def get_without_callback_comments(*args); end

  # List comments on a gist
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gists.comments.list 'gist-id'
  # @return [Hash]
  # @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/gists/comments.rb#16
  def list_without_callback_comments(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data.rb#4
class Github::Client::GitData < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def blobs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def blobs_with_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def blobs_without_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits_with_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def commits_without_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def references_with_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def references_without_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def tags_with_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def tags_without_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def trees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def trees_with_callback_gitdata(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def trees_without_callback_gitdata(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/blobs.rb#8
class Github::Client::GitData::Blobs < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_blobs(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/blobs.rb#41
  def create_without_callback_blobs(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_blobs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_blobs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_blobs(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/blobs.rb#19
  def get_without_callback_blobs(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/blobs.rb#10
Github::Client::GitData::Blobs::VALID_BLOB_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/commits.rb#4
class Github::Client::GitData::Commits < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/commits.rb#90
  def create_without_callback_commits(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/commits.rb#34
  def get_without_callback_commits(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/commits.rb#17
Github::Client::GitData::Commits::REQUIRED_COMMIT_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/commits.rb#6
Github::Client::GitData::Commits::VALID_COMMIT_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/references.rb#4
class Github::Client::GitData::References < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/references.rb#83
  def create_without_callback_references(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/references.rb#128
  def delete_without_callback_references(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/references.rb#57
  def get_without_callback_references(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/references.rb#29
  def list_without_callback_references(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_references(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_references(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/references.rb#111
  def update_without_callback_references(*args); end

  private

  # source://github_api//lib/github_api/client/git_data/references.rb#138
  def validate_reference(ref); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/references.rb#8
Github::Client::GitData::References::REQUIRED_REF_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/references.rb#6
Github::Client::GitData::References::VALID_REF_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/references.rb#10
Github::Client::GitData::References::VALID_REF_PARAM_VALUES = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/git_data/tags.rb#7
class Github::Client::GitData::Tags < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/tags.rb#84
  def create_without_callback_tags(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/tags.rb#31
  def get_without_callback_tags(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/tags.rb#9
Github::Client::GitData::Tags::VALID_TAG_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/tags.rb#20
Github::Client::GitData::Tags::VALID_TAG_PARAM_VALUES = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/git_data/trees.rb#4
class Github::Client::GitData::Trees < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_trees(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/trees.rb#101
  def create_without_callback_trees(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_trees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_trees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_trees(*args, &block); end

  # source://github_api//lib/github_api/client/git_data/trees.rb#38
  def get_without_callback_trees(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/git_data/trees.rb#6
Github::Client::GitData::Trees::VALID_TREE_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/git_data/trees.rb#17
Github::Client::GitData::Trees::VALID_TREE_PARAM_VALUES = T.let(T.unsafe(nil), Hash)

# When you create a new GitHub repository via the API, you can specify a
# .gitignore template to apply to the repository upon creation.
#
# source://github_api//lib/github_api/client/gitignore.rb#17
class Github::Client::Gitignore < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List all templates available to pass as an option
  # when creating a repository.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gitignore.list
  #   github.gitignore.list { |template| ... }
  # @see https://developer.github.com/v3/gitignore/#listing-available-templates
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_gitignore(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_gitignore(*args, &block); end

  # Get a single template
  #
  # Use the raw media type to get the raw contents.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gitignore.get "template-name"
  # @see https://developer.github.com/v3/gitignore/#get-a-single-template
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_gitignore(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_gitignore(*args, &block); end

  # Get a single template
  #
  # Use the raw media type to get the raw contents.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gitignore.get "template-name"
  # @see https://developer.github.com/v3/gitignore/#get-a-single-template
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_gitignore(*args, &block); end

  # source://github_api//lib/github_api/client/gitignore.rb#42
  def get_without_callback_gitignore(*args); end

  # List all templates available to pass as an option
  # when creating a repository.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.gitignore.list
  #   github.gitignore.list { |template| ... }
  # @see https://developer.github.com/v3/gitignore/#listing-available-templates
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_gitignore(*args, &block); end

  # source://github_api//lib/github_api/client/gitignore.rb#18
  def list_without_callback_gitignore(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues.rb#4
class Github::Client::Issues < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List your issues
  #
  # List all issues across all the authenticated user’s visible repositories
  # including owned repositories, member repositories,
  # and organization repositories.
  #
  # List all issues across owned and member repositories for the
  # authenticated user.
  #
  # List all issues for a given organization for the authenticated user.
  #
  # List issues for a repository
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.issues.list user: 'user-name', repo: 'repo-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list since: '2011-04-12T12:12:12Z',
  #   filter: 'created',
  #   state: 'open',
  #   labels: "bug,ui,bla",
  #   sort: 'comments',
  #   direction: 'asc'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list :user
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list org: 'org-name'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def assignees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def assignees_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def assignees_without_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def comments_without_callback_issues(*args, &block); end

  # Create an issue
  #
  # @example
  #   github = Github.new user: 'user-name', repo: 'repo-name'
  #   github.issues.create
  #   title: "Found a bug",
  #   body: "I'm having a problem with this.",
  #   assignee: "octocat",
  #   milestone: 1,
  #   labels: [
  #   "Label1",
  #   "Label2"
  #   ]
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/client/issues.rb#198
  def create_without_callback_issues(*args); end

  # Edit an issue
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.issues.edit 'user-name', 'repo-name', 'number'
  #   title: "Found a bug",
  #   body: "I'm having a problem with this.",
  #   assignee: "octocat",
  #   milestone: 1,
  #   labels": [
  #   "Label1",
  #   "Label2"
  #   ]
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/client/issues.rb#238
  def edit_without_callback_issues(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def events_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def events_without_callback_issues(*args, &block); end

  # Get a single issue
  #
  # @example
  #   github = Github.new
  #   github.issues.get 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_issues(*args, &block); end

  # Get a single issue
  #
  # @example
  #   github = Github.new
  #   github.issues.get 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/client/issues.rb#159
  def get_without_callback_issues(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def labels_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def labels_without_callback_issues(*args, &block); end

  # List your issues
  #
  # List all issues across all the authenticated user’s visible repositories
  # including owned repositories, member repositories,
  # and organization repositories.
  #
  # List all issues across owned and member repositories for the
  # authenticated user.
  #
  # List all issues for a given organization for the authenticated user.
  #
  # List issues for a repository
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.issues.list user: 'user-name', repo: 'repo-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list since: '2011-04-12T12:12:12Z',
  #   filter: 'created',
  #   state: 'open',
  #   labels: "bug,ui,bla",
  #   sort: 'comments',
  #   direction: 'asc'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list :user
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.issues.list org: 'org-name'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repo_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/client/issues.rb#148
  def list_repo_without_callback_issues(user, repo); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/client/issues.rb#123
  def list_without_callback_issues(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def milestones(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def milestones_with_callback_issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def milestones_without_callback_issues(*args, &block); end

  private

  # List issues for a repository
  #
  # def list_repo(user_name, repo_name, params)
  #
  # source://github_api//lib/github_api/api.rb#195
  def list_repo(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/assignees.rb#12
class Github::Client::Issues::Assignees < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_assignees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_assignees(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def check(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def check_with_callback_assignees(*args, &block); end

  # source://github_api//lib/github_api/client/issues/assignees.rb#32
  def check_without_callback_assignees(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_assignees(*args, &block); end

  # source://github_api//lib/github_api/client/issues/assignees.rb#13
  def list_without_callback_assignees(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/comments.rb#4
class Github::Client::Issues::Comments < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/issues/comments.rb#87
  def create_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/issues/comments.rb#138
  def delete_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/issues/comments.rb#116
  def edit_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/issues/comments.rb#60
  def get_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/issues/comments.rb#37
  def list_without_callback_comments(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/comments.rb#6
Github::Client::Issues::Comments::VALID_ISSUE_COMMENT_PARAM_NAME = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/issues/events.rb#18
class Github::Client::Issues::Events < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_events(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/issues/events.rb#40
  def get_without_callback_events(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_events(*args, &block); end

  # source://github_api//lib/github_api/client/issues/events.rb#19
  def list_without_callback_events(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/labels.rb#4
class Github::Client::Issues::Labels < ::Github::API
  # source://github_api//lib/github_api/api.rb#195
  def <<(*args, &block); end

  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#132
  def add_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#78
  def create_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#118
  def delete_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_without_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#57
  def get_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#28
  def list_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#155
  def remove_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def replace(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def replace_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#179
  def replace_without_callback_labels(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_labels(*args, &block); end

  # source://github_api//lib/github_api/client/issues/labels.rb#101
  def update_without_callback_labels(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/labels.rb#6
Github::Client::Issues::Labels::VALID_LABEL_INPUTS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/issues/milestones.rb#4
class Github::Client::Issues::Milestones < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/client/issues/milestones.rb#92
  def create_without_callback_milestones(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/client/issues/milestones.rb#138
  def delete_without_callback_milestones(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/client/issues/milestones.rb#64
  def get_without_callback_milestones(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/client/issues/milestones.rb#39
  def list_without_callback_milestones(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_milestones(*args, &block); end

  # source://github_api//lib/github_api/client/issues/milestones.rb#123
  def update_without_callback_milestones(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/issues/milestones.rb#12
Github::Client::Issues::Milestones::VALID_MILESTONE_INPUTS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/issues/milestones.rb#6
Github::Client::Issues::Milestones::VALID_MILESTONE_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/issues.rb#13
Github::Client::Issues::VALID_ISSUE_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/issues.rb#31
Github::Client::Issues::VALID_ISSUE_PARAM_VALUES = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/markdown.rb#4
class Github::Client::Markdown < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Render an arbritrary Markdown document
  #
  # = Parameters
  #  <tt>:text</tt> - Required string - The Markdown text to render
  #  <tt>:mode<tt> - Optional string - The rendering mode
  #    * <tt>markdown</tt> to render a document as plain Markdown, just
  #                        like README files are rendered.
  #    * <tt>gfm</tt> to render a document as user-content, e.g. like user
  #      comments or issues are rendered. In GFM mode, hard line breaks are
  #      always taken into account, and issue and user mentions are
  #      linked accordingly.
  #  <tt>:context<tt> - Optional string - The repository context, only taken
  #                     into account when rendering as <tt>gfm</tt>
  #
  # = Examples
  #  github = Github.new
  #  github.markdown.render
  #    "text": "Hello world github/linguist#1 **cool**, and #1!",
  #    "mode": "gfm",
  #    "context": "github/gollum"
  #
  # source://github_api//lib/github_api/api.rb#195
  def render(*args, &block); end

  # Render a Markdown document in raw mode
  #
  # = Input
  #  The raw API it not JSON-based. It takes a Markdown document as plaintext
  #  <tt>text/plain</tt> or <tt>text/x-markdown</tt> and renders it as plain
  #  Markdown without a repository context (just like a README.md file is
  #  rendered – this is the simplest way to preview a readme online)
  #
  # = Examples
  #  github = Github.new
  #  github.markdown.render_raw "Hello github/linguist#1 **cool**, and #1!",
  #    "accept": "text/plain",
  #
  # source://github_api//lib/github_api/api.rb#195
  def render_raw(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def render_raw_with_callback_markdown(*args, &block); end

  # source://github_api//lib/github_api/client/markdown.rb#50
  def render_raw_without_callback_markdown(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def render_with_callback_markdown(*args, &block); end

  # source://github_api//lib/github_api/client/markdown.rb#27
  def render_without_callback_markdown(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/meta.rb#10
class Github::Client::Meta < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Get meta information about GitHub.com, the service.
  #
  # @api public
  # @example
  #   Github.meta.get
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_meta(*args, &block); end

  # source://github_api//lib/github_api/client/meta.rb#11
  def get_without_callback_meta(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# Organizations API
#
# source://github_api//lib/github_api/client/orgs.rb#5
class Github::Client::Orgs < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List all organizations
  #
  # Lists all organizations, in the order that they were created on GitHub.
  #
  # List all public organizations for a user.
  #
  # List public and private organizations for the authenticated user.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.orgs.list :every
  # @example
  #   github = Github.new
  #   github.orgs.list user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '..'
  #   github.orgs.list
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/orgs/#list-all-organizations
  # @see https://developer.github.com/v3/orgs/#list-user-organizations
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_orgs(*args, &block); end

  # Edit organization
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.orgs.edit 'github',
  #   billing_email: "support@github.com",
  #   blog: "https://github.com/blog",
  #   company: "GitHub",
  #   email: "support@github.com",
  #   location: "San Francisco",
  #   name: "github"
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/orgs/#edit-an-organization
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/client/orgs.rb#115
  def edit_without_callback_orgs(*args); end

  # Get properties for a single organization
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.orgs.get 'github'
  # @see https://developer.github.com/v3/orgs/#get-an-organization
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_orgs(*args, &block); end

  # Get properties for a single organization
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.orgs.get 'github'
  # @see https://developer.github.com/v3/orgs/#get-an-organization
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/client/orgs.rb#79
  def get_without_callback_orgs(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def hooks_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def hooks_without_callback_orgs(*args, &block); end

  # List all organizations
  #
  # Lists all organizations, in the order that they were created on GitHub.
  #
  # List all public organizations for a user.
  #
  # List public and private organizations for the authenticated user.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.orgs.list :every
  # @example
  #   github = Github.new
  #   github.orgs.list user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '..'
  #   github.orgs.list
  # @option params
  # @param params [Hash]
  # @see https://developer.github.com/v3/orgs/#list-all-organizations
  # @see https://developer.github.com/v3/orgs/#list-user-organizations
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/client/orgs.rb#54
  def list_without_callback_orgs(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def members_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def members_without_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def memberships_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def memberships_without_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def teams_with_callback_orgs(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def teams_without_callback_orgs(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/orgs/hooks.rb#6
class Github::Client::Orgs::Hooks < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#95
  def create_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#173
  def delete_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#137
  def edit_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#38
  def get_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#20
  def list_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def ping(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def ping_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/hooks.rb#157
  def ping_without_callback_hooks(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/orgs/hooks.rb#8
Github::Client::Orgs::Hooks::REQUIRED_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/orgs/members.rb#45
class Github::Client::Orgs::Members < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def conceal(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def conceal_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def conceal_membership_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def conceal_membership_without_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def conceal_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/members.rb#133
  def conceal_without_callback_members(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/members.rb#99
  def delete_without_callback_members(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/members.rb#46
  def list_without_callback_members(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def make_public(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def make_public_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def make_public_without_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def member?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def publicize(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def publicize_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def publicize_membership_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def publicize_membership_without_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def publicize_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/members.rb#116
  def publicize_without_callback_members(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_members(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/orgs/memberships.rb#13
class Github::Client::Orgs::Memberships < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_without_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/memberships.rb#77
  def create_without_callback_memberships(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/memberships.rb#122
  def delete_without_callback_memberships(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/memberships.rb#102
  def edit_without_callback_memberships(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/memberships.rb#45
  def get_without_callback_memberships(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/memberships.rb#14
  def list_without_callback_memberships(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_memberships(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_without_callback_memberships(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/orgs/teams.rb#26
class Github::Client::Orgs::Teams < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add_member(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_member_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#221
  def add_member_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def add_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_membership_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#297
  def add_membership_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def add_repo(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_repo_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#378
  def add_repo_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def add_repository(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_repository_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_repository_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_member(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_member_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_member_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_membership_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_team_membership_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_members_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_members_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#95
  def create_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#158
  def delete_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#138
  def edit_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#49
  def get_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_members(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_members_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#180
  def list_members_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_repos_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#336
  def list_repos_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#27
  def list_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_member(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_member_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#243
  def remove_member_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_membership_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#319
  def remove_membership_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_repo(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_repo_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#398
  def remove_repo_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_repository(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_repository_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_repository_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_member(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_member_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_member_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_membership_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_team_membership_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_without_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def team_member?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def team_membership(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def team_membership_with_callback_teams(*args, &block); end

  # source://github_api//lib/github_api/client/orgs/teams.rb#266
  def team_membership_without_callback_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def team_repo?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def team_repository?(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/pull_requests.rb#4
class Github::Client::PullRequests < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List pull requests
  #
  # @api public
  # @example
  #   github = Github.new user: 'user-name', repo: 'repo-name'
  #   github.pull_requests.list
  #   github.pull_requests.list { |req| ... }
  # @example
  #   pulls = Github::PullRequests.new
  #   pulls.pull_requests.list 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def comments_without_callback_pullrequests(*args, &block); end

  # List commits on a pull request
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.commits 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#126
  def commits_without_callback_pullrequests(*args); end

  # Create a pull request
  #
  # @note: head and base can be either a sha or a branch name.
  # Typically you would namespace head with a user like this: username:branch.
  #
  # Alternative Input
  # You can also create a Pull Request from an existing Issue by passing
  # an Issue number instead of <tt>title</tt> and <tt>body</tt>.
  #
  # @api public
  # @example
  #   github.pull_requests.create 'user-name', 'repo-name',
  #   issue: "5",
  #   head: "octocat:new-feature",
  #   base: "master"
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.pull_requests.create 'user-name', 'repo-name',
  #   title: "Amazing new feature",
  #   body: "Please pull this in!",
  #   head: "octocat:new-feature",
  #   base: "master"
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#87
  def create_without_callback_pullrequests(*args); end

  # List pull requests files
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.files 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def files(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def files_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#141
  def files_without_callback_pullrequests(*args); end

  # Get a single pull request
  #
  # = Examples
  #  github = Github.new
  #  github.pull_requests.get 'user-name', 'repo-name', 'number'
  #
  #  pulls = Github::PullRequests.new
  #  pulls.get 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_pullrequests(*args, &block); end

  # Get a single pull request
  #
  # = Examples
  #  github = Github.new
  #  github.pull_requests.get 'user-name', 'repo-name', 'number'
  #
  #  pulls = Github::PullRequests.new
  #  pulls.get 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#44
  def get_without_callback_pullrequests(*args); end

  # List pull requests
  #
  # @api public
  # @example
  #   github = Github.new user: 'user-name', repo: 'repo-name'
  #   github.pull_requests.list
  #   github.pull_requests.list { |req| ... }
  # @example
  #   pulls = Github::PullRequests.new
  #   pulls.pull_requests.list 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#25
  def list_without_callback_pullrequests(*args); end

  # Merge a pull request(Merge Button)
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.merge 'user-name', 'repo-name', 'number'
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def merge(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def merge_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#185
  def merge_without_callback_pullrequests(*args); end

  # Check if pull request has been merged
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.merged? 'user-name', 'repo-name', 'number'
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/api.rb#195
  def merged?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def reviews(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def reviews_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def reviews_without_callback_pullrequests(*args, &block); end

  # Update a pull request
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.pull_requests.update 'user-name', 'repo-name', 'number'
  #   title: "Amazing new title",
  #   body: "Update body",
  #   state: "open"
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_pullrequests(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests.rb#113
  def update_without_callback_pullrequests(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/pull_requests/comments.rb#28
class Github::Client::PullRequests::Comments < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List comments on a pull request
  #
  # List comments in a repository
  #
  # By default, Review Comments are ordered by ascending ID.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.list 'user-name', 'repo-name', number: 'id'
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.list 'user-name', 'repo-name'
  #   github.pull_requests.comments.list 'user-name', 'repo-name' { |comm| ... }
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_comments(*args, &block); end

  # Create a pull request comment
  #
  # Alternative Inputs
  #
  # Instead of passing commit_id, path, and position you can reply to
  # an existing Pull Request Comment like this
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.create 'user-name', 'repo-name', 'number',
  #   body: "Nice change",
  #   commit_id: "6dcb09b5b57875f334f61aebed695e2e4193db5e",
  #   path: "file1.txt",
  #   position: 4
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.create 'user-name','repo-name', 'number',
  #   body: "Nice change",
  #   in_reply_to: 4
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/comments.rb#101
  def create_without_callback_comments(*args); end

  # Delete a pull request comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.delete 'user-name', 'repo-name', 'number'
  #
  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/comments.rb#132
  def delete_without_callback_comments(*args); end

  # Edit a pull request comment
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.edit 'user-name', 'repo-name', 'number',
  #   body: "Nice change"
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/comments.rb#119
  def edit_without_callback_comments(*args); end

  # Get a single comment for pull requests
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.get 'user-name', 'repo-name', 'number'
  # @example
  #   github.pull_requests.comments.get
  #   user: 'user-name',
  #   repo: 'repo-name',
  #   number: 'comment-number
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_comments(*args, &block); end

  # Get a single comment for pull requests
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.get 'user-name', 'repo-name', 'number'
  # @example
  #   github.pull_requests.comments.get
  #   user: 'user-name',
  #   repo: 'repo-name',
  #   number: 'comment-number
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/comments.rb#58
  def get_without_callback_comments(*args); end

  # List comments on a pull request
  #
  # List comments in a repository
  #
  # By default, Review Comments are ordered by ascending ID.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.list 'user-name', 'repo-name', number: 'id'
  # @example
  #   github = Github.new
  #   github.pull_requests.comments.list 'user-name', 'repo-name'
  #   github.pull_requests.comments.list 'user-name', 'repo-name' { |comm| ... }
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/comments.rb#29
  def list_without_callback_comments(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/pull_requests.rb#165
Github::Client::PullRequests::PREVIEW_MEDIA = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/client/pull_requests/reviews.rb#4
class Github::Client::PullRequests::Reviews < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List reviews on a pull request
  #
  # List pull request reviews in a repository
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number'
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number'
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number' { |comm| ... }
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_reviews(*args, &block); end

  # List comments on a pull request review
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.revieiws.comments 'user-name', 'repo-name', 'number', 'review-id'
  #
  # source://github_api//lib/github_api/api.rb#195
  def comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#144
  def comments_without_callback_reviews(*args); end

  # Create a pull request review
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.create 'user-name', 'repo-name', 'number',
  #   body: "Nice change",
  #   event: "APPROVE",
  #   comments: [
  #   {
  #   path: 'path/to/file/commented/on',
  #   position: 10,
  #   body:     'This looks good.'
  #   }
  #   ]
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#84
  def create_without_callback_reviews(*args); end

  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.pull_requests.reviews.dismiss 'user-name', 'repo-name', 'number', 'review-id'
  #   message: "I can't get to this right now."
  # @option params
  # @param params [Hash] a customizable set of options
  #
  # source://github_api//lib/github_api/api.rb#195
  def dismiss(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def dismiss_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#128
  def dismiss_without_callback_reviews(*args); end

  # Get a single review for pull requests
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.get 'user-name', 'repo-name', 'number', 'id'
  # @example
  #   github.pull_requests.reviews.get
  #   user: 'user-name',
  #   repo: 'repo-name',
  #   number: 1,
  #   id: 80
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_reviews(*args, &block); end

  # Get a single review for pull requests
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.get 'user-name', 'repo-name', 'number', 'id'
  # @example
  #   github.pull_requests.reviews.get
  #   user: 'user-name',
  #   repo: 'repo-name',
  #   number: 1,
  #   id: 80
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#47
  def get_without_callback_reviews(*args); end

  # List reviews on a pull request
  #
  # List pull request reviews in a repository
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number'
  # @example
  #   github = Github.new
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number'
  #   github.pull_requests.reviews.list 'user-name', 'repo-name', number: 'pull-request-number' { |comm| ... }
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#21
  def list_without_callback_reviews(*args); end

  # Update a pull request review
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.pull_requests.reviews.update 'user-name', 'repo-name', 'number', 'review-id'
  #   body: "Update body",
  #   event: "APPROVE"
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_reviews(*args, &block); end

  # source://github_api//lib/github_api/client/pull_requests/reviews.rb#110
  def update_without_callback_reviews(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/pull_requests/reviews.rb#5
Github::Client::PullRequests::Reviews::PREVIEW_MEDIA = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/client/repos.rb#5
class Github::Client::Repos < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List repositories for the authenticated user
  #
  # List all repositories
  #
  # This provides a dump of every repository,
  # in the order that they were created.
  #
  # List public repositories for the specified user.
  #
  # List repositories for the specified organisation.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.repos.list
  #   github.repos.list { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list :every
  #   github.repos.list :every { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list user: 'user-name'
  #   github.repos.list user: 'user-name', { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list org: 'org-name'
  #   github.repos.list org: 'org-name', { |repo| ... }
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_repos(*args, &block); end

  # Get branch
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.branch 'user-name', 'repo-name', 'branch-name'
  #   github.repos.branch user: 'user-name', repo: 'repo-name', branch: 'branch-name'
  #   github.repos(user: 'user-name', repo: 'repo-name', branch: 'branch-name').branch
  #
  # source://github_api//lib/github_api/client/repos.rb#373
  def branch(*args); end

  # List branches
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.branches 'user-name', 'repo-name'
  #   github.repos(user: 'user-name', repo: 'repo-name').branches
  # @example
  #   repos = Github::Repos.new
  #   repos.branches 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/client/repos.rb#356
  def branches(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def collaborators(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def collaborators_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def collaborators_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def comments_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def comments_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commits_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def commits_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def contents(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def contents_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def contents_without_callback_repos(*args, &block); end

  # List contributors
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.contributors 'user-name','repo-name'
  #   github.repos.contributors 'user-name','repo-name' { |cont| ... }
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/client/repos.rb#391
  def contribs(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def contribs_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def contribs_without_callback_repos(*args, &block); end

  # List contributors
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.contributors 'user-name','repo-name'
  #   github.repos.contributors 'user-name','repo-name' { |cont| ... }
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/client/repos.rb#391
  def contributors(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def contributors_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#274
  def contributors_without_callback_repos(*args); end

  # Create a new repository for the autheticated user.
  #
  # Create a new repository in this organisation. The authenticated user
  # must be a member of this organisation
  #
  # @example
  #   github = Github.new
  #   github.repos.create "name": 'repo-name'
  #   "description": "This is your first repo",
  #   "homepage": "https://github.com",
  #   "private": false,
  #   "has_issues": true,
  #   "has_wiki": true,
  #   "has_downloads": true
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.repos.create name: 'repo-name', org: 'organisation-name'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#230
  def create_without_callback_repos(*args); end

  # Delete a repository
  #
  # Deleting a repository requires admin access.
  # If OAuth is used, the delete_repo scope is required.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.repos.delete 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/client/repos.rb#336
  def delete(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#255
  def delete_without_callback_repos(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def deployments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def deployments_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def deployments_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def downloads_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def downloads_without_callback_repos(*args, &block); end

  # Edit a repository
  #
  # @example
  #   github = Github.new
  #   github.repos.edit 'user-name', 'repo-name',
  #   name: 'hello-world',
  #   description: 'This is your first repo',
  #   homepage: "https://github.com",
  #   public: true, has_issues: true
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#317
  def edit_without_callback_repos(*args); end

  # Get a repository
  #
  # @example
  #   github = Github.new
  #   github.repos.get 'user-name', 'repo-name'
  #   github.repos.get user: 'user-name', repo: 'repo-name'
  #   github.repos(user: 'user-name', repo: 'repo-name').get
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # Get a repository
  #
  # @example
  #   github = Github.new
  #   github.repos.get_by_id 'repo-id'
  #   github.repos.get_by_id id: 'repo-id'
  #   github.repos(id: 'repo-id').get_by_id
  #
  # source://github_api//lib/github_api/api.rb#195
  def find_by_id(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_by_id_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_by_id_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def forks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def forks_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def forks_without_callback_repos(*args, &block); end

  # Get a repository
  #
  # @example
  #   github = Github.new
  #   github.repos.get 'user-name', 'repo-name'
  #   github.repos.get user: 'user-name', repo: 'repo-name'
  #   github.repos(user: 'user-name', repo: 'repo-name').get
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # Get a repository
  #
  # @example
  #   github = Github.new
  #   github.repos.get_by_id 'repo-id'
  #   github.repos.get_by_id id: 'repo-id'
  #   github.repos(id: 'repo-id').get_by_id
  #
  # source://github_api//lib/github_api/api.rb#195
  def get_by_id(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_by_id_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#169
  def get_by_id_without_callback_repos(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#154
  def get_without_callback_repos(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def hooks_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def hooks_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def keys_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def keys_without_callback_repos(*args, &block); end

  # List languages
  #
  # @api public
  #
  # source://github_api//lib/github_api/client/repos.rb#411
  def languages(*args); end

  # List repositories for the authenticated user
  #
  # List all repositories
  #
  # This provides a dump of every repository,
  # in the order that they were created.
  #
  # List public repositories for the specified user.
  #
  # List repositories for the specified organisation.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.repos.list
  #   github.repos.list { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list :every
  #   github.repos.list :every { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list user: 'user-name'
  #   github.repos.list user: 'user-name', { |repo| ... }
  # @example
  #   github = Github.new
  #   github.repos.list org: 'org-name'
  #   github.repos.list org: 'org-name', { |repo| ... }
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # List branches
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.branches 'user-name', 'repo-name'
  #   github.repos(user: 'user-name', repo: 'repo-name').branches
  # @example
  #   repos = Github::Repos.new
  #   repos.branches 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/client/repos.rb#356
  def list_branches(*args); end

  # List contributors
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.contributors 'user-name','repo-name'
  #   github.repos.contributors 'user-name','repo-name' { |cont| ... }
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/client/repos.rb#391
  def list_contributors(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list_contributors_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_contributors_without_callback_repos(*args, &block); end

  # List languages
  #
  # @api public
  #
  # source://github_api//lib/github_api/client/repos.rb#411
  def list_languages(*args); end

  # List tags
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.tags 'user-name', 'repo-name'
  #   github.repos.tags 'user-name', 'repo-name' { |tag| ... }
  #
  # source://github_api//lib/github_api/client/repos.rb#428
  def list_tags(*args); end

  # List teams
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.teams 'user-name', 'repo-name'
  #   github.repos.teams 'user-name', 'repo-name' { |team| ... }
  # @example
  #   github.repos(user: 'user-name, repo: 'repo-name').teams
  #
  # source://github_api//lib/github_api/client/repos.rb#450
  def list_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/client/repos.rb#122
  def list_without_callback_repos(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def merging(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def merging_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def merging_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pages(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pages_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def pages_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def pubsubhubbub_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def pubsubhubbub_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def releases_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def releases_without_callback_repos(*args, &block); end

  # Delete a repository
  #
  # Deleting a repository requires admin access.
  # If OAuth is used, the delete_repo scope is required.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.repos.delete 'user-name', 'repo-name'
  #
  # source://github_api//lib/github_api/client/repos.rb#336
  def remove(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_repos(*args, &block); end

  # List tags
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.tags 'user-name', 'repo-name'
  #   github.repos.tags 'user-name', 'repo-name' { |tag| ... }
  #
  # source://github_api//lib/github_api/client/repos.rb#428
  def repo_tags(*args); end

  # List teams
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.teams 'user-name', 'repo-name'
  #   github.repos.teams 'user-name', 'repo-name' { |team| ... }
  # @example
  #   github.repos(user: 'user-name, repo: 'repo-name').teams
  #
  # source://github_api//lib/github_api/client/repos.rb#450
  def repo_teams(*args); end

  # List tags
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.tags 'user-name', 'repo-name'
  #   github.repos.tags 'user-name', 'repo-name' { |tag| ... }
  #
  # source://github_api//lib/github_api/client/repos.rb#428
  def repository_tags(*args); end

  # List teams
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.teams 'user-name', 'repo-name'
  #   github.repos.teams 'user-name', 'repo-name' { |team| ... }
  # @example
  #   github.repos(user: 'user-name, repo: 'repo-name').teams
  #
  # source://github_api//lib/github_api/client/repos.rb#450
  def repository_teams(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def stats(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def stats_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def stats_without_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def statuses(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def statuses_with_callback_repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def statuses_without_callback_repos(*args, &block); end

  # List tags
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.tags 'user-name', 'repo-name'
  #   github.repos.tags 'user-name', 'repo-name' { |tag| ... }
  #
  # source://github_api//lib/github_api/client/repos.rb#428
  def tags(*args); end

  # List teams
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.repos.teams 'user-name', 'repo-name'
  #   github.repos.teams 'user-name', 'repo-name' { |team| ... }
  # @example
  #   github.repos(user: 'user-name, repo: 'repo-name').teams
  #
  # source://github_api//lib/github_api/client/repos.rb#450
  def teams(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/collaborators.rb#21
class Github::Client::Repos::Collaborators < ::Github::API
  # source://github_api//lib/github_api/api.rb#195
  def <<(*args, &block); end

  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_with_callback_collaborators(*args, &block); end

  # source://github_api//lib/github_api/client/repos/collaborators.rb#43
  def add_without_callback_collaborators(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_collaborators(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_collaborators(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def collaborator?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_collaborators(*args, &block); end

  # source://github_api//lib/github_api/client/repos/collaborators.rb#22
  def list_without_callback_collaborators(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_collaborators(*args, &block); end

  # source://github_api//lib/github_api/client/repos/collaborators.rb#77
  def remove_without_callback_collaborators(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/comments.rb#4
class Github::Client::Repos::Comments < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/comments.rb#82
  def create_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/comments.rb#118
  def delete_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/comments.rb#54
  def get_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/comments.rb#31
  def list_without_callback_comments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_comments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/comments.rb#103
  def update_without_callback_comments(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/comments.rb#6
Github::Client::Repos::Comments::REQUIRED_COMMENT_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/comments.rb#8
Github::Client::Repos::Comments::VALID_COMMENT_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/commits.rb#4
class Github::Client::Repos::Commits < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def compare(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def compare_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/client/repos/commits.rb#72
  def compare_without_callback_commits(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/client/repos/commits.rb#54
  def get_without_callback_commits(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_commits(*args, &block); end

  # source://github_api//lib/github_api/client/repos/commits.rb#36
  def list_without_callback_commits(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/commits.rb#6
Github::Client::Repos::Commits::VALID_COMMITS_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/contents.rb#6
class Github::Client::Repos::Contents < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def archive(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def archive_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#232
  def archive_without_callback_contents(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#102
  def create_without_callback_contents(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#200
  def delete_without_callback_contents(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#54
  def get_without_callback_contents(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def readme(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def readme_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#28
  def readme_without_callback_contents(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_contents(*args, &block); end

  # source://github_api//lib/github_api/client/repos/contents.rb#156
  def update_without_callback_contents(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/contents.rb#8
Github::Client::Repos::Contents::REQUIRED_CONTENT_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/deployments.rb#4
class Github::Client::Repos::Deployments < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_status(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_status_with_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/deployments.rb#125
  def create_status_without_callback_deployments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/deployments.rb#74
  def create_without_callback_deployments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/deployments.rb#31
  def list_without_callback_deployments(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def statuses(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def statuses_with_callback_deployments(*args, &block); end

  # source://github_api//lib/github_api/client/repos/deployments.rb#97
  def statuses_without_callback_deployments(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/deployments.rb#21
Github::Client::Repos::Deployments::PREVIEW_MEDIA = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/client/repos/deployments.rb#6
Github::Client::Repos::Deployments::VALID_DEPLOYMENTS_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/deployments.rb#15
Github::Client::Repos::Deployments::VALID_STATUS_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/downloads.rb#4
class Github::Client::Repos::Downloads < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/client/repos/downloads.rb#53
  def delete_without_callback_downloads(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/client/repos/downloads.rb#39
  def get_without_callback_downloads(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/client/repos/downloads.rb#23
  def list_without_callback_downloads(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_downloads(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_downloads(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/downloads.rb#6
Github::Client::Repos::Downloads::REQUIRED_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/downloads.rb#8
Github::Client::Repos::Downloads::VALID_DOWNLOAD_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/forks.rb#17
class Github::Client::Repos::Forks < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_forks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_forks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_forks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/forks.rb#40
  def create_without_callback_forks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_forks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/forks.rb#18
  def list_without_callback_forks(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/hooks.rb#6
class Github::Client::Repos::Hooks < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#116
  def create_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#206
  def delete_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#157
  def edit_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#62
  def get_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#46
  def list_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def ping(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def ping_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#193
  def ping_without_callback_hooks(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def test(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def test_with_callback_hooks(*args, &block); end

  # source://github_api//lib/github_api/client/repos/hooks.rb#178
  def test_without_callback_hooks(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/hooks.rb#36
Github::Client::Repos::Hooks::REQUIRED_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/hooks.rb#8
Github::Client::Repos::Hooks::VALID_HOOK_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/hooks.rb#19
Github::Client::Repos::Hooks::VALID_HOOK_PARAM_VALUES = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/repos/keys.rb#21
class Github::Client::Repos::Keys < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_without_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/repos/keys.rb#74
  def create_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/repos/keys.rb#95
  def delete_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/repos/keys.rb#45
  def get_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/repos/keys.rb#22
  def list_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def remove(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def remove_without_callback_keys(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/merging.rb#7
class Github::Client::Repos::Merging < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def merge(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def merge_with_callback_merging(*args, &block); end

  # source://github_api//lib/github_api/client/repos/merging.rb#36
  def merge_without_callback_merging(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/merging.rb#15
Github::Client::Repos::Merging::REQUIRED_MERGE_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/merging.rb#9
Github::Client::Repos::Merging::VALID_MERGE_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/pages.rb#8
class Github::Client::Repos::Pages < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pages.rb#39
  def get_without_callback_pages(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_pages(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pages.rb#19
  def list_without_callback_pages(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#4
class Github::Client::Repos::PubSubHubbub < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repo(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repo_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repo_without_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repository(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repository_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_repository_without_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_service(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_service_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#80
  def subscribe_service_without_callback_pubsubhubbub(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def subscribe_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#29
  def subscribe_without_callback_pubsubhubbub(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repo(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repo_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repo_without_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repository(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repository_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_repository_without_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_service(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_service_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#109
  def unsubscribe_service_without_callback_pubsubhubbub(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def unsubscribe_with_callback_pubsubhubbub(*args, &block); end

  # source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#56
  def unsubscribe_without_callback_pubsubhubbub(*args); end

  private

  # source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#122
  def _merge_action!(action, topic, callback, params); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/pub_sub_hubbub.rb#5
Github::Client::Repos::PubSubHubbub::OPTIONS = T.let(T.unsafe(nil), Hash)

# source://github_api//lib/github_api/client/repos.rb#23
Github::Client::Repos::REQUIRED_REPO_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/releases.rb#5
class Github::Client::Repos::Releases < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def assets_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def assets_without_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#90
  def create_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#160
  def delete_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#138
  def edit_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#47
  def get_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def latest(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def latest_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#181
  def latest_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases.rb#29
  def list_without_callback_releases(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def tags_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def tags_without_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_releases(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_without_callback_releases(*args, &block); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/releases/assets.rb#5
class Github::Client::Repos::Releases::Assets < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#128
  def delete_without_callback_assets(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def edit(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def edit_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#112
  def edit_without_callback_assets(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#37
  def get_without_callback_assets(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def infer_media(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def infer_media_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#86
  def infer_media_without_callback_assets(filepath); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#21
  def list_without_callback_assets(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_without_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def upload(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def upload_with_callback_assets(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/assets.rb#60
  def upload_without_callback_assets(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/releases/assets.rb#7
Github::Client::Repos::Releases::Assets::VALID_ASSET_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/releases/tags.rb#14
class Github::Client::Repos::Releases::Tags < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_tags(*args, &block); end

  # source://github_api//lib/github_api/client/repos/releases/tags.rb#15
  def get_without_callback_tags(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/statistics.rb#6
class Github::Client::Repos::Statistics < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def code_frequency(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def code_frequency_with_callback_statistics(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statistics.rb#51
  def code_frequency_without_callback_statistics(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def commit_activity(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def commit_activity_with_callback_statistics(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statistics.rb#35
  def commit_activity_without_callback_statistics(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def contributors(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def contributors_with_callback_statistics(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statistics.rb#16
  def contributors_without_callback_statistics(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def participation(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def participation_with_callback_statistics(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statistics.rb#65
  def participation_without_callback_statistics(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def punch_card(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def punch_card_with_callback_statistics(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statistics.rb#79
  def punch_card_without_callback_statistics(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/statuses.rb#7
class Github::Client::Repos::Statuses < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_statuses(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_statuses(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_statuses(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statuses.rb#80
  def create_without_callback_statuses(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_statuses(*args, &block); end

  # source://github_api//lib/github_api/client/repos/statuses.rb#36
  def list_without_callback_statuses(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/repos/statuses.rb#16
Github::Client::Repos::Statuses::REQUIRED_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos/statuses.rb#9
Github::Client::Repos::Statuses::VALID_STATUS_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos.rb#25
Github::Client::Repos::VALID_REPO_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/repos.rb#39
Github::Client::Repos::VALID_REPO_TYPES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/say.rb#4
class Github::Client::Say < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Generate ASCII octocat with speech bubble.
  #
  # @example
  #   Github::Client::Say.new.say "My custom string..."
  # @example
  #   github = Github.new
  #   github.octocat.say "My custom string..."
  #
  # source://github_api//lib/github_api/api.rb#195
  def say(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def say_with_callback_say(*args, &block); end

  # source://github_api//lib/github_api/client/say.rb#15
  def say_without_callback_say(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/scopes.rb#21
class Github::Client::Scopes < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Check what OAuth scopes you have.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: 'e72e16c7e42f292c6912e7710c838347ae17'
  #   github.scopes.all
  # @example
  #   github = Github.new
  #   github.scopes.list 'e72e16c7e42f292c6912e7710c838347ae17'
  # @example
  #   github = Github.new
  #   github.scopes.list token: 'e72e16c7e42f292c6912e7710c838347ae17'
  # @see https://developer.github.com/v3/oauth/#scopes
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_scopes(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_scopes(*args, &block); end

  # Check what OAuth scopes you have.
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: 'e72e16c7e42f292c6912e7710c838347ae17'
  #   github.scopes.all
  # @example
  #   github = Github.new
  #   github.scopes.list 'e72e16c7e42f292c6912e7710c838347ae17'
  # @example
  #   github = Github.new
  #   github.scopes.list token: 'e72e16c7e42f292c6912e7710c838347ae17'
  # @see https://developer.github.com/v3/oauth/#scopes
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_scopes(*args, &block); end

  # source://github_api//lib/github_api/client/scopes.rb#22
  def list_without_callback_scopes(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# The Search API is optimized to help you find the specific item
# you're looking for (e.g., a specific user, a specific file
# in a repository, etc.).
#
# source://github_api//lib/github_api/client/search.rb#7
class Github::Client::Search < ::Github::API
  include ::Github::Utils::Url

  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Find file contents via various criteria.
  # (This method returns up to 100 results per page.)
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.code q: 'wycats'
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def code(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def code_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/client/search.rb#123
  def code_without_callback_search(*args); end

  # Search issues
  #
  # Find issues by state and keyword.
  # (This method returns up to 100 results per page.)
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.issues 'query'
  # @example
  #   github.search.issues q: 'query'
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/client/search.rb#39
  def issues_without_callback_search(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def legacy(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def legacy_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def legacy_without_callback_search(*args, &block); end

  # Search repositories
  #
  # Find repositories via various criteria.
  # (This method returns up to 100 results per page.)
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.repos 'query'
  # @example
  #   github.search.repos q: 'query'
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/client/search.rb#69
  def repos_without_callback_search(*args); end

  # Search repositories
  #
  # Find repositories via various criteria.
  # (This method returns up to 100 results per page.)
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.repos 'query'
  # @example
  #   github.search.repos q: 'query'
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def repositories(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_without_callback_search(*args, &block); end

  # Search users
  #
  # Find users by keyword.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.users q: 'wycats'
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def users_with_callback_search(*args, &block); end

  # source://github_api//lib/github_api/client/search.rb#97
  def users_without_callback_search(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/search/legacy.rb#4
class Github::Client::Search::Legacy < ::Github::API
  include ::Github::Utils::Url

  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # Search email
  #
  # This API call is added for compatibility reasons only. There’s no
  # guarantee that full email searches will always be available.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.email 'email-address'
  #   github.search.email email: 'email-address'
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def email(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def email_with_callback_legacy(*args, &block); end

  # source://github_api//lib/github_api/client/search/legacy.rb#104
  def email_without_callback_legacy(*args); end

  # Search issues
  #
  # Find issues by state and keyword.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.legacy.issues 'owner', 'repo-name', 'open','api'
  #   github.search.legacy.issues owner: 'owner', repo: 'repo-name', state: 'open', keyword: 'api'
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def issues(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def issues_with_callback_legacy(*args, &block); end

  # source://github_api//lib/github_api/client/search/legacy.rb#23
  def issues_without_callback_legacy(*args); end

  # Search repositories
  #
  # Find repositories by keyword.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.legacy.repos 'api'
  #   github.search.legacy.repos keyword: 'api'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def repos(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repos_with_callback_legacy(*args, &block); end

  # source://github_api//lib/github_api/client/search/legacy.rb#54
  def repos_without_callback_legacy(*args); end

  # Search repositories
  #
  # Find repositories by keyword.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.legacy.repos 'api'
  #   github.search.legacy.repos keyword: 'api'
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def repositories(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_with_callback_legacy(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def repositories_without_callback_legacy(*args, &block); end

  # Search users
  #
  # Find users by keyword.
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.search.legacy.users 'user'
  #   github.search.legacy.users keyword: 'user'
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def users_with_callback_legacy(*args, &block); end

  # source://github_api//lib/github_api/client/search/legacy.rb#83
  def users_without_callback_legacy(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/users.rb#5
class Github::Client::Users < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # List all users.
  #
  # This provides a dump of every user, in the order that they signed up
  # for GitHub.
  #
  # @api public
  # @example
  #   users = Github::Users.new
  #   users.list
  # @option [Integer]
  # @param params [Hash]
  # @param [Integer] [Hash] a customizable set of options
  #
  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def emails(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def emails_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def emails_without_callback_users(*args, &block); end

  # Get a single unauthenticated user
  #
  # Get the authenticated user
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.users.get user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.users.get
  #
  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def followers(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def followers_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def followers_without_callback_users(*args, &block); end

  # Get a single unauthenticated user
  #
  # Get the authenticated user
  #
  # @api public
  # @example
  #   github = Github.new
  #   github.users.get user: 'user-name'
  # @example
  #   github = Github.new oauth_token: '...'
  #   github.users.get
  #
  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/client/users.rb#66
  def get_without_callback_users(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def keys_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/api.rb#316
  def keys_without_callback_users(*args, &block); end

  # List all users.
  #
  # This provides a dump of every user, in the order that they signed up
  # for GitHub.
  #
  # @api public
  # @example
  #   users = Github::Users.new
  #   users.list
  # @option [Integer]
  # @param params [Hash]
  # @param [Integer] [Hash] a customizable set of options
  #
  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/client/users.rb#44
  def list_without_callback_users(*args); end

  # Update the authenticated user
  #
  # @api public
  # @example
  #   github = Github.new oauth_token: '..'
  #   github.users.update
  #   name: "monalisa octocat",
  #   email: "octocat@github.com",
  #   blog: "https://github.com/blog",
  #   company: "GitHub",
  #   location: "San Francisco",
  #   hireable: true,
  #   bio: "There once..."
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash]
  #
  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_users(*args, &block); end

  # source://github_api//lib/github_api/client/users.rb#107
  def update_without_callback_users(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/users/emails.rb#5
class Github::Client::Users::Emails < ::Github::API
  # source://github_api//lib/github_api/api.rb#195
  def <<(*args, &block); end

  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def add(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def add_with_callback_emails(*args, &block); end

  # source://github_api//lib/github_api/client/users/emails.rb#35
  def add_without_callback_emails(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_emails(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_emails(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_emails(*args, &block); end

  # source://github_api//lib/github_api/client/users/emails.rb#54
  def delete_without_callback_emails(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_emails(*args, &block); end

  # source://github_api//lib/github_api/client/users/emails.rb#17
  def list_without_callback_emails(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/users/followers.rb#4
class Github::Client::Users::Followers < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def follow(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def follow_with_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/client/users/followers.rb#96
  def follow_without_callback_followers(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def following(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def following?(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def following_with_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/client/users/followers.rb#48
  def following_without_callback_followers(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/client/users/followers.rb#21
  def list_without_callback_followers(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def unfollow(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def unfollow_with_callback_followers(*args, &block); end

  # source://github_api//lib/github_api/client/users/followers.rb#108
  def unfollow_without_callback_followers(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/users/keys.rb#4
class Github::Client::Users::Keys < ::Github::API
  # source://github_api//lib/github_api/api/actions.rb#20
  def actions; end

  # source://github_api//lib/github_api/api.rb#195
  def all(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def all_without_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def create_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/users/keys.rb#62
  def create_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def delete(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def delete_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/users/keys.rb#97
  def delete_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def find(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def find_without_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def get_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/users/keys.rb#43
  def get_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def list(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def list_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/users/keys.rb#24
  def list_without_callback_keys(*args); end

  # source://github_api//lib/github_api/api.rb#195
  def update(*args, &block); end

  # source://github_api//lib/github_api/api.rb#195
  def update_with_callback_keys(*args, &block); end

  # source://github_api//lib/github_api/client/users/keys.rb#83
  def update_without_callback_keys(*args); end

  class << self
    # source://github_api//lib/github_api/api/actions.rb#16
    def actions; end
  end
end

# source://github_api//lib/github_api/client/users/keys.rb#6
Github::Client::Users::Keys::VALID_KEY_PARAM_NAMES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/client/users.rb#11
Github::Client::Users::VALID_USER_PARAMS_NAMES = T.let(T.unsafe(nil), Array)

# Stores the configuration
#
# source://github_api//lib/github_api/configuration.rb#7
class Github::Configuration < ::Github::API::Config
  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def adapter; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def adapter=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def auto_pagination; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def auto_pagination=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def basic_auth; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def basic_auth=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def client_id; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def client_id=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def client_secret; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def client_secret=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def connection_options; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def connection_options=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def endpoint; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def endpoint=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def follow_redirects; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def follow_redirects=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def login; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def login=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def mime_type; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def mime_type=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def oauth_token; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def oauth_token=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def org; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def org=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def password; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def password=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def per_page; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def per_page=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def repo; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def repo=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def site; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def site=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def ssl; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def ssl=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def stack; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def stack=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def upload_endpoint; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def upload_endpoint=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def user; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def user=(value); end

  # source://github_api//lib/github_api/api/config/property_set.rb#104
  def user_agent; end

  # source://github_api//lib/github_api/api/config/property_set.rb#111
  def user_agent=(value); end
end

# Specifies Http connection options
#
# source://github_api//lib/github_api/connection.rb#5
module Github::Connection
  include ::Github::Constants
  extend ::Github::Connection

  # Creates http connection
  #
  # Returns a Fraday::Connection object
  #
  # source://github_api//lib/github_api/connection.rb#65
  def connection(api, options = T.unsafe(nil)); end

  # Default requets header information
  #
  # @api private
  # @return [Hash[String]]
  #
  # source://github_api//lib/github_api/connection.rb#22
  def default_headers; end

  # Create default connection options
  #
  # @api private
  # @return [Hash[Symbol]] the default options
  #
  # source://github_api//lib/github_api/connection.rb#37
  def default_options(options = T.unsafe(nil)); end

  # Exposes middleware builder to facilitate custom stacks and easy
  # addition of new extensions such as cache adapter.
  #
  # @api public
  #
  # source://github_api//lib/github_api/connection.rb#51
  def stack(options = T.unsafe(nil)); end
end

# source://github_api//lib/github_api/connection.rb#9
Github::Connection::ALLOWED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/constants.rb#2
module Github::Constants
  extend ::Github::Constants
end

# source://github_api//lib/github_api/constants.rb#28
Github::Constants::ACCEPT = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#34
Github::Constants::ACCEPTED_OAUTH_SCOPES = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#30
Github::Constants::ACCEPT_CHARSET = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#16
Github::Constants::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#14
Github::Constants::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#12
Github::Constants::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#22
Github::Constants::DATE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#18
Github::Constants::ETAG = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#41
Github::Constants::HEADER_LAST = T.let(T.unsafe(nil), String)

# Link headers
#
# source://github_api//lib/github_api/constants.rb#37
Github::Constants::HEADER_LINK = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#39
Github::Constants::HEADER_NEXT = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#24
Github::Constants::LOCATION = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#49
Github::Constants::META_FIRST = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#45
Github::Constants::META_LAST = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#47
Github::Constants::META_NEXT = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#51
Github::Constants::META_PREV = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#43
Github::Constants::META_REL = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#32
Github::Constants::OAUTH_SCOPES = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#53
Github::Constants::PARAM_PAGE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#55
Github::Constants::PARAM_PER_PAGE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#57
Github::Constants::PARAM_START_PAGE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#8
Github::Constants::RATELIMIT_LIMIT = T.let(T.unsafe(nil), String)

# Response headers
#
# source://github_api//lib/github_api/constants.rb#6
Github::Constants::RATELIMIT_REMAINING = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#10
Github::Constants::RATELIMIT_RESET = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#20
Github::Constants::SERVER = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/constants.rb#26
Github::Constants::USER_AGENT = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/core_ext/ordered_hash.rb#4
module Github::CoreExt; end

# source://github_api//lib/github_api/core_ext/ordered_hash.rb#7
class Github::CoreExt::OrderedHash < ::Hash; end

# source://github_api//lib/github_api/deprecation.rb#5
Github::DEPRECATION_PREFIX = T.let(T.unsafe(nil), String)

# Raised when GitHub returns any of the HTTP status codes
#
# source://github_api//lib/github_api/error.rb#6
module Github::Error; end

# Raised when Github returns the HTTP status code 502
#
# source://github_api//lib/github_api/error/service_error.rb#207
class Github::Error::BadGateway < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when Github returns the HTTP status code 400
#
# source://github_api//lib/github_api/error/service_error.rb#147
class Github::Error::BadRequest < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# source://github_api//lib/github_api/error/client_error.rb#6
class Github::Error::ClientError < ::Github::Error::GithubError
  # @return [ClientError] a new instance of ClientError
  #
  # source://github_api//lib/github_api/error/client_error.rb#9
  def initialize(message); end

  # source://github_api//lib/github_api/error/client_error.rb#13
  def generate_message(attributes); end

  # Returns the value of attribute problem.
  #
  # source://github_api//lib/github_api/error/client_error.rb#7
  def problem; end

  # Returns the value of attribute resolution.
  #
  # source://github_api//lib/github_api/error/client_error.rb#7
  def resolution; end

  # Returns the value of attribute summary.
  #
  # source://github_api//lib/github_api/error/client_error.rb#7
  def summary; end
end

# Raised when GitHub returns the HTTP status code 409
#
# source://github_api//lib/github_api/error/service_error.rb#177
class Github::Error::Conflict < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when Github returns the HTTP status code 403
#
# source://github_api//lib/github_api/error/service_error.rb#157
class Github::Error::Forbidden < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# source://github_api//lib/github_api/error.rb#7
class Github::Error::GithubError < ::StandardError
  extend ::DescendantsTracker

  # Initialize a new Github error object.
  #
  # @return [GithubError] a new instance of GithubError
  #
  # source://github_api//lib/github_api/error.rb#14
  def initialize(message = T.unsafe(nil)); end

  # source://github_api//lib/github_api/error.rb#23
  def backtrace; end

  # Returns the value of attribute response_headers.
  #
  # source://github_api//lib/github_api/error.rb#10
  def response_headers; end

  # Returns the value of attribute response_message.
  #
  # source://github_api//lib/github_api/error.rb#10
  def response_message; end
end

# Raised when Github returns the HTTP status code 500
#
# source://github_api//lib/github_api/error/service_error.rb#197
class Github::Error::InternalServerError < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when invalid options are passed to a request body
#
# source://github_api//lib/github_api/error/client_error.rb#24
class Github::Error::InvalidOptions < ::Github::Error::ClientError
  # @return [InvalidOptions] a new instance of InvalidOptions
  #
  # source://github_api//lib/github_api/error/client_error.rb#25
  def initialize(invalid, valid); end
end

# Raised when Github returns the HTTP status code 405
#
# source://github_api//lib/github_api/error/service_error.rb#167
class Github::Error::MethodNotAllowed < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when Github returns the HTTP status code 406
#
# source://github_api//lib/github_api/error/service_error.rb#172
class Github::Error::NotAcceptable < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when Github returns the HTTP status code 404
#
# source://github_api//lib/github_api/error/service_error.rb#162
class Github::Error::NotFound < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when Github returns the HTTP status code 501
#
# source://github_api//lib/github_api/error/service_error.rb#202
class Github::Error::NotImplemented < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when invalid options are passed to a request body
#
# source://github_api//lib/github_api/error/client_error.rb#37
class Github::Error::RequiredParams < ::Github::Error::ClientError
  # @return [RequiredParams] a new instance of RequiredParams
  #
  # source://github_api//lib/github_api/error/client_error.rb#38
  def initialize(provided, required); end
end

# source://github_api//lib/github_api/error/service_error.rb#14
class Github::Error::ServiceError < ::Github::Error::GithubError
  # Crate a ServiceError
  #
  # @api public
  # @param response [Hash[Symbol]]
  # @return [ServiceError] a new instance of ServiceError
  #
  # source://github_api//lib/github_api/error/service_error.rb#39
  def initialize(response); end

  # Expose response payload as JSON object if possible
  #
  # @api public
  # @return [Hash[Symbol]|String]
  #
  # source://github_api//lib/github_api/error/service_error.rb#55
  def data; end

  # Stores error message(s) returned in response body
  #
  # @api public
  # @return [Array[Hash[Symbol]]] the array of hash error objects
  #
  # source://github_api//lib/github_api/error/service_error.rb#65
  def error_messages; end

  private

  # Create error summary from response body
  #
  # @api private
  # @return [String]
  #
  # source://github_api//lib/github_api/error/service_error.rb#134
  def create_error_summary; end

  # Create full error message
  #
  # @api private
  # @param response [Hash[Symbol]] the http response
  # @return [String] the error message
  #
  # source://github_api//lib/github_api/error/service_error.rb#82
  def create_message(response); end

  # Decode body information if in JSON format
  #
  # @api private
  # @param body [String] the response body
  #
  # source://github_api//lib/github_api/error/service_error.rb#97
  def decode_data(body); end

  # Read response body and convert to human friendly format
  #
  # @api private
  # @return [String]
  #
  # source://github_api//lib/github_api/error/service_error.rb#113
  def format_response; end

  class << self
    # A mapping of status codes and error types
    #
    # @api public
    # @return [Hash[Integer, Object]]
    #
    # source://github_api//lib/github_api/error/service_error.rb#24
    def error_mapping; end

    # Add http status code method to error type
    #
    # @api public
    # @param code [Integer] the status code
    #
    # source://github_api//lib/github_api/error/service_error.rb#15
    def http_status_code(code); end
  end
end

# source://github_api//lib/github_api/error/service_error.rb#32
Github::Error::ServiceError::MIN_BODY_LENGTH = T.let(T.unsafe(nil), Integer)

# Raised when GitHub returns the HTTP status code 503
#
# source://github_api//lib/github_api/error/service_error.rb#212
class Github::Error::ServiceUnavailable < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when GitHub returns the HTTP status code 401
#
# source://github_api//lib/github_api/error/service_error.rb#152
class Github::Error::Unauthorized < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when GitHub returns the HTTP status code 451
#
# source://github_api//lib/github_api/error/service_error.rb#192
class Github::Error::UnavailableForLegalReasons < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when invalid options are passed to a request body
#
# source://github_api//lib/github_api/error/client_error.rb#50
class Github::Error::UnknownMedia < ::Github::Error::ClientError
  # @return [UnknownMedia] a new instance of UnknownMedia
  #
  # source://github_api//lib/github_api/error/client_error.rb#51
  def initialize(file); end
end

# Raised when invalid options are passed to a request body
#
# source://github_api//lib/github_api/error/client_error.rb#63
class Github::Error::UnknownValue < ::Github::Error::ClientError
  # @return [UnknownValue] a new instance of UnknownValue
  #
  # source://github_api//lib/github_api/error/client_error.rb#64
  def initialize(key, value, permitted); end
end

# Raised when GitHub returns the HTTP status code 422
#
# source://github_api//lib/github_api/error/service_error.rb#187
class Github::Error::UnprocessableEntity < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# Raised when GitHub returns the HTTP status code 414
#
# source://github_api//lib/github_api/error/service_error.rb#182
class Github::Error::UnsupportedMediaType < ::Github::Error::ServiceError
  # source://github_api//lib/github_api/error/service_error.rb#16
  def http_status_code; end
end

# source://github_api//lib/github_api/error/client_error.rb#75
class Github::Error::Validations < ::Github::Error::ClientError
  # @return [Validations] a new instance of Validations
  #
  # source://github_api//lib/github_api/error/client_error.rb#76
  def initialize(errors); end
end

# source://github_api//lib/github_api.rb#18
Github::LIBDIR = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api.rb#16
Github::LIBNAME = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/mash.rb#4
class Github::Mash < ::Hashie::Mash; end

# source://github_api//lib/github_api/middleware.rb#12
class Github::Middleware
  class << self
    # source://github_api//lib/github_api/middleware.rb#13
    def default(options = T.unsafe(nil)); end
  end
end

# source://github_api//lib/github_api/mime_type.rb#4
module Github::MimeType
  # source://github_api//lib/github_api/mime_type.rb#26
  def lookup_media(name); end

  # Parse media type param
  #
  # source://github_api//lib/github_api/mime_type.rb#17
  def parse(media); end
end

# source://github_api//lib/github_api/mime_type.rb#6
Github::MimeType::MEDIA_LOOKUP = T.let(T.unsafe(nil), Hash)

# Deals with normalazing client supplied parameter keys.
#
# source://github_api//lib/github_api/normalizer.rb#5
module Github::Normalizer
  # Turns any keys from nested hashes including nested arrays into strings
  #
  # source://github_api//lib/github_api/normalizer.rb#8
  def normalize!(params); end
end

# Skip encoding of the key nested parameters
#
# source://github_api//lib/github_api/null_encoder.rb#8
module Github::NullParamsEncoder
  class << self
    # source://github_api//lib/github_api/null_encoder.rb#17
    def escape(s); end

    # source://github_api//lib/github_api/null_encoder.rb#21
    def unescape(s); end
  end
end

# A class responsible for requesting resources through page links
#
# @api private
#
# source://github_api//lib/github_api/page_iterator.rb#10
class Github::PageIterator
  include ::Github::Constants
  include ::Github::Utils::Url
  include ::Github::PagedRequest

  # @api private
  # @return [PageIterator] a new instance of PageIterator
  #
  # source://github_api//lib/github_api/page_iterator.rb#26
  def initialize(links, current_api); end

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#36
  def count; end

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#24
  def current_api; end

  # Perform http get request for the first resource
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#42
  def first; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def first_page; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def first_page=(_arg0); end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def first_page_uri; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def first_page_uri=(_arg0); end

  # Returns the result for a specific page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#66
  def get_page(page_number); end

  # Perform http get request for the last resource
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#60
  def last; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def last_page; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def last_page=(_arg0); end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def last_page_uri; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def last_page_uri=(_arg0); end

  # Perform http get request for the next resource
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#48
  def next; end

  # @api private
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/page_iterator.rb#32
  def next?; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def next_page; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def next_page=(_arg0); end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def next_page_uri; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def next_page_uri=(_arg0); end

  # Perform http get request for the previous resource
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#54
  def prev; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def prev_page; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def prev_page=(_arg0); end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def prev_page_uri; end

  # source://github_api//lib/github_api/page_iterator.rb#21
  def prev_page_uri=(_arg0); end

  private

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#105
  def parse_page_number(uri); end

  # Extracts query string parameter for given name
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#110
  def parse_page_params(uri, attr); end

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#101
  def parse_per_page_number(uri); end

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#77
  def perform_request(page_uri_path, page_number = T.unsafe(nil)); end

  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#96
  def sha(params); end

  # Wholesale update of all link attributes
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_iterator.rb#128
  def update_page_links(links); end
end

# Setup attribute accesor for all the link types
#
# @api private
#
# source://github_api//lib/github_api/page_iterator.rb#16
Github::PageIterator::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# @api private
#
# source://github_api//lib/github_api/page_iterator.rb#18
Github::PageIterator::DEFAULT_SHA = T.let(T.unsafe(nil), String)

# Determines the links in the current response link header to be used
# to find the links to other pages of request responses. These will
# only be present if the result set size exceeds the per page limit.
#
# @api private
#
# source://github_api//lib/github_api/page_links.rb#7
class Github::PageLinks
  include ::Github::Constants

  # Parses links from executed request
  #
  # @api private
  # @param response_headers [Hash]
  # @return [PageLinks] a new instance of PageLinks
  #
  # source://github_api//lib/github_api/page_links.rb#23
  def initialize(response_headers); end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def first; end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def first=(_arg0); end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def last; end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def last=(_arg0); end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def next; end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def next=(_arg0); end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def prev; end

  # Hold the extracted values for URI from the Link header
  # for the first, last, next and previous page.
  #
  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#14
  def prev=(_arg0); end

  private

  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#46
  def assign_url_part(meta_part, url_part); end

  # @api private
  #
  # source://github_api//lib/github_api/page_links.rb#36
  def extract_links(link_header); end
end

# @api private
#
# source://github_api//lib/github_api/page_links.rb#10
Github::PageLinks::DELIM_LINKS = T.let(T.unsafe(nil), String)

# @api private
#
# source://github_api//lib/github_api/page_links.rb#16
Github::PageLinks::LINK_REGEX = T.let(T.unsafe(nil), Regexp)

# A module that adds http get request to response pagination
#
# source://github_api//lib/github_api/paged_request.rb#6
module Github::PagedRequest
  include ::Github::Constants

  # source://github_api//lib/github_api/paged_request.rb#22
  def default_page; end

  # Check if current api instance has default per_page param set,
  # otherwise use global default.
  #
  # source://github_api//lib/github_api/paged_request.rb#18
  def default_page_size; end

  # Perform http get request with pagination parameters
  #
  # source://github_api//lib/github_api/paged_request.rb#28
  def page_request(path, params = T.unsafe(nil)); end
end

# Default request page if none provided
#
# source://github_api//lib/github_api/paged_request.rb#9
Github::PagedRequest::FIRST_PAGE = T.let(T.unsafe(nil), Integer)

# Either page or per_page parameter not present
#
# source://github_api//lib/github_api/paged_request.rb#13
Github::PagedRequest::NOT_FOUND = T.let(T.unsafe(nil), Integer)

# Default number of items as specified by API
#
# source://github_api//lib/github_api/paged_request.rb#11
Github::PagedRequest::PER_PAGE = T.let(T.unsafe(nil), Integer)

# A module that decorates response with pagination helpers
#
# source://github_api//lib/github_api/pagination.rb#6
module Github::Pagination
  include ::Github::Constants

  # Iterate over results set pages by automatically calling `next_page`
  # until all pages are exhausted. Caution needs to be exercised when
  # using this feature - 100 pages iteration will perform 100 API calls.
  # By default this is off. You can set it on the client, individual API
  # instances or just per given request.
  #
  # source://github_api//lib/github_api/pagination.rb#25
  def auto_paginate(auto = T.unsafe(nil)); end

  # Retrive number of total pages base on current :per_page parameter
  #
  # source://github_api//lib/github_api/pagination.rb#15
  def count_pages; end

  # Iterator like each for response pages. If there are no pages to
  # iterate over this method will return current page.
  #
  # @yield [_self]
  # @yieldparam _self [Github::Pagination] the object that the method was called on
  #
  # source://github_api//lib/github_api/pagination.rb#36
  def each_page; end

  # Retrives the result of the first page. Returns <tt>nil</tt> if there is
  # no first page - either because you are already on the first page
  # or there are no pages at all in the result.
  #
  # source://github_api//lib/github_api/pagination.rb#46
  def first_page; end

  # Returns <tt>true</tt> if there is another page in the result set,
  # otherwise <tt>false</tt>
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/pagination.rb#90
  def has_next_page?; end

  # Retrives the result of the last page. Returns <tt>nil</tt> if there is
  # no last page - either because you are already on the last page,
  # there is only one page or there are no pages at all in the result.
  #
  # source://github_api//lib/github_api/pagination.rb#72
  def last_page; end

  # Return page links
  #
  # source://github_api//lib/github_api/pagination.rb#10
  def links; end

  # Retrives the result of the next page. Returns <tt>nil</tt> if there is
  # no next page or no pages at all.
  #
  # source://github_api//lib/github_api/pagination.rb#54
  def next_page; end

  # Retrives a specific result for a page given page number.
  # The <tt>page_number</tt> parameter is not validate, hitting a page
  # that does not exist will return Github API error. Consequently, if
  # there is only one page, this method returns nil
  #
  # source://github_api//lib/github_api/pagination.rb#82
  def page(page_number); end

  # Retrives the result of the previous page. Returns <tt>nil</tt> if there is
  # no previous page or no pages at all.
  #
  # source://github_api//lib/github_api/pagination.rb#62
  def prev_page; end

  # Retrives the result of the previous page. Returns <tt>nil</tt> if there is
  # no previous page or no pages at all.
  #
  # source://github_api//lib/github_api/pagination.rb#62
  def previous_page; end

  private

  # Internally used page iterator
  #
  # source://github_api//lib/github_api/pagination.rb#107
  def page_iterator; end

  class << self
    # Handle pagination params when they are not passed directly
    #
    # source://github_api//lib/github_api/pagination.rb#96
    def per_page_as_param(per_page_config); end
  end
end

# Allows you to specify parameters keys which will be preserved
# in parameters hash and its subhashes. Any keys from the nested
# hash that do not match will be removed.
#
# source://github_api//lib/github_api/parameter_filter.rb#7
module Github::ParameterFilter
  # Removes any keys from nested hashes that don't match predefiend keys
  #
  # source://github_api//lib/github_api/parameter_filter.rb#11
  def filter!(keys, params, options = T.unsafe(nil)); end
end

# Class responsible for holding request parameters
#
# source://github_api//lib/github_api/params_hash.rb#8
class Github::ParamsHash
  include ::Github::Normalizer
  include ::Github::MimeType

  # @return [ParamsHash] a new instance of ParamsHash
  #
  # source://github_api//lib/github_api/params_hash.rb#14
  def initialize(hash); end

  # Get accept header
  #
  # @api public
  #
  # source://github_api//lib/github_api/params_hash.rb#37
  def accept; end

  # Extract request data from parameters
  #
  # @api public
  #
  # source://github_api//lib/github_api/params_hash.rb#47
  def data; end

  # source://github_api//lib/github_api/params_hash.rb#55
  def encoder; end

  # Extract and parse media type param
  #
  #  [.version].param[+json]
  #
  # @api public
  #
  # source://github_api//lib/github_api/params_hash.rb#30
  def media; end

  # Update hash with default parameters for non existing keys
  #
  # source://github_api//lib/github_api/params_hash.rb#84
  def merge_default(defaults); end

  # Configuration options from request
  #
  # @api public
  # @return [Hash]
  #
  # source://github_api//lib/github_api/params_hash.rb#68
  def options; end

  # Filter out request params
  #
  # @api public
  #
  # source://github_api//lib/github_api/params_hash.rb#109
  def request_params; end

  # Base64 encode string removing newline characters
  #
  # @api public
  #
  # source://github_api//lib/github_api/params_hash.rb#96
  def strict_encode64(key); end

  class << self
    # Create empty hash
    #
    # @api public
    #
    # source://github_api//lib/github_api/params_hash.rb#21
    def empty; end
  end
end

# source://github_api//lib/github_api/params_hash.rb#12
Github::ParamsHash::REQUEST_PARAMS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/rate_limit.rb#4
module Github::RateLimit
  # source://github_api//lib/github_api/rate_limit.rb#6
  def ratelimit(*args); end

  # source://github_api//lib/github_api/rate_limit.rb#12
  def ratelimit_remaining(*args); end

  # source://github_api//lib/github_api/rate_limit.rb#18
  def ratelimit_reset(*args); end
end

# Public: Exception thrown when the maximum amount of requests is exceeded.
#
# source://github_api//lib/github_api/response/follow_redirects.rb#11
class Github::RedirectLimitReached < ::Faraday::ClientError
  # @return [RedirectLimitReached] a new instance of RedirectLimitReached
  #
  # source://github_api//lib/github_api/response/follow_redirects.rb#14
  def initialize(response); end

  # Returns the value of attribute response.
  #
  # source://github_api//lib/github_api/response/follow_redirects.rb#12
  def response; end
end

# A class responsible for dispatching http requests
#
# source://github_api//lib/github_api/request/verbs.rb#5
class Github::Request
  include ::Github::Constants
  include ::Github::Connection

  # Create a new Request
  #
  # @api public
  # @return [Github::Request]
  #
  # source://github_api//lib/github_api/request.rb#38
  def initialize(action, path, api); end

  # Return http verb
  #
  # @return [Symbol]
  #
  # source://github_api//lib/github_api/request.rb#21
  def action; end

  # Return api this request is associated with
  #
  # @return [Github::API]
  #
  # source://github_api//lib/github_api/request.rb#31
  def api; end

  # Performs a request
  #
  # @api private
  # @param method [Symbol] - The Symbol the HTTP verb
  # @param path [String] - String relative URL to access
  # @param params [ParamsHash] - ParamsHash to configure the request API
  # @return [Github::ResponseWrapper]
  #
  # source://github_api//lib/github_api/request.rb#53
  def call(current_options, params); end

  # Return url
  #
  # @return [String]
  #
  # source://github_api//lib/github_api/request.rb#26
  def path; end

  # Return url
  #
  # @return [String]
  #
  # source://github_api//lib/github_api/request.rb#26
  def path=(_arg0); end
end

# source://github_api//lib/github_api/request/basic_auth.rb#8
class Github::Request::BasicAuth < ::Faraday::Middleware
  # @api private
  # @return [BasicAuth] a new instance of BasicAuth
  #
  # source://github_api//lib/github_api/request/basic_auth.rb#12
  def initialize(app, *args); end

  # Update request headers
  #
  # @api private
  #
  # source://github_api//lib/github_api/request/basic_auth.rb#27
  def call(env); end
end

# source://github_api//lib/github_api/request.rb#14
Github::Request::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/request/jsonize.rb#6
class Github::Request::Jsonize < ::Faraday::Middleware
  # source://github_api//lib/github_api/request/jsonize.rb#13
  def call(env); end

  # source://github_api//lib/github_api/request/jsonize.rb#26
  def encode_body(value); end

  # Don't encode bodies in string form
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/request/jsonize.rb#45
  def has_body?(env); end

  # source://github_api//lib/github_api/request/jsonize.rb#49
  def request_type(env); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/request/jsonize.rb#34
  def request_with_body?(env); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/request/jsonize.rb#39
  def safe_to_modify?(env); end
end

# source://github_api//lib/github_api/request/jsonize.rb#8
Github::Request::Jsonize::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/request/jsonize.rb#9
Github::Request::Jsonize::MIME_TYPE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/request.rb#16
Github::Request::METHODS_WITH_BODIES = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/request/oauth2.rb#7
class Github::Request::OAuth2 < ::Faraday::Middleware
  include ::Github::Utils::Url

  # @return [OAuth2] a new instance of OAuth2
  #
  # source://github_api//lib/github_api/request/oauth2.rb#27
  def initialize(app, *args); end

  # source://github_api//lib/github_api/request/oauth2.rb#15
  def call(env); end

  # source://github_api//lib/github_api/request/oauth2.rb#33
  def query_params(url); end
end

# source://github_api//lib/github_api/request/oauth2.rb#10
Github::Request::OAuth2::ACCESS_TOKEN = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/request/oauth2.rb#11
Github::Request::OAuth2::AUTH_HEADER = T.let(T.unsafe(nil), String)

# Defines HTTP verbs
#
# source://github_api//lib/github_api/request/verbs.rb#8
module Github::Request::Verbs
  # Make a delete request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#48
  def delete_request(path, params = T.unsafe(nil)); end

  # Make a get request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#19
  def get_request(path, params = T.unsafe(nil)); end

  # Make a head request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#12
  def head_request(path, params = T.unsafe(nil)); end

  # Make a options request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#55
  def options_request(path, params = T.unsafe(nil)); end

  # Make a patch request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#27
  def patch_request(path, params = T.unsafe(nil)); end

  # Make a post request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#34
  def post_request(path, params = T.unsafe(nil)); end

  # Make a put request
  #
  # @api public
  #
  # source://github_api//lib/github_api/request/verbs.rb#41
  def put_request(path, params = T.unsafe(nil)); end
end

# Contains methods and attributes that act on the response returned from the
# request
#
# source://github_api//lib/github_api/response.rb#8
class Github::Response < ::Faraday::Response::Middleware
  # @return [Response] a new instance of Response
  #
  # source://github_api//lib/github_api/response.rb#19
  def initialize(app, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response.rb#28
  def parse_body?(env); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response.rb#44
  def parse_response?(env); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response.rb#38
  def parse_response_type?(type); end

  # source://github_api//lib/github_api/response.rb#24
  def process_body(env); end

  # source://github_api//lib/github_api/response.rb#32
  def response_type(env); end

  class << self
    # source://github_api//lib/github_api/response.rb#15
    def define_parser(&block); end

    # Returns the value of attribute parser.
    #
    # source://github_api//lib/github_api/response.rb#12
    def parser; end

    # Sets the attribute parser
    #
    # @param value the value to set the attribute parser to.
    #
    # source://github_api//lib/github_api/response.rb#12
    def parser=(_arg0); end
  end
end

# source://github_api//lib/github_api/response/atom_parser.rb#6
class Github::Response::AtomParser < ::Github::Response
  # source://github_api//lib/github_api/response/atom_parser.rb#12
  def initialize(app, options = T.unsafe(nil)); end

  # source://github_api//lib/github_api/response/atom_parser.rb#16
  def on_complete(env); end
end

# source://github_api//lib/github_api/response.rb#9
Github::Response::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/response/follow_redirects.rb#40
class Github::Response::FollowRedirects < ::Faraday::Middleware
  # source://github_api//lib/github_api/response/follow_redirects.rb#63
  def initialize(app, options = T.unsafe(nil)); end

  # source://github_api//lib/github_api/response/follow_redirects.rb#71
  def call(env); end

  private

  # source://github_api//lib/github_api/response/follow_redirects.rb#125
  def callback; end

  # source://github_api//lib/github_api/response/follow_redirects.rb#77
  def convert_to_get?(response); end

  # source://github_api//lib/github_api/response/follow_redirects.rb#117
  def follow_limit; end

  # source://github_api//lib/github_api/response/follow_redirects.rb#112
  def follow_redirect?(env, response); end

  # source://github_api//lib/github_api/response/follow_redirects.rb#82
  def perform_with_redirection(env, follows); end

  # source://github_api//lib/github_api/response/follow_redirects.rb#133
  def safe_escape(uri); end

  # source://github_api//lib/github_api/response/follow_redirects.rb#121
  def standards_compliant?; end

  # source://github_api//lib/github_api/response/follow_redirects.rb#97
  def update_env(env, request_body, response); end
end

# source://github_api//lib/github_api/response/follow_redirects.rb#41
Github::Response::FollowRedirects::ALLOWED_METHODS = T.let(T.unsafe(nil), Set)

# source://github_api//lib/github_api/response/follow_redirects.rb#45
Github::Response::FollowRedirects::ENV_TO_CLEAR = T.let(T.unsafe(nil), Set)

# source://github_api//lib/github_api/response/follow_redirects.rb#48
Github::Response::FollowRedirects::FOLLOW_LIMIT = T.let(T.unsafe(nil), Integer)

# source://github_api//lib/github_api/response/follow_redirects.rb#43
Github::Response::FollowRedirects::REDIRECT_CODES = T.let(T.unsafe(nil), Set)

# source://github_api//lib/github_api/response/follow_redirects.rb#52
Github::Response::FollowRedirects::URI_UNSAFE = T.let(T.unsafe(nil), Regexp)

# Represents http response header
#
# source://github_api//lib/github_api/response/header.rb#7
class Github::Response::Header < ::Struct
  include ::Github::Constants

  # source://github_api//lib/github_api/response/header.rb#16
  def [](property); end

  # source://github_api//lib/github_api/response/header.rb#24
  def accepted_oauth_scopes; end

  # Returns raw body
  #
  # source://github_api//lib/github_api/response/header.rb#80
  def body; end

  # source://github_api//lib/github_api/response/header.rb#43
  def cache_control; end

  # source://github_api//lib/github_api/response/header.rb#51
  def content_length; end

  # source://github_api//lib/github_api/response/header.rb#47
  def content_type; end

  # source://github_api//lib/github_api/response/header.rb#59
  def date; end

  # source://github_api//lib/github_api/response/header.rb#55
  def etag; end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response/header.rb#12
  def loaded?; end

  # source://github_api//lib/github_api/response/header.rb#63
  def location; end

  # source://github_api//lib/github_api/response/header.rb#20
  def oauth_scopes; end

  # Requests are limited to API v3 to 5000 per hour.
  #
  # source://github_api//lib/github_api/response/header.rb#29
  def ratelimit_limit; end

  # source://github_api//lib/github_api/response/header.rb#33
  def ratelimit_remaining; end

  # A unix timestamp describing when the ratelimit will
  # be reset
  #
  # source://github_api//lib/github_api/response/header.rb#39
  def ratelimit_reset; end

  # source://github_api//lib/github_api/response/header.rb#67
  def server; end

  # source://github_api//lib/github_api/response/header.rb#71
  def status; end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response/header.rb#75
  def success?; end
end

# source://github_api//lib/github_api/response/header.rb#10
Github::Response::Header::SUCCESSFUL_STATUSES = T.let(T.unsafe(nil), Range)

# source://github_api//lib/github_api/response/jsonize.rb#7
class Github::Response::Jsonize < ::Github::Response
  # source://github_api//lib/github_api/response/jsonize.rb#15
  def parse(body); end
end

# source://github_api//lib/github_api/response/mashify.rb#8
class Github::Response::Mashify < ::Github::Response
  # source://github_api//lib/github_api/response/mashify.rb#13
  def parse(body); end
end

# source://github_api//lib/github_api/response/raise_error.rb#10
class Github::Response::RaiseError < ::Faraday::Response::Middleware
  # Check if status code requires raising a ServiceError
  #
  # @api private
  # @raise [error_class]
  #
  # source://github_api//lib/github_api/response/raise_error.rb#11
  def on_complete(env); end
end

# A class responsible for proxing to faraday response
#
# source://github_api//lib/github_api/response_wrapper.rb#5
class Github::ResponseWrapper
  include ::Github::Constants
  include ::Github::Pagination
  include ::Enumerable
  extend ::Forwardable

  # @return [ResponseWrapper] a new instance of ResponseWrapper
  #
  # source://github_api//lib/github_api/response_wrapper.rb#18
  def initialize(response, current_api); end

  # Compare the wrapper with other wrapper for equality
  #
  # source://github_api//lib/github_api/response_wrapper.rb#148
  def ==(other); end

  # Lookup an attribute from the body if hash, otherwise behave like array index.
  # Convert any key to string before calling.
  #
  # source://github_api//lib/github_api/response_wrapper.rb#80
  def [](key); end

  # Response raw body
  #
  # source://github_api//lib/github_api/response_wrapper.rb#45
  def body; end

  # source://github_api//lib/github_api/response_wrapper.rb#38
  def body=(value); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#63
  def client_error?; end

  # Returns the value of attribute current_api.
  #
  # source://github_api//lib/github_api/response_wrapper.rb#12
  def current_api; end

  # Iterate over each resource inside the body
  #
  # source://github_api//lib/github_api/response_wrapper.rb#108
  def each; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def empty?(*args, &block); end

  # Returns the value of attribute env.
  #
  # source://github_api//lib/github_api/response_wrapper.rb#14
  def env; end

  # Compare the wrapper with other wrapper for equality
  #
  # source://github_api//lib/github_api/response_wrapper.rb#148
  def eql?(other); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def first(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def flatten(*args, &block); end

  # source://github_api//lib/github_api/response_wrapper.rb#27
  def fork; end

  # Check if body has an attribute
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#116
  def has_key?(key); end

  # Return response headers
  #
  # source://github_api//lib/github_api/response_wrapper.rb#73
  def headers; end

  # source://github_api//lib/github_api/response_wrapper.rb#27
  def id; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def include?(*args, &block); end

  # Print only response body
  #
  # source://github_api//lib/github_api/response_wrapper.rb#142
  def inspect; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def keys(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def length(*args, &block); end

  # Coerce any method calls for body attributes
  #
  # source://github_api//lib/github_api/response_wrapper.rb#122
  def method_missing(method_name, *args, &block); end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#59
  def redirect?; end

  # Check if method is defined on the body
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#132
  def respond_to?(method_name, include_all = T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://github_api//lib/github_api/response_wrapper.rb#10
  def response; end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#67
  def server_error?; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def size(*args, &block); end

  # Response status
  #
  # source://github_api//lib/github_api/response_wrapper.rb#51
  def status; end

  # @return [Boolean]
  #
  # source://github_api//lib/github_api/response_wrapper.rb#55
  def success?; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def to_a(*args, &block); end

  # Convert the ResponseWrapper into an Array
  #
  # source://github_api//lib/github_api/response_wrapper.rb#102
  def to_ary; end

  # Convert the ResponseWrapper into a Hash
  #
  # source://github_api//lib/github_api/response_wrapper.rb#96
  def to_hash; end

  # Return response body as string
  #
  # source://github_api//lib/github_api/response_wrapper.rb#90
  def to_s; end

  # source://github_api//lib/github_api/response_wrapper.rb#27
  def type; end

  # Request url
  #
  # source://github_api//lib/github_api/response_wrapper.rb#34
  def url; end
end

# source://github_api//lib/github_api/utils/url.rb#5
module Github::Utils; end

# source://github_api//lib/github_api/utils/url.rb#6
module Github::Utils::Url
  extend ::Github::Utils::Url

  # source://github_api//lib/github_api/utils/url.rb#21
  def build_query(params); end

  # source://github_api//lib/github_api/utils/url.rb#15
  def escape(s); end

  # source://github_api//lib/github_api/utils/url.rb#13
  def escape_uri(s); end

  # source://github_api//lib/github_api/utils/url.rb#19
  def normalize(s); end

  # source://github_api//lib/github_api/utils/url.rb#31
  def parse_query(query_string); end

  # source://github_api//lib/github_api/utils/url.rb#51
  def parse_query_for_param(query_string, name); end

  # source://github_api//lib/github_api/utils/url.rb#17
  def unescape(s); end
end

# source://github_api//lib/github_api/utils/url.rb#9
Github::Utils::Url::DEFAULT_QUERY_SEP = T.let(T.unsafe(nil), Regexp)

# source://github_api//lib/github_api/utils/url.rb#11
Github::Utils::Url::KEY_VALUE_SEP = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/version.rb#4
Github::VERSION = T.let(T.unsafe(nil), String)

# source://github_api//lib/github_api/validations.rb#4
module Github::Validations
  include ::Github::Validations::Presence
  include ::Github::Validations::Format
  include ::Github::Validations::Token
  include ::Github::Validations::Required
end

# source://github_api//lib/github_api/validations/format.rb#5
module Github::Validations::Format
  # Ensures that value for a given key is of the correct form whether
  # matching regular expression or set of predefined values.
  #
  # source://github_api//lib/github_api/validations/format.rb#10
  def assert_valid_values(permitted, params); end
end

# A mixin to help validate presence of non-empty values
#
# source://github_api//lib/github_api/validations/presence.rb#6
module Github::Validations::Presence
  # Ensure that esential arguments are present before request is made.
  #
  # == Parameters
  #  Hash/Array of arguments to be checked against nil and empty string
  #
  # == Example
  #  assert_presence_of user: '...', repo: '...'
  #  assert_presence_of user, repo
  #
  # @raise [Github::Error::Validations]
  #
  # source://github_api//lib/github_api/validations/presence.rb#17
  def assert_presence_of(*args); end
end

# source://github_api//lib/github_api/validations/required.rb#5
module Github::Validations::Required
  # Validate all keys present in a provided hash against required set,
  # on mismatch raise Github::Error::RequiredParams
  # Note that keys need to be in the same format i.e. symbols or strings,
  # otherwise the comparison will fail.
  #
  # @api public
  #
  # source://github_api//lib/github_api/validations/required.rb#12
  def assert_required_keys(*required, provided); end
end

# source://github_api//lib/github_api/validations/token.rb#5
module Github::Validations::Token
  # Ensures that required authentication token is present before
  # request is sent.
  #
  # source://github_api//lib/github_api/validations/token.rb#27
  def validates_token_for(method, path); end
end

# source://github_api//lib/github_api/validations/token.rb#7
Github::Validations::Token::TOKEN_REQUIRED = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/validations/token.rb#20
Github::Validations::Token::TOKEN_REQUIRED_REGEXP = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/validations.rb#17
Github::Validations::VALID_API_KEYS = T.let(T.unsafe(nil), Array)

# source://github_api//lib/github_api/core_ext/hash.rb#3
class Hash
  include ::Enumerable

  # Returns true if the given key is present inside deeply nested hash
  #
  # @return [Boolean]
  #
  # source://github_api//lib/github_api/core_ext/hash.rb#67
  def deep_key?(key); end

  # Searches for all deeply nested keys
  #
  # source://github_api//lib/github_api/core_ext/hash.rb#54
  def deep_keys; end

  # Returns hash collapsed into a query string
  #
  # source://github_api//lib/github_api/core_ext/hash.rb#48
  def serialize; end
end
