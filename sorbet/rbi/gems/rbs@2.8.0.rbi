# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbs` gem.
# Please instead update this file by running `bin/tapioca gem rbs`.

# source://rbs//lib/rbs/namespace.rb#120
module Kernel
  # source://rbs//lib/rbs/namespace.rb#121
  def Namespace(name); end

  # source://rbs//lib/rbs/type_name.rb#93
  def TypeName(string); end
end

# source://rbs//lib/rbs/version.rb#3
module RBS
  class << self
    # source://rbs//lib/rbs.rb#63
    def logger; end

    # Returns the value of attribute logger_level.
    #
    # source://rbs//lib/rbs.rb#60
    def logger_level; end

    # source://rbs//lib/rbs.rb#72
    def logger_level=(level); end

    # Returns the value of attribute logger_output.
    #
    # source://rbs//lib/rbs.rb#61
    def logger_output; end

    # source://rbs//lib/rbs.rb#67
    def logger_output=(val); end

    # source://rbs//lib/rbs.rb#77
    def print_warning; end
  end
end

# source://rbs//lib/rbs/ast/type_param.rb#4
module RBS::AST; end

# source://rbs//lib/rbs/ast/annotation.rb#5
class RBS::AST::Annotation
  # @return [Annotation] a new instance of Annotation
  #
  # source://rbs//lib/rbs/ast/annotation.rb#9
  def initialize(string:, location:); end

  # source://rbs//lib/rbs/ast/annotation.rb#14
  def ==(other); end

  # source://rbs//lib/rbs/ast/annotation.rb#14
  def eql?(other); end

  # source://rbs//lib/rbs/ast/annotation.rb#20
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/annotation.rb#7
  def location; end

  # Returns the value of attribute string.
  #
  # source://rbs//lib/rbs/ast/annotation.rb#6
  def string; end

  # source://rbs//lib/rbs/ast/annotation.rb#24
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/comment.rb#5
class RBS::AST::Comment
  # @return [Comment] a new instance of Comment
  #
  # source://rbs//lib/rbs/ast/comment.rb#9
  def initialize(string:, location:); end

  # source://rbs//lib/rbs/ast/comment.rb#14
  def ==(other); end

  # source://rbs//lib/rbs/ast/comment.rb#14
  def eql?(other); end

  # source://rbs//lib/rbs/ast/comment.rb#20
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/comment.rb#7
  def location; end

  # Returns the value of attribute string.
  #
  # source://rbs//lib/rbs/ast/comment.rb#6
  def string; end

  # source://rbs//lib/rbs/ast/comment.rb#24
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/declarations.rb#5
module RBS::AST::Declarations; end

# source://rbs//lib/rbs/ast/declarations.rb#268
class RBS::AST::Declarations::Alias < ::RBS::AST::Declarations::Base
  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/ast/declarations.rb#276
  def initialize(name:, type_params:, type:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#285
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#272
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#274
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#285
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#294
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#273
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#269
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#298
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#271
  def type; end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#270
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#6
class RBS::AST::Declarations::Base; end

# source://rbs//lib/rbs/ast/declarations.rb#55
class RBS::AST::Declarations::Class < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::NestedDeclarationHelper
  include ::RBS::AST::Declarations::MixinHelper

  # @return [Class] a new instance of Class
  #
  # source://rbs//lib/rbs/ast/declarations.rb#97
  def initialize(name:, type_params:, super_class:, members:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#107
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#93
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#95
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#107
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#117
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#94
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#91
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#89
  def name; end

  # Returns the value of attribute super_class.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#92
  def super_class; end

  # source://rbs//lib/rbs/ast/declarations.rb#121
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#90
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#56
class RBS::AST::Declarations::Class::Super
  # @return [Super] a new instance of Super
  #
  # source://rbs//lib/rbs/ast/declarations.rb#61
  def initialize(name:, args:, location:); end

  # source://rbs//lib/rbs/ast/declarations.rb#67
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#58
  def args; end

  # source://rbs//lib/rbs/ast/declarations.rb#67
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#73
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#59
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#57
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#77
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/declarations.rb#311
class RBS::AST::Declarations::Constant < ::RBS::AST::Declarations::Base
  # @return [Constant] a new instance of Constant
  #
  # source://rbs//lib/rbs/ast/declarations.rb#317
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#324
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#315
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#324
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#332
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#314
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#312
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#336
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#313
  def type; end
end

# source://rbs//lib/rbs/ast/declarations.rb#347
class RBS::AST::Declarations::Global < ::RBS::AST::Declarations::Base
  # @return [Global] a new instance of Global
  #
  # source://rbs//lib/rbs/ast/declarations.rb#353
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#360
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#351
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#360
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#368
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#350
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#348
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#372
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#349
  def type; end
end

# source://rbs//lib/rbs/ast/declarations.rb#223
class RBS::AST::Declarations::Interface < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::MixinHelper

  # @return [Interface] a new instance of Interface
  #
  # source://rbs//lib/rbs/ast/declarations.rb#233
  def initialize(name:, type_params:, members:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#242
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#227
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#229
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#242
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#251
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#228
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#226
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#224
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#255
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#225
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#35
module RBS::AST::Declarations::MixinHelper
  # source://rbs//lib/rbs/ast/declarations.rb#36
  def each_mixin(&block); end
end

# source://rbs//lib/rbs/ast/declarations.rb#135
class RBS::AST::Declarations::Module < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::NestedDeclarationHelper
  include ::RBS::AST::Declarations::MixinHelper

  # @return [Module] a new instance of Module
  #
  # source://rbs//lib/rbs/ast/declarations.rb#185
  def initialize(name:, type_params:, members:, self_types:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#195
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#181
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#183
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#195
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#205
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#180
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#179
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#177
  def name; end

  # Returns the value of attribute self_types.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#182
  def self_types; end

  # source://rbs//lib/rbs/ast/declarations.rb#209
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#178
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#136
class RBS::AST::Declarations::Module::Self
  # @return [Self] a new instance of Self
  #
  # source://rbs//lib/rbs/ast/declarations.rb#141
  def initialize(name:, args:, location:); end

  # source://rbs//lib/rbs/ast/declarations.rb#147
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#138
  def args; end

  # source://rbs//lib/rbs/ast/declarations.rb#147
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#153
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#139
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#137
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#157
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/declarations.rb#165
  def to_s; end
end

# source://rbs//lib/rbs/ast/declarations.rb#9
module RBS::AST::Declarations::NestedDeclarationHelper
  # source://rbs//lib/rbs/ast/declarations.rb#22
  def each_decl; end

  # source://rbs//lib/rbs/ast/declarations.rb#10
  def each_member; end
end

# source://rbs//lib/rbs/ast/members.rb#5
module RBS::AST::Members; end

# source://rbs//lib/rbs/ast/members.rb#363
class RBS::AST::Members::Alias < ::RBS::AST::Members::Base
  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/ast/members.rb#371
  def initialize(new_name:, old_name:, kind:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#380
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#367
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#369
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#380
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#389
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#405
  def instance?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#366
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#368
  def location; end

  # Returns the value of attribute new_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#364
  def new_name; end

  # Returns the value of attribute old_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#365
  def old_name; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#409
  def singleton?; end

  # source://rbs//lib/rbs/ast/members.rb#393
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#293
class RBS::AST::Members::AttrAccessor < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute

  # source://rbs//lib/rbs/ast/members.rb#296
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#275
class RBS::AST::Members::AttrReader < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute

  # source://rbs//lib/rbs/ast/members.rb#278
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#311
class RBS::AST::Members::AttrWriter < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute

  # source://rbs//lib/rbs/ast/members.rb#314
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#224
module RBS::AST::Members::Attribute
  # source://rbs//lib/rbs/ast/members.rb#234
  def initialize(name:, type:, ivar_name:, kind:, annotations:, location:, comment:, visibility: T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/members.rb#245
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#229
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#231
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#245
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#256
  def hash; end

  # Returns the value of attribute ivar_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#228
  def ivar_name; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#227
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#230
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#225
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/members.rb#226
  def type; end

  # source://rbs//lib/rbs/ast/members.rb#260
  def update(name: T.unsafe(nil), type: T.unsafe(nil), ivar_name: T.unsafe(nil), kind: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # Returns the value of attribute visibility.
  #
  # source://rbs//lib/rbs/ast/members.rb#232
  def visibility; end
end

# source://rbs//lib/rbs/ast/members.rb#6
class RBS::AST::Members::Base; end

# source://rbs//lib/rbs/ast/members.rb#123
class RBS::AST::Members::ClassInstanceVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var

  # source://rbs//lib/rbs/ast/members.rb#126
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#137
class RBS::AST::Members::ClassVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var

  # source://rbs//lib/rbs/ast/members.rb#140
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#194
class RBS::AST::Members::Extend < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin

  # source://rbs//lib/rbs/ast/members.rb#197
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#179
class RBS::AST::Members::Include < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin

  # source://rbs//lib/rbs/ast/members.rb#182
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#109
class RBS::AST::Members::InstanceVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var

  # source://rbs//lib/rbs/ast/members.rb#112
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#329
module RBS::AST::Members::LocationOnly
  # source://rbs//lib/rbs/ast/members.rb#332
  def initialize(location:); end

  # source://rbs//lib/rbs/ast/members.rb#336
  def ==(other); end

  # source://rbs//lib/rbs/ast/members.rb#336
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#342
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#330
  def location; end
end

# source://rbs//lib/rbs/ast/members.rb#9
class RBS::AST::Members::MethodDefinition < ::RBS::AST::Members::Base
  # @return [MethodDefinition] a new instance of MethodDefinition
  #
  # source://rbs//lib/rbs/ast/members.rb#19
  def initialize(name:, kind:, types:, annotations:, location:, comment:, overload:, visibility: T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/members.rb#30
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#13
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#15
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#30
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#41
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#45
  def instance?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#11
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#14
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#10
  def name; end

  # Returns the value of attribute overload.
  #
  # source://rbs//lib/rbs/ast/members.rb#16
  def overload; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#53
  def overload?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#49
  def singleton?; end

  # source://rbs//lib/rbs/ast/members.rb#70
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/ast/members.rb#12
  def types; end

  # source://rbs//lib/rbs/ast/members.rb#57
  def update(name: T.unsafe(nil), kind: T.unsafe(nil), types: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), overload: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # Returns the value of attribute visibility.
  #
  # source://rbs//lib/rbs/ast/members.rb#17
  def visibility; end
end

# source://rbs//lib/rbs/ast/members.rb#151
module RBS::AST::Members::Mixin
  # source://rbs//lib/rbs/ast/members.rb#158
  def initialize(name:, args:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#166
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#154
  def annotations; end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/members.rb#153
  def args; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#156
  def comment; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#170
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#174
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#155
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#152
  def name; end
end

# source://rbs//lib/rbs/ast/members.rb#209
class RBS::AST::Members::Prepend < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin

  # source://rbs//lib/rbs/ast/members.rb#212
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#355
class RBS::AST::Members::Private < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::LocationOnly

  # source://rbs//lib/rbs/ast/members.rb#358
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#347
class RBS::AST::Members::Public < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::LocationOnly

  # source://rbs//lib/rbs/ast/members.rb#350
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#85
module RBS::AST::Members::Var
  # source://rbs//lib/rbs/ast/members.rb#91
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#98
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#89
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#98
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#104
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#88
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#86
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/members.rb#87
  def type; end
end

# source://rbs//lib/rbs/ast/type_param.rb#5
class RBS::AST::TypeParam
  # @return [TypeParam] a new instance of TypeParam
  #
  # source://rbs//lib/rbs/ast/type_param.rb#8
  def initialize(name:, variance:, upper_bound:, location:); end

  # source://rbs//lib/rbs/ast/type_param.rb#25
  def ==(other); end

  # source://rbs//lib/rbs/ast/type_param.rb#25
  def eql?(other); end

  # source://rbs//lib/rbs/ast/type_param.rb#35
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#6
  def location; end

  # source://rbs//lib/rbs/ast/type_param.rb#58
  def map_type(&block); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#6
  def name; end

  # source://rbs//lib/rbs/ast/type_param.rb#49
  def rename(name); end

  # source://rbs//lib/rbs/ast/type_param.rb#39
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/type_param.rb#110
  def to_s; end

  # source://rbs//lib/rbs/ast/type_param.rb#16
  def unchecked!(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/type_param.rb#21
  def unchecked?; end

  # Returns the value of attribute upper_bound.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#6
  def upper_bound; end

  # Returns the value of attribute variance.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#6
  def variance; end

  class << self
    # source://rbs//lib/rbs/ast/type_param.rb#93
    def rename(params, new_names:); end

    # source://rbs//lib/rbs/ast/type_param.rb#71
    def resolve_variables(params); end

    # source://rbs//lib/rbs/ast/type_param.rb#81
    def subst_var(vars, type); end
  end
end

# source://rbs//lib/rbs/ancestor_graph.rb#4
class RBS::AncestorGraph
  # @return [AncestorGraph] a new instance of AncestorGraph
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#13
  def initialize(env:, ancestor_builder: T.unsafe(nil)); end

  # Returns the value of attribute ancestor_builder.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#9
  def ancestor_builder; end

  # source://rbs//lib/rbs/ancestor_graph.rb#19
  def build; end

  # source://rbs//lib/rbs/ancestor_graph.rb#32
  def build_ancestors(node, ancestors); end

  # Returns the value of attribute children.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#11
  def children; end

  # source://rbs//lib/rbs/ancestor_graph.rb#64
  def each_ancestor(node, yielded: T.unsafe(nil), &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#56
  def each_child(node, &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#78
  def each_descendant(node, yielded: T.unsafe(nil), &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#48
  def each_parent(node, &block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#8
  def env; end

  # Returns the value of attribute parents.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#10
  def parents; end

  # source://rbs//lib/rbs/ancestor_graph.rb#43
  def register(parent:, child:); end
end

# source://rbs//lib/rbs/ancestor_graph.rb#5
class RBS::AncestorGraph::InstanceNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/ancestor_graph.rb#6
class RBS::AncestorGraph::SingletonNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/errors.rb#19
class RBS::BaseError < ::StandardError; end

# source://rbs//lib/rbs/buffer.rb#4
class RBS::Buffer
  # @return [Buffer] a new instance of Buffer
  #
  # source://rbs//lib/rbs/buffer.rb#8
  def initialize(name:, content:); end

  # Returns the value of attribute content.
  #
  # source://rbs//lib/rbs/buffer.rb#6
  def content; end

  # source://rbs//lib/rbs/buffer.rb#58
  def inspect; end

  # source://rbs//lib/rbs/buffer.rb#54
  def last_position; end

  # source://rbs//lib/rbs/buffer.rb#13
  def lines; end

  # source://rbs//lib/rbs/buffer.rb#44
  def loc_to_pos(loc); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/buffer.rb#5
  def name; end

  # source://rbs//lib/rbs/buffer.rb#32
  def pos_to_loc(pos); end

  # source://rbs//lib/rbs/buffer.rb#17
  def ranges; end
end

# source://rbs//lib/rbs/builtin_names.rb#4
module RBS::BuiltinNames; end

# source://rbs//lib/rbs/builtin_names.rb#45
RBS::BuiltinNames::Array = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#37
RBS::BuiltinNames::BasicObject = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#43
RBS::BuiltinNames::Class = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#41
RBS::BuiltinNames::Comparable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#42
RBS::BuiltinNames::Enumerable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#48
RBS::BuiltinNames::Enumerator = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#55
RBS::BuiltinNames::FalseClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#52
RBS::BuiltinNames::Float = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#46
RBS::BuiltinNames::Hash = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#51
RBS::BuiltinNames::Integer = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#39
RBS::BuiltinNames::Kernel = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#44
RBS::BuiltinNames::Module = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#5
class RBS::BuiltinNames::Name
  # @return [Name] a new instance of Name
  #
  # source://rbs//lib/rbs/builtin_names.rb#8
  def initialize(name:); end

  # source://rbs//lib/rbs/builtin_names.rb#16
  def instance_type(*args); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/builtin_names.rb#20
  def instance_type?(type); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/builtin_names.rb#6
  def name; end

  # source://rbs//lib/rbs/builtin_names.rb#24
  def singleton_type; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/builtin_names.rb#28
  def singleton_type?(type); end

  # source://rbs//lib/rbs/builtin_names.rb#12
  def to_s; end

  class << self
    # source://rbs//lib/rbs/builtin_names.rb#32
    def define(name, namespace: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/builtin_names.rb#56
RBS::BuiltinNames::Numeric = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#38
RBS::BuiltinNames::Object = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#47
RBS::BuiltinNames::Range = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#53
RBS::BuiltinNames::Regexp = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#49
RBS::BuiltinNames::Set = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#40
RBS::BuiltinNames::String = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#50
RBS::BuiltinNames::Symbol = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#54
RBS::BuiltinNames::TrueClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/collection/sources/base.rb#4
module RBS::Collection; end

# source://rbs//lib/rbs/collection/cleaner.rb#5
class RBS::Collection::Cleaner
  # @return [Cleaner] a new instance of Cleaner
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#8
  def initialize(lockfile_path:); end

  # source://rbs//lib/rbs/collection/cleaner.rb#12
  def clean; end

  # Returns the value of attribute lock.
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#6
  def lock; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#23
  def needed?(gem_name, version); end
end

# This class represent the configuration file.
#
# source://rbs//lib/rbs/collection/config.rb#7
class RBS::Collection::Config
  # @return [Config] a new instance of Config
  #
  # source://rbs//lib/rbs/collection/config.rb#49
  def initialize(data, config_path:); end

  # source://rbs//lib/rbs/collection/config.rb#54
  def add_gem(gem); end

  # It raises an error when there are non-available libraries
  #
  # @raise [CollectionNotAvailable]
  #
  # source://rbs//lib/rbs/collection/config.rb#94
  def check_rbs_availability!; end

  # source://rbs//lib/rbs/collection/config.rb#75
  def dump_to(io); end

  # source://rbs//lib/rbs/collection/config.rb#58
  def gem(gem_name); end

  # source://rbs//lib/rbs/collection/config.rb#87
  def gemfile_lock_path; end

  # source://rbs//lib/rbs/collection/config.rb#83
  def gemfile_lock_path=(path); end

  # source://rbs//lib/rbs/collection/config.rb#79
  def gems; end

  # source://rbs//lib/rbs/collection/config.rb#62
  def repo_path; end

  # source://rbs//lib/rbs/collection/config.rb#66
  def sources; end

  class << self
    # source://rbs//lib/rbs/collection/config.rb#19
    def find_config_path; end

    # source://rbs//lib/rbs/collection/config.rb#36
    def from_path(path); end

    # Generate a rbs lockfile from Gemfile.lock to `config_path`.
    # If `with_lockfile` is true, it respects existing rbs lockfile.
    #
    # source://rbs//lib/rbs/collection/config.rb#32
    def generate_lockfile(config_path:, gemfile_lock_path:, with_lockfile: T.unsafe(nil)); end

    # source://rbs//lib/rbs/collection/config.rb#40
    def lockfile_of(config_path); end

    # source://rbs//lib/rbs/collection/config.rb#45
    def to_lockfile_path(config_path); end
  end
end

# source://rbs//lib/rbs/collection/config.rb#8
class RBS::Collection::Config::CollectionNotAvailable < ::StandardError
  # @return [CollectionNotAvailable] a new instance of CollectionNotAvailable
  #
  # source://rbs//lib/rbs/collection/config.rb#9
  def initialize; end
end

# source://rbs//lib/rbs/collection/config/lockfile_generator.rb#6
class RBS::Collection::Config::LockfileGenerator
  # @return [LockfileGenerator] a new instance of LockfileGenerator
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#29
  def initialize(config_path:, gemfile_lock_path:, with_lockfile:); end

  # Returns the value of attribute config.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#23
  def config; end

  # Returns the value of attribute gemfile_lock.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#23
  def gemfile_lock; end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#41
  def generate; end

  # Returns the value of attribute lock.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#23
  def lock; end

  # Returns the value of attribute lock_path.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#23
  def lock_path; end

  private

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#67
  def assign_gem(name:, version:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#124
  def find_best_version(version:, versions:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#118
  def find_source(name:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#112
  def gemfile_lock_gems(&block); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#108
  def remove_ignored_gems!; end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#100
  def upsert_gem(old, new); end

  # @raise [GemfileLockMismatchError]
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#59
  def validate_gemfile_lock_path!(lock:, gemfile_lock_path:); end

  class << self
    # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#25
    def generate(config_path:, gemfile_lock_path:, with_lockfile: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/collection/config/lockfile_generator.rb#7
class RBS::Collection::Config::LockfileGenerator::GemfileLockMismatchError < ::StandardError
  # @return [GemfileLockMismatchError] a new instance of GemfileLockMismatchError
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#8
  def initialize(expected:, actual:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#13
  def message; end
end

# source://rbs//lib/rbs/collection/config.rb#17
RBS::Collection::Config::PATH = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/collection/installer.rb#5
class RBS::Collection::Installer
  # @return [Installer] a new instance of Installer
  #
  # source://rbs//lib/rbs/collection/installer.rb#9
  def initialize(lockfile_path:, stdout: T.unsafe(nil)); end

  # source://rbs//lib/rbs/collection/installer.rb#14
  def install_from_lockfile; end

  # Returns the value of attribute lockfile.
  #
  # source://rbs//lib/rbs/collection/installer.rb#6
  def lockfile; end

  # Returns the value of attribute stdout.
  #
  # source://rbs//lib/rbs/collection/installer.rb#7
  def stdout; end

  private

  # source://rbs//lib/rbs/collection/installer.rb#23
  def source_for(config_entry); end
end

# source://rbs//lib/rbs/collection/sources/base.rb#5
module RBS::Collection::Sources
  class << self
    # source://rbs//lib/rbs/collection/sources.rb#11
    def from_config_entry(source_entry); end
  end
end

# source://rbs//lib/rbs/collection/sources/base.rb#6
module RBS::Collection::Sources::Base
  # source://rbs//lib/rbs/collection/sources/base.rb#7
  def dependencies_of(config_entry); end
end

# source://rbs//lib/rbs/collection/sources/git.rb#10
class RBS::Collection::Sources::Git
  include ::RBS::Collection::Sources::Base

  # @return [Git] a new instance of Git
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#18
  def initialize(name:, revision:, remote:, repo_dir:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#26
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/git.rb#36
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#56
  def manifest_of(config_entry); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#16
  def name; end

  # Returns the value of attribute remote.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#16
  def remote; end

  # Returns the value of attribute repo_dir.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#16
  def repo_dir; end

  # source://rbs//lib/rbs/collection/sources/git.rb#90
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/git.rb#31
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/git.rb#65
  def _install(dest:, config_entry:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#76
  def cp_r(src, dest); end

  # source://rbs//lib/rbs/collection/sources/git.rb#100
  def format_config_entry(config_entry); end

  # source://rbs//lib/rbs/collection/sources/git.rb#153
  def gem_repo_dir; end

  # source://rbs//lib/rbs/collection/sources/git.rb#165
  def git(*cmd, **opt); end

  # source://rbs//lib/rbs/collection/sources/git.rb#143
  def git_dir; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#132
  def need_to_fetch?(revision); end

  # source://rbs//lib/rbs/collection/sources/git.rb#161
  def resolve_revision; end

  # source://rbs//lib/rbs/collection/sources/git.rb#157
  def resolved_revision; end

  # source://rbs//lib/rbs/collection/sources/git.rb#110
  def setup!(revision:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#169
  def sh!(*cmd, **opt); end
end

# source://rbs//lib/rbs/collection/sources/git.rb#14
class RBS::Collection::Sources::Git::CommandError < ::StandardError; end

# source://rbs//lib/rbs/collection/sources/git.rb#12
RBS::Collection::Sources::Git::METADATA_FILENAME = T.let(T.unsafe(nil), String)

# Signatures that are inclduded in gem package as sig/ directory.
#
# source://rbs//lib/rbs/collection/sources/rubygems.rb#9
class RBS::Collection::Sources::Rubygems
  include ::RBS::Collection::Sources::Base
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/rubygems.rb#13
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#23
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#31
  def manifest_of(config_entry); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#38
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#17
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#44
  def gem_sig_path(config_entry); end
end

# signatures that are bundled in rbs gem under the stdlib/ directory
#
# source://rbs//lib/rbs/collection/sources/stdlib.rb#9
class RBS::Collection::Sources::Stdlib
  include ::RBS::Collection::Sources::Base
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/stdlib.rb#15
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#23
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#31
  def manifest_of(config_entry); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#37
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#19
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#43
  def lookup(config_entry); end
end

# source://rbs//lib/rbs/collection/sources/stdlib.rb#13
RBS::Collection::Sources::Stdlib::REPO = T.let(T.unsafe(nil), RBS::Repository)

# source://rbs//lib/rbs/constant.rb#4
class RBS::Constant
  # @return [Constant] a new instance of Constant
  #
  # source://rbs//lib/rbs/constant.rb#9
  def initialize(name:, type:, entry:); end

  # source://rbs//lib/rbs/constant.rb#15
  def ==(other); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/constant.rb#7
  def entry; end

  # source://rbs//lib/rbs/constant.rb#15
  def eql?(other); end

  # source://rbs//lib/rbs/constant.rb#24
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/constant.rb#5
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/constant.rb#6
  def type; end
end

# source://rbs//lib/rbs/constant_table.rb#4
class RBS::ConstantTable
  # @return [ConstantTable] a new instance of ConstantTable
  #
  # source://rbs//lib/rbs/constant_table.rb#16
  def initialize(builder:); end

  # source://rbs//lib/rbs/constant_table.rb#21
  def absolute_type(type, context:); end

  # source://rbs//lib/rbs/constant_table.rb#27
  def absolute_type_name(type_name, context:, location:); end

  # source://rbs//lib/rbs/constant_table.rb#108
  def constant_scopes(name); end

  # source://rbs//lib/rbs/constant_table.rb#131
  def constant_scopes0(name, scopes: T.unsafe(nil)); end

  # Returns the value of attribute constant_scopes_cache.
  #
  # source://rbs//lib/rbs/constant_table.rb#6
  def constant_scopes_cache; end

  # source://rbs//lib/rbs/constant_table.rb#112
  def constant_scopes_module(name, scopes:); end

  # Returns the value of attribute definition_builder.
  #
  # source://rbs//lib/rbs/constant_table.rb#5
  def definition_builder; end

  # source://rbs//lib/rbs/constant_table.rb#8
  def env; end

  # source://rbs//lib/rbs/constant_table.rb#32
  def name_to_constant(name); end

  # source://rbs//lib/rbs/constant_table.rb#47
  def resolve_constant_reference(name, context:); end

  # source://rbs//lib/rbs/constant_table.rb#78
  def resolve_constant_reference_context(name, context:); end

  # source://rbs//lib/rbs/constant_table.rb#91
  def resolve_constant_reference_inherit(name, scopes:, no_object: T.unsafe(nil)); end

  # source://rbs//lib/rbs/constant_table.rb#12
  def resolver; end

  # source://rbs//lib/rbs/constant_table.rb#43
  def split_name(name); end
end

# source://rbs//lib/rbs/errors.rb#469
class RBS::CyclicTypeParameterBound < ::RBS::BaseError
  # @return [CyclicTypeParameterBound] a new instance of CyclicTypeParameterBound
  #
  # source://rbs//lib/rbs/errors.rb#472
  def initialize(type_name:, method_name:, params:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#470
  def location; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#470
  def method_name; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/errors.rb#470
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#470
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#4
class RBS::Definition
  # @return [Definition] a new instance of Definition
  #
  # source://rbs//lib/rbs/definition.rb#287
  def initialize(type_name:, entry:, self_type:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#281
  def ancestors; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#310
  def class?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#327
  def class_type?; end

  # Returns the value of attribute class_variables.
  #
  # source://rbs//lib/rbs/definition.rb#285
  def class_variables; end

  # source://rbs//lib/rbs/definition.rb#372
  def each_type(&block); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/definition.rb#280
  def entry; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#331
  def instance_type?; end

  # Returns the value of attribute instance_variables.
  #
  # source://rbs//lib/rbs/definition.rb#284
  def instance_variables; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#318
  def interface?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#335
  def interface_type?; end

  # source://rbs//lib/rbs/definition.rb#362
  def map_method_type(&block); end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition.rb#283
  def methods; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#314
  def module?; end

  # Returns the value of attribute self_type.
  #
  # source://rbs//lib/rbs/definition.rb#282
  def self_type; end

  # source://rbs//lib/rbs/definition.rb#352
  def sub(s); end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#279
  def type_name; end

  # source://rbs//lib/rbs/definition.rb#339
  def type_params; end

  # source://rbs//lib/rbs/definition.rb#343
  def type_params_decl; end
end

# source://rbs//lib/rbs/definition.rb#189
module RBS::Definition::Ancestor; end

# source://rbs//lib/rbs/definition.rb#190
class RBS::Definition::Ancestor::Instance
  # @return [Instance] a new instance of Instance
  #
  # source://rbs//lib/rbs/definition.rb#193
  def initialize(name:, args:, source:); end

  # source://rbs//lib/rbs/definition.rb#199
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/definition.rb#191
  def args; end

  # source://rbs//lib/rbs/definition.rb#199
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#205
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/definition.rb#191
  def name; end

  # Returns the value of attribute source.
  #
  # source://rbs//lib/rbs/definition.rb#191
  def source; end
end

# source://rbs//lib/rbs/definition.rb#210
class RBS::Definition::Ancestor::Singleton
  # @return [Singleton] a new instance of Singleton
  #
  # source://rbs//lib/rbs/definition.rb#213
  def initialize(name:); end

  # source://rbs//lib/rbs/definition.rb#217
  def ==(other); end

  # source://rbs//lib/rbs/definition.rb#217
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#223
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/definition.rb#211
  def name; end
end

# source://rbs//lib/rbs/definition.rb#229
class RBS::Definition::InstanceAncestors
  # @return [InstanceAncestors] a new instance of InstanceAncestors
  #
  # source://rbs//lib/rbs/definition.rb#234
  def initialize(type_name:, params:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#232
  def ancestors; end

  # source://rbs//lib/rbs/definition.rb#240
  def apply(args, location:); end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/definition.rb#231
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#230
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#25
class RBS::Definition::Method
  # @return [Method] a new instance of Method
  #
  # source://rbs//lib/rbs/definition.rb#81
  def initialize(super_method:, defs:, accessibility:, alias_of:, annotations: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition.rb#89
  def ==(other); end

  # Returns the value of attribute accessibility.
  #
  # source://rbs//lib/rbs/definition.rb#77
  def accessibility; end

  # Returns the value of attribute alias_of.
  #
  # source://rbs//lib/rbs/definition.rb#79
  def alias_of; end

  # source://rbs//lib/rbs/definition.rb#126
  def annotations; end

  # source://rbs//lib/rbs/definition.rb#122
  def comments; end

  # source://rbs//lib/rbs/definition.rb#104
  def defined_in; end

  # Returns the value of attribute defs.
  #
  # source://rbs//lib/rbs/definition.rb#76
  def defs; end

  # source://rbs//lib/rbs/definition.rb#89
  def eql?(other); end

  # Returns the value of attribute extra_annotations.
  #
  # source://rbs//lib/rbs/definition.rb#78
  def extra_annotations; end

  # source://rbs//lib/rbs/definition.rb#100
  def hash; end

  # source://rbs//lib/rbs/definition.rb#111
  def implemented_in; end

  # source://rbs//lib/rbs/definition.rb#169
  def map_method_type(&block); end

  # source://rbs//lib/rbs/definition.rb#151
  def map_type(&block); end

  # source://rbs//lib/rbs/definition.rb#160
  def map_type_bound(&block); end

  # source://rbs//lib/rbs/definition.rb#130
  def members; end

  # source://rbs//lib/rbs/definition.rb#118
  def method_types; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#138
  def private?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#134
  def public?; end

  # source://rbs//lib/rbs/definition.rb#142
  def sub(s); end

  # Returns the value of attribute super_method.
  #
  # source://rbs//lib/rbs/definition.rb#75
  def super_method; end

  # source://rbs//lib/rbs/definition.rb#178
  def update(super_method: T.unsafe(nil), defs: T.unsafe(nil), accessibility: T.unsafe(nil), alias_of: T.unsafe(nil), annotations: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/definition.rb#26
class RBS::Definition::Method::TypeDef
  # @return [TypeDef] a new instance of TypeDef
  #
  # source://rbs//lib/rbs/definition.rb#32
  def initialize(type:, member:, defined_in:, implemented_in:); end

  # source://rbs//lib/rbs/definition.rb#39
  def ==(other); end

  # source://rbs//lib/rbs/definition.rb#57
  def annotations; end

  # source://rbs//lib/rbs/definition.rb#53
  def comment; end

  # Returns the value of attribute defined_in.
  #
  # source://rbs//lib/rbs/definition.rb#29
  def defined_in; end

  # source://rbs//lib/rbs/definition.rb#39
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#49
  def hash; end

  # Returns the value of attribute implemented_in.
  #
  # source://rbs//lib/rbs/definition.rb#30
  def implemented_in; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/definition.rb#28
  def member; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#65
  def overload?; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition.rb#27
  def type; end

  # source://rbs//lib/rbs/definition.rb#61
  def update(type: T.unsafe(nil), member: T.unsafe(nil), defined_in: T.unsafe(nil), implemented_in: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/definition.rb#269
class RBS::Definition::SingletonAncestors
  # @return [SingletonAncestors] a new instance of SingletonAncestors
  #
  # source://rbs//lib/rbs/definition.rb#273
  def initialize(type_name:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#271
  def ancestors; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#270
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#5
class RBS::Definition::Variable
  # @return [Variable] a new instance of Variable
  #
  # source://rbs//lib/rbs/definition.rb#10
  def initialize(parent_variable:, type:, declared_in:); end

  # Returns the value of attribute declared_in.
  #
  # source://rbs//lib/rbs/definition.rb#8
  def declared_in; end

  # Returns the value of attribute parent_variable.
  #
  # source://rbs//lib/rbs/definition.rb#6
  def parent_variable; end

  # source://rbs//lib/rbs/definition.rb#16
  def sub(s); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition.rb#7
  def type; end
end

# source://rbs//lib/rbs/definition_builder.rb#4
class RBS::DefinitionBuilder
  # @return [DefinitionBuilder] a new instance of DefinitionBuilder
  #
  # source://rbs//lib/rbs/definition_builder.rb#15
  def initialize(env:, ancestor_builder: T.unsafe(nil), method_builder: T.unsafe(nil)); end

  # Returns the value of attribute ancestor_builder.
  #
  # source://rbs//lib/rbs/definition_builder.rb#7
  def ancestor_builder; end

  # source://rbs//lib/rbs/definition_builder.rb#137
  def build_instance(type_name, no_self_types: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#35
  def build_interface(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#375
  def build_singleton(type_name); end

  # Builds a definition for singleton without .new method.
  #
  # source://rbs//lib/rbs/definition_builder.rb#278
  def build_singleton0(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#624
  def define_methods(definition, methods:, interface_methods:, methods_with_self:, super_interface_method:); end

  # source://rbs//lib/rbs/definition_builder.rb#600
  def define_methods_instance(definition, methods:, interface_methods:); end

  # source://rbs//lib/rbs/definition_builder.rb#610
  def define_methods_module_instance(definition, methods:, interface_methods:, module_self_methods:); end

  # source://rbs//lib/rbs/definition_builder.rb#614
  def define_methods_singleton(definition, methods:, interface_methods:); end

  # source://rbs//lib/rbs/definition_builder.rb#27
  def ensure_namespace!(namespace, location:); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder.rb#5
  def env; end

  # source://rbs//lib/rbs/definition_builder.rb#863
  def expand_alias(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#867
  def expand_alias1(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#873
  def expand_alias2(type_name, args); end

  # source://rbs//lib/rbs/definition_builder.rb#592
  def insert_variable(type_name, variables, name:, type:); end

  # Returns the value of attribute instance_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#10
  def instance_cache; end

  # Returns the value of attribute interface_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#13
  def interface_cache; end

  # source://rbs//lib/rbs/definition_builder.rb#783
  def merge_definition(src:, dest:, subst:, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#807
  def merge_method(type_name, methods, name, method, sub, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#797
  def merge_variable(variables, name, variable, sub, keep_super: T.unsafe(nil)); end

  # Returns the value of attribute method_builder.
  #
  # source://rbs//lib/rbs/definition_builder.rb#8
  def method_builder; end

  # Returns the value of attribute singleton0_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#12
  def singleton0_cache; end

  # Returns the value of attribute singleton_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#11
  def singleton_cache; end

  # source://rbs//lib/rbs/definition_builder.rb#496
  def source_location(source, decl); end

  # source://rbs//lib/rbs/definition_builder.rb#854
  def try_cache(type_name, cache:, key: T.unsafe(nil)); end

  # Returns the value of attribute type_name_resolver.
  #
  # source://rbs//lib/rbs/definition_builder.rb#6
  def type_name_resolver; end

  # source://rbs//lib/rbs/definition_builder.rb#896
  def update(env:, except:, ancestor_builder:); end

  # source://rbs//lib/rbs/definition_builder.rb#486
  def validate_params_with(type_params, result:); end

  # @raise [NoTypeFoundError]
  #
  # source://rbs//lib/rbs/definition_builder.rb#926
  def validate_type_name(name, location); end

  # source://rbs//lib/rbs/definition_builder.rb#510
  def validate_type_params(definition, ancestors:, methods:); end

  # source://rbs//lib/rbs/definition_builder.rb#915
  def validate_type_presence(type); end
end

# source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#5
class RBS::DefinitionBuilder::AncestorBuilder
  # @return [AncestorBuilder] a new instance of AncestorBuilder
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#162
  def initialize(env:); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#151
  def env; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#392
  def instance_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute instance_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#154
  def instance_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#510
  def interface_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute interface_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#160
  def interface_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#372
  def mixin_ancestors(entry, type_name, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#325
  def mixin_ancestors0(decl, type_name, align_params:, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#192
  def one_instance_ancestors(type_name); end

  # Returns the value of attribute one_instance_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#153
  def one_instance_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#306
  def one_interface_ancestors(type_name); end

  # Returns the value of attribute one_interface_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#159
  def one_interface_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#255
  def one_singleton_ancestors(type_name); end

  # Returns the value of attribute one_singleton_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#156
  def one_singleton_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#462
  def singleton_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute singleton_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#157
  def singleton_ancestors_cache; end

  # @raise [SuperclassMismatchError]
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#175
  def validate_super_class!(type_name, entry); end
end

# source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#6
class RBS::DefinitionBuilder::AncestorBuilder::OneAncestors
  # @return [OneAncestors] a new instance of OneAncestors
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#17
  def initialize(type_name:, params:, super_class:, self_types:, included_modules:, included_interfaces:, prepended_modules:, extended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#29
  def each_ancestor(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#86
  def each_extended_interface(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#78
  def each_extended_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#62
  def each_included_interface(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#54
  def each_included_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#70
  def each_prepended_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#46
  def each_self_type(&block); end

  # Returns the value of attribute extended_interfaces.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#15
  def extended_interfaces; end

  # Returns the value of attribute extended_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#14
  def extended_modules; end

  # Returns the value of attribute included_interfaces.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#12
  def included_interfaces; end

  # Returns the value of attribute included_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#11
  def included_modules; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#8
  def params; end

  # Returns the value of attribute prepended_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#13
  def prepended_modules; end

  # Returns the value of attribute self_types.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#10
  def self_types; end

  # Returns the value of attribute super_class.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#9
  def super_class; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#7
  def type_name; end

  class << self
    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#94
    def class_instance(type_name:, params:, super_class:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#136
    def interface(type_name:, params:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#122
    def module_instance(type_name:, params:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#108
    def singleton(type_name:, super_class:); end
  end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#5
class RBS::DefinitionBuilder::MethodBuilder
  # @return [MethodBuilder] a new instance of MethodBuilder
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#91
  def initialize(env:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#194
  def build_alias(methods, type, member:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#199
  def build_attribute(methods, type, member:, accessibility:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#99
  def build_instance(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#174
  def build_interface(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#215
  def build_method(methods, type, member:, accessibility:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#145
  def build_singleton(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#226
  def each_member_with_accessibility(members, accessibility: T.unsafe(nil)); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#86
  def env; end

  # Returns the value of attribute instance_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#87
  def instance_methods; end

  # Returns the value of attribute interface_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#89
  def interface_methods; end

  # Returns the value of attribute singleton_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#88
  def singleton_methods; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#239
  def update(env:, except:); end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#6
class RBS::DefinitionBuilder::MethodBuilder::Methods
  # @return [Methods] a new instance of Methods
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#30
  def initialize(type:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#49
  def each; end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#28
  def methods; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#27
  def type; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#35
  def validate!; end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#7
class RBS::DefinitionBuilder::MethodBuilder::Methods::Definition < ::Struct
  def accessibilities; end
  def accessibilities=(_); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#14
  def accessibility; end

  def name; end
  def name=(_); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#10
  def original; end

  def originals; end
  def originals=(_); end
  def overloads; end
  def overloads=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end

    # source://rbs//lib/rbs/definition_builder/method_builder.rb#22
    def empty(name:, type:); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#63
class RBS::DefinitionBuilder::MethodBuilder::Methods::Sorter
  include ::TSort

  # @return [Sorter] a new instance of Sorter
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#68
  def initialize(methods); end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#66
  def methods; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#76
  def tsort_each_child(defn); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#72
  def tsort_each_node(&block); end
end

# source://rbs//lib/rbs/errors.rb#21
class RBS::DefinitionError < ::RBS::BaseError; end

# source://rbs//lib/rbs/errors.rb#358
class RBS::DuplicatedDeclarationError < ::RBS::LoadingError
  # @return [DuplicatedDeclarationError] a new instance of DuplicatedDeclarationError
  #
  # source://rbs//lib/rbs/errors.rb#362
  def initialize(name, *decls); end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/errors.rb#360
  def decls; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#359
  def name; end
end

# source://rbs//lib/rbs/errors.rb#270
class RBS::DuplicatedInterfaceMethodDefinitionError < ::RBS::DefinitionError
  # @return [DuplicatedInterfaceMethodDefinitionError] a new instance of DuplicatedInterfaceMethodDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#275
  def initialize(type:, method_name:, member:); end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#273
  def member; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#272
  def method_name; end

  # source://rbs//lib/rbs/errors.rb#283
  def qualified_method_name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#271
  def type; end

  # source://rbs//lib/rbs/errors.rb#292
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#231
class RBS::DuplicatedMethodDefinitionError < ::RBS::DefinitionError
  # @return [DuplicatedMethodDefinitionError] a new instance of DuplicatedMethodDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#236
  def initialize(type:, method_name:, members:); end

  # source://rbs//lib/rbs/errors.rb#261
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/errors.rb#234
  def members; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#233
  def method_name; end

  # source://rbs//lib/rbs/errors.rb#265
  def other_locations; end

  # source://rbs//lib/rbs/errors.rb#248
  def qualified_method_name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#232
  def type; end

  # source://rbs//lib/rbs/errors.rb#257
  def type_name; end
end

# source://rbs//lib/rbs/environment.rb#4
class RBS::Environment
  # @return [Environment] a new instance of Environment
  #
  # source://rbs//lib/rbs/environment.rb#126
  def initialize; end

  # source://rbs//lib/rbs/environment.rb#221
  def <<(decl); end

  # source://rbs//lib/rbs/environment.rb#478
  def absolute_type(resolver, type, context:); end

  # source://rbs//lib/rbs/environment.rb#474
  def absolute_type_name(resolver, type_name, context:); end

  # Returns the value of attribute alias_decls.
  #
  # source://rbs//lib/rbs/environment.rb#9
  def alias_decls; end

  # source://rbs//lib/rbs/environment.rb#489
  def buffers; end

  # source://rbs//lib/rbs/environment.rb#493
  def buffers_decls; end

  # source://rbs//lib/rbs/environment.rb#154
  def cache_name(cache, name:, decl:, outer:); end

  # Returns the value of attribute class_decls.
  #
  # source://rbs//lib/rbs/environment.rb#7
  def class_decls; end

  # Returns the value of attribute constant_decls.
  #
  # source://rbs//lib/rbs/environment.rb#10
  def constant_decls; end

  # Returns the value of attribute declarations.
  #
  # source://rbs//lib/rbs/environment.rb#5
  def declarations; end

  # source://rbs//lib/rbs/environment.rb#93
  def foo; end

  # Returns the value of attribute global_decls.
  #
  # source://rbs//lib/rbs/environment.rb#11
  def global_decls; end

  # source://rbs//lib/rbs/environment.rb#162
  def insert_decl(decl, outer:, namespace:); end

  # source://rbs//lib/rbs/environment.rb#484
  def inspect; end

  # Returns the value of attribute interface_decls.
  #
  # source://rbs//lib/rbs/environment.rb#8
  def interface_decls; end

  # source://rbs//lib/rbs/environment.rb#505
  def reject; end

  # source://rbs//lib/rbs/environment.rb#248
  def resolve_declaration(resolver, decl, outer:, prefix:); end

  # source://rbs//lib/rbs/environment.rb#362
  def resolve_member(resolver, member, context:); end

  # source://rbs//lib/rbs/environment.rb#460
  def resolve_method_type(resolver, type, context:); end

  # source://rbs//lib/rbs/environment.rb#233
  def resolve_type_names(only: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment.rb#468
  def resolve_type_params(resolver, params, context:); end

  # source://rbs//lib/rbs/environment.rb#227
  def validate_type_params; end

  private

  # source://rbs//lib/rbs/environment.rb#137
  def initialize_copy(other); end

  class << self
    # source://rbs//lib/rbs/environment.rb#148
    def from_loader(loader); end
  end
end

# source://rbs//lib/rbs/environment.rb#99
class RBS::Environment::ClassEntry < ::RBS::Environment::MultiEntry
  # source://rbs//lib/rbs/environment.rb#100
  def primary; end
end

# source://rbs//lib/rbs/environment.rb#13
module RBS::Environment::ContextUtil
  # source://rbs//lib/rbs/environment.rb#14
  def calculate_context(decls); end
end

# source://rbs//lib/rbs/environment.rb#78
class RBS::Environment::ModuleEntry < ::RBS::Environment::MultiEntry
  # source://rbs//lib/rbs/environment.rb#85
  def primary; end

  # source://rbs//lib/rbs/environment.rb#79
  def self_types; end
end

# source://rbs//lib/rbs/environment.rb#22
class RBS::Environment::MultiEntry
  # @return [MultiEntry] a new instance of MultiEntry
  #
  # source://rbs//lib/rbs/environment.rb#36
  def initialize(name:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment.rb#63
  def compatible_params?(ps1, ps2); end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/environment.rb#34
  def decls; end

  # source://rbs//lib/rbs/environment.rb#41
  def insert(decl:, outer:); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/environment.rb#33
  def name; end

  # source://rbs//lib/rbs/environment.rb#73
  def primary; end

  # source://rbs//lib/rbs/environment.rb#69
  def type_params; end

  # source://rbs//lib/rbs/environment.rb#46
  def validate_type_params; end
end

# source://rbs//lib/rbs/environment.rb#23
class RBS::Environment::MultiEntry::D < ::Struct
  include ::RBS::Environment::ContextUtil

  # source://rbs//lib/rbs/environment.rb#28
  def context; end

  def decl; end
  def decl=(_); end
  def outer; end
  def outer=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment.rb#108
class RBS::Environment::SingleEntry
  include ::RBS::Environment::ContextUtil

  # @return [SingleEntry] a new instance of SingleEntry
  #
  # source://rbs//lib/rbs/environment.rb#113
  def initialize(name:, decl:, outer:); end

  # source://rbs//lib/rbs/environment.rb#121
  def context; end

  # Returns the value of attribute decl.
  #
  # source://rbs//lib/rbs/environment.rb#111
  def decl; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/environment.rb#109
  def name; end

  # Returns the value of attribute outer.
  #
  # source://rbs//lib/rbs/environment.rb#110
  def outer; end
end

# source://rbs//lib/rbs/environment_loader.rb#4
class RBS::EnvironmentLoader
  # @return [EnvironmentLoader] a new instance of EnvironmentLoader
  #
  # source://rbs//lib/rbs/environment_loader.rb#37
  def initialize(core_root: T.unsafe(nil), repository: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment_loader.rb#45
  def add(path: T.unsafe(nil), library: T.unsafe(nil), version: T.unsafe(nil), resolve_dependencies: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment_loader.rb#75
  def add_collection(collection_config); end

  # Returns the value of attribute core_root.
  #
  # source://rbs//lib/rbs/environment_loader.rb#17
  def core_root; end

  # Returns the value of attribute dirs.
  #
  # source://rbs//lib/rbs/environment_loader.rb#21
  def dirs; end

  # source://rbs//lib/rbs/environment_loader.rb#150
  def each_decl; end

  # source://rbs//lib/rbs/environment_loader.rb#105
  def each_dir; end

  # source://rbs//lib/rbs/environment_loader.rb#128
  def each_file(path, immediate:, skip_hidden:, &block); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment_loader.rb#85
  def has_library?(library:, version:); end

  # Returns the value of attribute libs.
  #
  # source://rbs//lib/rbs/environment_loader.rb#20
  def libs; end

  # source://rbs//lib/rbs/environment_loader.rb#93
  def load(env:); end

  # Returns the value of attribute repository.
  #
  # source://rbs//lib/rbs/environment_loader.rb#18
  def repository; end

  # source://rbs//lib/rbs/environment_loader.rb#61
  def resolve_dependencies(library:, version:); end

  class << self
    # source://rbs//lib/rbs/environment_loader.rb#25
    def gem_sig_path(name, version); end
  end
end

# source://rbs//lib/rbs/environment_loader.rb#23
RBS::EnvironmentLoader::DEFAULT_CORE_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/environment_loader.rb#15
class RBS::EnvironmentLoader::Library < ::Struct
  def name; end
  def name=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment_loader.rb#5
class RBS::EnvironmentLoader::UnknownLibraryError < ::StandardError
  # @return [UnknownLibraryError] a new instance of UnknownLibraryError
  #
  # source://rbs//lib/rbs/environment_loader.rb#8
  def initialize(lib:); end

  # Returns the value of attribute library.
  #
  # source://rbs//lib/rbs/environment_loader.rb#6
  def library; end
end

# source://rbs//lib/rbs/environment_walker.rb#4
class RBS::EnvironmentWalker
  include ::TSort

  # @return [EnvironmentWalker] a new instance of EnvironmentWalker
  #
  # source://rbs//lib/rbs/environment_walker.rb#11
  def initialize(env:); end

  # source://rbs//lib/rbs/environment_walker.rb#16
  def builder; end

  # source://rbs//lib/rbs/environment_walker.rb#99
  def each_type_name(type, &block); end

  # source://rbs//lib/rbs/environment_walker.rb#105
  def each_type_node(type, &block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/environment_walker.rb#9
  def env; end

  # source://rbs//lib/rbs/environment_walker.rb#20
  def only_ancestors!(only = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment_walker.rb#25
  def only_ancestors?; end

  # source://rbs//lib/rbs/environment_walker.rb#44
  def tsort_each_child(node, &block); end

  # source://rbs//lib/rbs/environment_walker.rb#31
  def tsort_each_node(&block); end
end

# source://rbs//lib/rbs/environment_walker.rb#5
class RBS::EnvironmentWalker::InstanceNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment_walker.rb#6
class RBS::EnvironmentWalker::SingletonNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment_walker.rb#7
class RBS::EnvironmentWalker::TypeNameNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/factory.rb#4
class RBS::Factory
  # source://rbs//lib/rbs/factory.rb#5
  def type_name(string); end
end

# source://rbs//lib/rbs/errors.rb#347
class RBS::GenericParameterMismatchError < ::RBS::LoadingError
  # @return [GenericParameterMismatchError] a new instance of GenericParameterMismatchError
  #
  # source://rbs//lib/rbs/errors.rb#351
  def initialize(name:, decl:); end

  # Returns the value of attribute decl.
  #
  # source://rbs//lib/rbs/errors.rb#349
  def decl; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#348
  def name; end
end

# source://rbs//lib/rbs/errors.rb#159
class RBS::InheritModuleError < ::RBS::DefinitionError
  # @return [InheritModuleError] a new instance of InheritModuleError
  #
  # source://rbs//lib/rbs/errors.rb#162
  def initialize(super_decl); end

  # Returns the value of attribute super_decl.
  #
  # source://rbs//lib/rbs/errors.rb#160
  def super_decl; end

  class << self
    # source://rbs//lib/rbs/errors.rb#168
    def check!(super_decl, env:); end
  end
end

# source://rbs//lib/rbs/errors.rb#324
class RBS::InvalidOverloadMethodError < ::RBS::DefinitionError
  # @return [InvalidOverloadMethodError] a new instance of InvalidOverloadMethodError
  #
  # source://rbs//lib/rbs/errors.rb#330
  def initialize(type_name:, method_name:, kind:, members:); end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/errors.rb#327
  def kind; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/errors.rb#328
  def members; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#326
  def method_name; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#325
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#51
class RBS::InvalidTypeApplicationError < ::RBS::DefinitionError
  # @return [InvalidTypeApplicationError] a new instance of InvalidTypeApplicationError
  #
  # source://rbs//lib/rbs/errors.rb#57
  def initialize(type_name:, args:, params:, location:); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/errors.rb#53
  def args; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#55
  def location; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/errors.rb#54
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#52
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#65
    def check!(type_name:, args:, params:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#371
class RBS::InvalidVarianceAnnotationError < ::RBS::DefinitionError
  # @return [InvalidVarianceAnnotationError] a new instance of InvalidVarianceAnnotationError
  #
  # source://rbs//lib/rbs/errors.rb#376
  def initialize(type_name:, param:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#374
  def location; end

  # Returns the value of attribute param.
  #
  # source://rbs//lib/rbs/errors.rb#373
  def param; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#372
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#20
class RBS::LoadingError < ::RBS::BaseError; end

# source://rbs//lib/rbs/location_aux.rb#4
class RBS::Location
  def initialize(_arg0, _arg1, _arg2); end

  # source://rbs//lib/rbs/location_aux.rb#70
  def ==(other); end

  def [](_arg0); end
  def _add_optional_child(_arg0, _arg1, _arg2); end
  def _add_optional_no_child(_arg0); end
  def _add_required_child(_arg0, _arg1, _arg2); end
  def _optional_keys; end
  def _required_keys; end

  # source://rbs//lib/rbs/location_aux.rb#101
  def add_optional_child(name, range); end

  # source://rbs//lib/rbs/location_aux.rb#97
  def add_required_child(name, range); end

  def aref(_arg0); end
  def buffer; end

  # source://rbs//lib/rbs/location_aux.rb#109
  def each_optional_key(&block); end

  # source://rbs//lib/rbs/location_aux.rb#117
  def each_required_key(&block); end

  # source://rbs//lib/rbs/location_aux.rb#42
  def end_column; end

  # source://rbs//lib/rbs/location_aux.rb#38
  def end_line; end

  # source://rbs//lib/rbs/location_aux.rb#52
  def end_loc; end

  def end_pos; end

  # source://rbs//lib/rbs/location_aux.rb#5
  def inspect; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#125
  def key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#26
  def name; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#129
  def optional_key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#58
  def range; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#133
  def required_key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#62
  def source; end

  # source://rbs//lib/rbs/location_aux.rb#34
  def start_column; end

  # source://rbs//lib/rbs/location_aux.rb#30
  def start_line; end

  # source://rbs//lib/rbs/location_aux.rb#46
  def start_loc; end

  def start_pos; end

  # source://rbs//lib/rbs/location_aux.rb#77
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/location_aux.rb#66
  def to_s; end

  private

  def _end_loc; end
  def _start_loc; end
  def initialize_copy(_arg0); end

  class << self
    # source://rbs//lib/rbs/location_aux.rb#11
    def new(buffer_ = T.unsafe(nil), start_pos_ = T.unsafe(nil), end_pos_ = T.unsafe(nil), buffer: T.unsafe(nil), start_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

    # source://rbs//lib/rbs/location_aux.rb#93
    def to_string(location, default: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/location_aux.rb#24
RBS::Location::WithChildren = RBS::Location

# source://rbs//lib/rbs/locator.rb#4
class RBS::Locator
  # @return [Locator] a new instance of Locator
  #
  # source://rbs//lib/rbs/locator.rb#7
  def initialize(decls:); end

  # source://rbs//lib/rbs/locator.rb#11
  def buffer; end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/locator.rb#5
  def decls; end

  # source://rbs//lib/rbs/locator.rb#15
  def find(line:, column:); end

  # source://rbs//lib/rbs/locator.rb#26
  def find2(line:, column:); end

  # source://rbs//lib/rbs/locator.rb#39
  def find_in_decl(pos, decl:, array:); end

  # source://rbs//lib/rbs/locator.rb#184
  def find_in_loc(pos, location:, array:); end

  # source://rbs//lib/rbs/locator.rb#110
  def find_in_member(pos, member:, array:); end

  # source://rbs//lib/rbs/locator.rb#133
  def find_in_method_type(pos, method_type:, array:); end

  # source://rbs//lib/rbs/locator.rb#168
  def find_in_type(pos, type:, array:); end

  # source://rbs//lib/rbs/locator.rb#151
  def find_in_type_param(pos, type_param:, array:); end

  # source://rbs//lib/rbs/locator.rb#211
  def test_loc(pos, location:); end
end

# source://rbs//lib/rbs/errors.rb#4
module RBS::MethodNameHelper
  # source://rbs//lib/rbs/errors.rb#5
  def method_name_string; end
end

# source://rbs//lib/rbs/method_type.rb#4
class RBS::MethodType
  # @return [MethodType] a new instance of MethodType
  #
  # source://rbs//lib/rbs/method_type.rb#10
  def initialize(type_params:, type:, block:, location:); end

  # source://rbs//lib/rbs/method_type.rb#17
  def ==(other); end

  # Returns the value of attribute block.
  #
  # source://rbs//lib/rbs/method_type.rb#7
  def block; end

  # source://rbs//lib/rbs/method_type.rb#84
  def each_type(&block); end

  # source://rbs//lib/rbs/method_type.rb#57
  def free_variables(set = T.unsafe(nil)); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/method_type.rb#8
  def location; end

  # source://rbs//lib/rbs/method_type.rb#63
  def map_type(&block); end

  # source://rbs//lib/rbs/method_type.rb#72
  def map_type_bound(&block); end

  # source://rbs//lib/rbs/method_type.rb#33
  def sub(s); end

  # source://rbs//lib/rbs/method_type.rb#24
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/method_type.rb#95
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/method_type.rb#6
  def type; end

  # source://rbs//lib/rbs/method_type.rb#114
  def type_param_names; end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/method_type.rb#5
  def type_params; end

  # source://rbs//lib/rbs/method_type.rb#48
  def update(type_params: T.unsafe(nil), type: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/errors.rb#403
class RBS::MixinClassError < ::RBS::DefinitionError
  # @return [MixinClassError] a new instance of MixinClassError
  #
  # source://rbs//lib/rbs/errors.rb#407
  def initialize(type_name:, member:); end

  # source://rbs//lib/rbs/errors.rb#414
  def location; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#405
  def member; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#404
  def type_name; end

  private

  # source://rbs//lib/rbs/errors.rb#427
  def mixin_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#418
    def check!(type_name:, env:, member:); end
  end
end

# source://rbs//lib/rbs/namespace.rb#4
class RBS::Namespace
  # @return [Namespace] a new instance of Namespace
  #
  # source://rbs//lib/rbs/namespace.rb#7
  def initialize(path:, absolute:); end

  # source://rbs//lib/rbs/namespace.rb#20
  def +(other); end

  # source://rbs//lib/rbs/namespace.rb#59
  def ==(other); end

  # source://rbs//lib/rbs/namespace.rb#47
  def absolute!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#39
  def absolute?; end

  # source://rbs//lib/rbs/namespace.rb#28
  def append(component); end

  # source://rbs//lib/rbs/namespace.rb#101
  def ascend; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#55
  def empty?; end

  # source://rbs//lib/rbs/namespace.rb#59
  def eql?(other); end

  # source://rbs//lib/rbs/namespace.rb#65
  def hash; end

  # source://rbs//lib/rbs/namespace.rb#32
  def parent; end

  # Returns the value of attribute path.
  #
  # source://rbs//lib/rbs/namespace.rb#5
  def path; end

  # source://rbs//lib/rbs/namespace.rb#51
  def relative!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#43
  def relative?; end

  # source://rbs//lib/rbs/namespace.rb#69
  def split; end

  # source://rbs//lib/rbs/namespace.rb#75
  def to_s; end

  # source://rbs//lib/rbs/namespace.rb#84
  def to_type_name; end

  class << self
    # source://rbs//lib/rbs/namespace.rb#12
    def empty; end

    # source://rbs//lib/rbs/namespace.rb#93
    def parse(string); end

    # source://rbs//lib/rbs/namespace.rb#16
    def root; end
  end
end

# source://rbs//lib/rbs/errors.rb#202
class RBS::NoMixinFoundError < ::RBS::DefinitionError
  # @return [NoMixinFoundError] a new instance of NoMixinFoundError
  #
  # source://rbs//lib/rbs/errors.rb#206
  def initialize(type_name:, member:); end

  # source://rbs//lib/rbs/errors.rb#213
  def location; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#204
  def member; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#203
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#217
    def check!(type_name, env:, member:); end
  end
end

# source://rbs//lib/rbs/errors.rb#175
class RBS::NoSelfTypeFoundError < ::RBS::DefinitionError
  # @return [NoSelfTypeFoundError] a new instance of NoSelfTypeFoundError
  #
  # source://rbs//lib/rbs/errors.rb#179
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#177
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#176
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#186
    def check!(self_type, env:); end
  end
end

# source://rbs//lib/rbs/errors.rb#139
class RBS::NoSuperclassFoundError < ::RBS::DefinitionError
  # @return [NoSuperclassFoundError] a new instance of NoSuperclassFoundError
  #
  # source://rbs//lib/rbs/errors.rb#143
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#141
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#140
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#150
    def check!(type_name, env:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#110
class RBS::NoTypeFoundError < ::RBS::BaseError
  # @return [NoTypeFoundError] a new instance of NoTypeFoundError
  #
  # source://rbs//lib/rbs/errors.rb#114
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#112
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#111
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#121
    def check!(type_name, env:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#457
class RBS::NonregularTypeAliasError < ::RBS::BaseError
  # @return [NonregularTypeAliasError] a new instance of NonregularTypeAliasError
  #
  # source://rbs//lib/rbs/errors.rb#461
  def initialize(diagnostic:, location:); end

  # Returns the value of attribute diagnostic.
  #
  # source://rbs//lib/rbs/errors.rb#458
  def diagnostic; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#459
  def location; end
end

# source://rbs//lib/rbs/parser_aux.rb#4
class RBS::Parser
  class << self
    def _parse_method_type(_arg0, _arg1, _arg2, _arg3, _arg4); end
    def _parse_signature(_arg0, _arg1); end
    def _parse_type(_arg0, _arg1, _arg2, _arg3, _arg4); end

    # source://rbs//lib/rbs/parser_aux.rb#20
    def buffer(source); end

    # source://rbs//lib/rbs/parser_aux.rb#10
    def parse_method_type(source, line: T.unsafe(nil), column: T.unsafe(nil), range: T.unsafe(nil), variables: T.unsafe(nil)); end

    # source://rbs//lib/rbs/parser_aux.rb#15
    def parse_signature(source, line: T.unsafe(nil), column: T.unsafe(nil)); end

    # source://rbs//lib/rbs/parser_aux.rb#5
    def parse_type(source, line: T.unsafe(nil), column: T.unsafe(nil), range: T.unsafe(nil), variables: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/parser_aux.rb#34
RBS::Parser::KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://rbs//lib/rbs/parser_compat/lexer_error.rb#6
RBS::Parser::LexerError = RBS::ParsingError

# source://rbs//lib/rbs/parser_compat/located_value.rb#6
class RBS::Parser::LocatedValue; end

# source://rbs//lib/rbs/parser_compat/semantics_error.rb#6
RBS::Parser::SemanticsError = RBS::ParsingError

# source://rbs//lib/rbs/parser_compat/syntax_error.rb#6
RBS::Parser::SyntaxError = RBS::ParsingError

# source://rbs//lib/rbs/errors.rb#23
class RBS::ParsingError < ::RBS::BaseError
  # @return [ParsingError] a new instance of ParsingError
  #
  # source://rbs//lib/rbs/errors.rb#28
  def initialize(location, error_message, token_type); end

  # Returns the value of attribute error_message.
  #
  # source://rbs//lib/rbs/errors.rb#25
  def error_message; end

  # source://rbs//lib/rbs/errors.rb#36
  def error_value; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#24
  def location; end

  # source://rbs//lib/rbs/errors.rb#43
  def token_str; end

  # Returns the value of attribute token_type.
  #
  # source://rbs//lib/rbs/errors.rb#26
  def token_type; end
end

# source://rbs//lib/rbs/prototype/helpers.rb#4
module RBS::Prototype; end

# source://rbs//lib/rbs/prototype/helpers.rb#5
module RBS::Prototype::Helpers
  private

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#81
  def any_node?(node, nodes: T.unsafe(nil), &block); end

  # NOTE: args_node may be a nil by a bug
  #       https://bugs.ruby-lang.org/issues/17495
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#105
  def args_from_node(args_node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#8
  def block_from_body(node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#69
  def each_child(node, &block); end

  # source://rbs//lib/rbs/prototype/helpers.rb#73
  def each_node(nodes); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#93
  def keyword_hash?(node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#109
  def untyped; end
end

# source://rbs//lib/rbs/prototype/rb.rb#5
class RBS::Prototype::RB
  include ::RBS::Prototype::Helpers

  # @return [RB] a new instance of RB
  #
  # source://rbs//lib/rbs/prototype/rb.rb#37
  def initialize; end

  # source://rbs//lib/rbs/prototype/rb.rb#509
  def block_type(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#489
  def body_type(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#408
  def const_to_name(node, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#389
  def const_to_name!(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#687
  def current_accessibility(decls, index = T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#41
  def decls; end

  # source://rbs//lib/rbs/prototype/rb.rb#727
  def find_def_index_by_name(decls, name); end

  # source://rbs//lib/rbs/prototype/rb.rb#484
  def function_return_type_from_body(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#428
  def function_type_from_body(node, def_name); end

  # source://rbs//lib/rbs/prototype/rb.rb#502
  def if_unless_type(node); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rb.rb#723
  def is_accessibility?(decl); end

  # source://rbs//lib/rbs/prototype/rb.rb#419
  def literal_to_symbol(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#523
  def literal_to_type(node); end

  # backward compatible
  #
  # source://rbs//lib/rbs/prototype/rb.rb#644
  def node_type(node, default: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#644
  def param_type(node, default: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#67
  def parse(string); end

  # source://rbs//lib/rbs/prototype/rb.rb#679
  def private; end

  # source://rbs//lib/rbs/prototype/rb.rb#100
  def process(node, decls:, comments:, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#383
  def process_children(node, decls:, comments:, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#683
  def public; end

  # source://rbs//lib/rbs/prototype/rb.rb#624
  def range_element_type(types); end

  # source://rbs//lib/rbs/prototype/rb.rb#697
  def remove_unnecessary_accessibility_methods!(decls); end

  # Returns the value of attribute source_decls.
  #
  # source://rbs//lib/rbs/prototype/rb.rb#34
  def source_decls; end

  # Returns the value of attribute toplevel_members.
  #
  # source://rbs//lib/rbs/prototype/rb.rb#35
  def toplevel_members; end

  # source://rbs//lib/rbs/prototype/rb.rb#613
  def types_to_union_type(types); end
end

# source://rbs//lib/rbs/prototype/rb.rb#8
class RBS::Prototype::RB::Context < ::Struct
  # source://rbs//lib/rbs/prototype/rb.rb#25
  def attribute_kind; end

  # source://rbs//lib/rbs/prototype/rb.rb#15
  def method_kind; end

  def module_function; end
  def module_function=(_); end
  def namespace; end
  def namespace=(_); end
  def singleton; end
  def singleton=(_); end

  class << self
    def [](*_arg0); end

    # source://rbs//lib/rbs/prototype/rb.rb#11
    def initial(namespace: T.unsafe(nil)); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/prototype/rbi.rb#5
class RBS::Prototype::RBI
  # @return [RBI] a new instance of RBI
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#10
  def initialize; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#544
  def call_node?(node, name:, receiver: T.unsafe(nil), args: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rbi.rb#548
  def const_to_name(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#90
  def current_module; end

  # source://rbs//lib/rbs/prototype/rbi.rb#94
  def current_module!; end

  # source://rbs//lib/rbs/prototype/rbi.rb#46
  def current_namespace; end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#6
  def decls; end

  # source://rbs//lib/rbs/prototype/rbi.rb#588
  def each_arg(array, &block); end

  # source://rbs//lib/rbs/prototype/rbi.rb#602
  def each_child(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#112
  def join_comments(nodes, comments); end

  # Returns the value of attribute last_sig.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#8
  def last_sig; end

  # source://rbs//lib/rbs/prototype/rbi.rb#276
  def method_type(args_node, type_node, variables:, overloads:); end

  # Returns the value of attribute modules.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#7
  def modules; end

  # source://rbs//lib/rbs/prototype/rbi.rb#42
  def nested_name(name); end

  # source://rbs//lib/rbs/prototype/rbi.rb#610
  def node_to_hash(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#16
  def parse(string); end

  # source://rbs//lib/rbs/prototype/rbi.rb#338
  def parse_params(args_node, args, method_type, variables:, overloads:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#106
  def pop_sig; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#536
  def proc_type?(type_node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#117
  def process(node, comments:, outer: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rbi.rb#52
  def push_class(name, super_class, comment:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#71
  def push_module(name, comment:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#98
  def push_sig(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#459
  def type_of(type_node, variables:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#472
  def type_of0(type_node, variables:); end
end

# source://rbs//lib/rbs/prototype/runtime.rb#5
class RBS::Prototype::Runtime
  include ::RBS::Prototype::Helpers

  # @return [Runtime] a new instance of Runtime
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#13
  def initialize(patterns:, env:, merge:, owners_included: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#540
  def block_from_ast_of(method); end

  # source://rbs//lib/rbs/prototype/runtime.rb#37
  def builder; end

  # source://rbs//lib/rbs/prototype/runtime.rb#527
  def const_name(const); end

  # source://rbs//lib/rbs/prototype/runtime.rb#45
  def decls; end

  # source://rbs//lib/rbs/prototype/runtime.rb#76
  def each_included_module(type_name, mod); end

  # Generate/find outer module declarations
  # This is broken down into another method to comply with `DRY`
  # This generates/finds declarations in nested form & returns the last array of declarations
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#478
  def ensure_outer_module_declarations(mod); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#9
  def env; end

  # source://rbs//lib/rbs/prototype/runtime.rb#374
  def generate_class(mod); end

  # source://rbs//lib/rbs/prototype/runtime.rb#323
  def generate_constants(mod, decls); end

  # source://rbs//lib/rbs/prototype/runtime.rb#224
  def generate_methods(mod, module_name, members); end

  # source://rbs//lib/rbs/prototype/runtime.rb#421
  def generate_module(mod); end

  # source://rbs//lib/rbs/prototype/runtime.rb#361
  def generate_super_class(mod); end

  # Returns the value of attribute merge.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#10
  def merge; end

  # source://rbs//lib/rbs/prototype/runtime.rb#173
  def merge_rbs(module_name, members, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#106
  def method_type(method); end

  # Returns the exact name & not compactly declared name
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#522
  def only_name(mod); end

  # Returns the value of attribute owners_included.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#11
  def owners_included; end

  # source://rbs//lib/rbs/prototype/runtime.rb#41
  def parse(file); end

  # Returns the value of attribute patterns.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#8
  def patterns; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#24
  def target?(const); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#213
  def target_method?(mod, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#62
  def to_type_name(name, full_name: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#532
  def type_args(type_name); end
end

# source://rbs//lib/rdoc_plugin/parser.rb#6
module RBS::RDocPlugin; end

# source://rbs//lib/rdoc_plugin/parser.rb#7
class RBS::RDocPlugin::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://rbs//lib/rdoc_plugin/parser.rb#11
  def initialize(top_level, content); end

  # Returns the value of attribute content.
  #
  # source://rbs//lib/rdoc_plugin/parser.rb#9
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://rbs//lib/rdoc_plugin/parser.rb#9
  def content=(_arg0); end

  # source://rbs//lib/rdoc_plugin/parser.rb#94
  def parse_attr_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#53
  def parse_class_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#67
  def parse_constant_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#125
  def parse_extend_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#109
  def parse_include_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#24
  def parse_member(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#88
  def parse_method_alias_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#73
  def parse_method_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#60
  def parse_module_decl(decl:, context:, outer_name: T.unsafe(nil)); end

  # source://rbs//lib/rdoc_plugin/parser.rb#16
  def scan; end

  # Returns the value of attribute top_level.
  #
  # source://rbs//lib/rdoc_plugin/parser.rb#9
  def top_level; end

  # Sets the attribute top_level
  #
  # @param value the value to set the attribute top_level to.
  #
  # source://rbs//lib/rdoc_plugin/parser.rb#9
  def top_level=(_arg0); end

  private

  # source://rbs//lib/rdoc_plugin/parser.rb#149
  def comment_string(with_comment); end

  # source://rbs//lib/rdoc_plugin/parser.rb#143
  def construct_comment(context:, comment:); end

  # source://rbs//lib/rdoc_plugin/parser.rb#154
  def fully_qualified_name(outer_name:, decl:); end
end

# source://rbs//lib/rbs/errors.rb#385
class RBS::RecursiveAliasDefinitionError < ::RBS::DefinitionError
  # @return [RecursiveAliasDefinitionError] a new instance of RecursiveAliasDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#389
  def initialize(type:, defs:); end

  # Returns the value of attribute defs.
  #
  # source://rbs//lib/rbs/errors.rb#387
  def defs; end

  # source://rbs//lib/rbs/errors.rb#396
  def location; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#386
  def type; end
end

# source://rbs//lib/rbs/errors.rb#72
class RBS::RecursiveAncestorError < ::RBS::DefinitionError
  # @return [RecursiveAncestorError] a new instance of RecursiveAncestorError
  #
  # source://rbs//lib/rbs/errors.rb#76
  def initialize(ancestors:, location:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/errors.rb#73
  def ancestors; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#74
  def location; end

  class << self
    # source://rbs//lib/rbs/errors.rb#96
    def check!(self_ancestor, ancestors:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#441
class RBS::RecursiveTypeAliasError < ::RBS::BaseError
  # @return [RecursiveTypeAliasError] a new instance of RecursiveTypeAliasError
  #
  # source://rbs//lib/rbs/errors.rb#445
  def initialize(alias_names:, location:); end

  # Returns the value of attribute alias_names.
  #
  # source://rbs//lib/rbs/errors.rb#442
  def alias_names; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#443
  def location; end

  # source://rbs//lib/rbs/errors.rb#452
  def name; end
end

# source://rbs//lib/rbs/repository.rb#4
class RBS::Repository
  # @return [Repository] a new instance of Repository
  #
  # source://rbs//lib/rbs/repository.rb#74
  def initialize(no_stdlib: T.unsafe(nil)); end

  # source://rbs//lib/rbs/repository.rb#98
  def add(dir); end

  # Returns the value of attribute dirs.
  #
  # source://rbs//lib/rbs/repository.rb#71
  def dirs; end

  # Returns the value of attribute gems.
  #
  # source://rbs//lib/rbs/repository.rb#72
  def gems; end

  # source://rbs//lib/rbs/repository.rb#108
  def lookup(gem, version); end

  # source://rbs//lib/rbs/repository.rb#113
  def lookup_path(gem, version); end

  class << self
    # source://rbs//lib/rbs/repository.rb#83
    def default; end

    # source://rbs//lib/rbs/repository.rb#87
    def find_best_version(version, candidates); end
  end
end

# source://rbs//lib/rbs/repository.rb#5
RBS::Repository::DEFAULT_STDLIB_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/repository.rb#7
class RBS::Repository::GemRBS
  # @return [GemRBS] a new instance of GemRBS
  #
  # source://rbs//lib/rbs/repository.rb#11
  def initialize(name:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/repository.rb#64
  def empty?; end

  # source://rbs//lib/rbs/repository.rb#59
  def find_best_version(version); end

  # source://rbs//lib/rbs/repository.rb#54
  def latest_version; end

  # source://rbs//lib/rbs/repository.rb#22
  def load!; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/repository.rb#8
  def name; end

  # source://rbs//lib/rbs/repository.rb#49
  def oldest_version; end

  # Returns the value of attribute paths.
  #
  # source://rbs//lib/rbs/repository.rb#9
  def paths; end

  # source://rbs//lib/rbs/repository.rb#45
  def version_names; end

  # source://rbs//lib/rbs/repository.rb#17
  def versions; end
end

# source://rbs//lib/rbs/repository.rb#69
class RBS::Repository::VersionPath < ::Struct
  def gem; end
  def gem=(_); end
  def path; end
  def path=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#4
module RBS::Resolver; end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#5
class RBS::Resolver::ConstantResolver
  # @return [ConstantResolver] a new instance of ConstantResolver
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#75
  def initialize(builder:); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#72
  def builder; end

  # Returns the value of attribute child_constants_cache.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#73
  def child_constants_cache; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#99
  def children(module_name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#87
  def constants(context); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#162
  def constants_from_ancestors(module_name, constants:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#147
  def constants_from_context(context, constants:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#185
  def constants_itself(context, constants:); end

  # Returns the value of attribute context_constants_cache.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#73
  def context_constants_cache; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#122
  def load_child_constants(name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#107
  def load_context_constants(context); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#82
  def resolve(name, context:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#95
  def resolve_child(module_name, name); end

  # Returns the value of attribute table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#72
  def table; end
end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#6
class RBS::Resolver::ConstantResolver::Table
  # @return [Table] a new instance of Table
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#10
  def initialize(environment); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#50
  def children(name); end

  # Returns the value of attribute children_table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#7
  def children_table; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#54
  def constant(name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#67
  def constant_of_constant(name, entry); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#58
  def constant_of_module(name, entry); end

  # Returns the value of attribute constants_table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#8
  def constants_table; end

  # Returns the value of attribute toplevel.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#7
  def toplevel; end
end

# source://rbs//lib/rbs/resolver/type_name_resolver.rb#5
class RBS::Resolver::TypeNameResolver
  # @return [TypeNameResolver] a new instance of TypeNameResolver
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#9
  def initialize(env); end

  # Returns the value of attribute all_names.
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#6
  def all_names; end

  # Returns the value of attribute cache.
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#7
  def cache; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#50
  def has_name?(full_name); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#25
  def resolve(type_name, context:); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#35
  def resolve_in(type_name, context); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#18
  def try_cache(query); end
end

# source://rbs//lib/rbs/substitution.rb#4
class RBS::Substitution
  # @return [Substitution] a new instance of Substitution
  #
  # source://rbs//lib/rbs/substitution.rb#12
  def initialize; end

  # source://rbs//lib/rbs/substitution.rb#16
  def add(from:, to:); end

  # source://rbs//lib/rbs/substitution.rb#37
  def apply(ty); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/substitution.rb#8
  def empty?; end

  # Returns the value of attribute instance_type.
  #
  # source://rbs//lib/rbs/substitution.rb#6
  def instance_type; end

  # Sets the attribute instance_type
  #
  # @param value the value to set the attribute instance_type to.
  #
  # source://rbs//lib/rbs/substitution.rb#6
  def instance_type=(_arg0); end

  # Returns the value of attribute mapping.
  #
  # source://rbs//lib/rbs/substitution.rb#5
  def mapping; end

  # source://rbs//lib/rbs/substitution.rb#53
  def without(*vars); end

  class << self
    # source://rbs//lib/rbs/substitution.rb#20
    def build(variables, types, instance_type: T.unsafe(nil), &block); end
  end
end

# source://rbs//lib/rbs/errors.rb#313
class RBS::SuperclassMismatchError < ::RBS::DefinitionError
  # @return [SuperclassMismatchError] a new instance of SuperclassMismatchError
  #
  # source://rbs//lib/rbs/errors.rb#317
  def initialize(name:, entry:); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/errors.rb#315
  def entry; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#314
  def name; end
end

# source://rbs//lib/rbs/type_alias_dependency.rb#4
class RBS::TypeAliasDependency
  # @return [TypeAliasDependency] a new instance of TypeAliasDependency
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#14
  def initialize(env:); end

  # source://rbs//lib/rbs/type_alias_dependency.rb#27
  def build_dependencies; end

  # Check if an alias type definition is circular & prohibited
  #
  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#19
  def circular_definition?(alias_name); end

  # A hash which stores the transitive closure
  # of the directed graph
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#12
  def dependencies; end

  # Direct dependencies corresponds to a directed graph
  # with vertices as types and directions based on assignment of types
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#9
  def direct_dependencies; end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#5
  def env; end

  # source://rbs//lib/rbs/type_alias_dependency.rb#43
  def transitive_closure; end

  private

  # Recursive function to construct transitive closure
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#71
  def dependency(start, vertex, nested = T.unsafe(nil)); end

  # Constructs directed graph recursively
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#55
  def direct_dependency(type, result = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/type_alias_regularity.rb#4
class RBS::TypeAliasRegularity
  # @return [TypeAliasRegularity] a new instance of TypeAliasRegularity
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#16
  def initialize(env:); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#59
  def build_alias_type(name); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#14
  def builder; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#67
  def compatible_args?(args1, args2); end

  # Returns the value of attribute diagnostics.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#14
  def diagnostics; end

  # source://rbs//lib/rbs/type_alias_regularity.rb#103
  def each_alias_type(type, &block); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#81
  def each_mutual_alias_defs(&block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#14
  def env; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#77
  def nonregular?(type_name); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#22
  def validate; end

  # source://rbs//lib/rbs/type_alias_regularity.rb#39
  def validate_alias_type(alias_type, names, types); end

  class << self
    # source://rbs//lib/rbs/type_alias_regularity.rb#113
    def validate(env:); end
  end
end

# source://rbs//lib/rbs/type_alias_regularity.rb#5
class RBS::TypeAliasRegularity::Diagnostic
  # @return [Diagnostic] a new instance of Diagnostic
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#8
  def initialize(type_name:, nonregular_type:); end

  # Returns the value of attribute nonregular_type.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#6
  def nonregular_type; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#6
  def type_name; end
end

# source://rbs//lib/rbs/type_name.rb#4
class RBS::TypeName
  # @return [TypeName] a new instance of TypeName
  #
  # source://rbs//lib/rbs/type_name.rb#9
  def initialize(namespace:, name:); end

  # source://rbs//lib/rbs/type_name.rb#79
  def +(other); end

  # source://rbs//lib/rbs/type_name.rb#25
  def ==(other); end

  # source://rbs//lib/rbs/type_name.rb#55
  def absolute!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#59
  def absolute?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#51
  def alias?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#47
  def class?; end

  # source://rbs//lib/rbs/type_name.rb#25
  def eql?(other); end

  # source://rbs//lib/rbs/type_name.rb#31
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#67
  def interface?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/type_name.rb#7
  def kind; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/type_name.rb#6
  def name; end

  # Returns the value of attribute namespace.
  #
  # source://rbs//lib/rbs/type_name.rb#5
  def namespace; end

  # source://rbs//lib/rbs/type_name.rb#63
  def relative!; end

  # source://rbs//lib/rbs/type_name.rb#75
  def split; end

  # source://rbs//lib/rbs/type_name.rb#39
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/type_name.rb#43
  def to_namespace; end

  # source://rbs//lib/rbs/type_name.rb#35
  def to_s; end

  # source://rbs//lib/rbs/type_name.rb#71
  def with_prefix(namespace); end
end

# source://rbs//lib/rbs/type_name_resolver.rb#4
class RBS::TypeNameResolver
  # @return [TypeNameResolver] a new instance of TypeNameResolver
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#10
  def initialize; end

  # source://rbs//lib/rbs/type_name_resolver.rb#21
  def add_names(names); end

  # Returns the value of attribute all_names.
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#7
  def all_names; end

  # Returns the value of attribute cache.
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#8
  def cache; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#61
  def has_name?(full_name); end

  # source://rbs//lib/rbs/type_name_resolver.rb#33
  def resolve(type_name, context:); end

  # source://rbs//lib/rbs/type_name_resolver.rb#26
  def try_cache(query); end

  class << self
    # source://rbs//lib/rbs/type_name_resolver.rb#15
    def from_env(env); end
  end
end

# source://rbs//lib/rbs/type_name_resolver.rb#5
class RBS::TypeNameResolver::Query < ::Struct
  def context; end
  def context=(_); end
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/types.rb#4
module RBS::Types; end

# source://rbs//lib/rbs/types.rb#330
class RBS::Types::Alias
  include ::RBS::Types::Application

  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/types.rb#335
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#331
  def location; end

  # source://rbs//lib/rbs/types.rb#357
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#349
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#345
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#341
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#207
module RBS::Types::Application
  # source://rbs//lib/rbs/types.rb#211
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/types.rb#209
  def args; end

  # source://rbs//lib/rbs/types.rb#237
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#211
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#221
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#217
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#208
  def name; end

  # source://rbs//lib/rbs/types.rb#229
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#41
module RBS::Types::Bases; end

# source://rbs//lib/rbs/types.rb#97
class RBS::Types::Bases::Any < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#42
class RBS::Types::Bases::Base
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType
  include ::RBS::Types::NoTypeName

  # @return [Base] a new instance of Base
  #
  # source://rbs//lib/rbs/types.rb#45
  def initialize(location:); end

  # source://rbs//lib/rbs/types.rb#49
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#49
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#53
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#43
  def location; end

  # source://rbs//lib/rbs/types.rb#64
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#69
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#95
class RBS::Types::Bases::Bool < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#100
class RBS::Types::Bases::Bottom < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#107
class RBS::Types::Bases::Class < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#102
class RBS::Types::Bases::Instance < ::RBS::Types::Bases::Base
  # source://rbs//lib/rbs/types.rb#103
  def sub(s); end
end

# source://rbs//lib/rbs/types.rb#98
class RBS::Types::Bases::Nil < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#101
class RBS::Types::Bases::Self < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#99
class RBS::Types::Bases::Top < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#96
class RBS::Types::Bases::Void < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#1038
class RBS::Types::Block
  # @return [Block] a new instance of Block
  #
  # source://rbs//lib/rbs/types.rb#1043
  def initialize(type:, required:, self_type: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1049
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#1072
  def map_type(&block); end

  # Returns the value of attribute required.
  #
  # source://rbs//lib/rbs/types.rb#1040
  def required; end

  # Returns the value of attribute self_type.
  #
  # source://rbs//lib/rbs/types.rb#1041
  def self_type; end

  # source://rbs//lib/rbs/types.rb#1064
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#1056
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#1039
  def type; end
end

# source://rbs//lib/rbs/types.rb#288
class RBS::Types::ClassInstance
  include ::RBS::Types::Application

  # @return [ClassInstance] a new instance of ClassInstance
  #
  # source://rbs//lib/rbs/types.rb#293
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#289
  def location; end

  # source://rbs//lib/rbs/types.rb#317
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#309
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#303
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#299
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#167
class RBS::Types::ClassSingleton
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType

  # @return [ClassSingleton] a new instance of ClassSingleton
  #
  # source://rbs//lib/rbs/types.rb#171
  def initialize(name:, location:); end

  # source://rbs//lib/rbs/types.rb#176
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#176
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#182
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#169
  def location; end

  # source://rbs//lib/rbs/types.rb#199
  def map_type_name; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#168
  def name; end

  # source://rbs//lib/rbs/types.rb#189
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#193
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#23
module RBS::Types::EmptyEachType
  # source://rbs//lib/rbs/types.rb#24
  def each_type; end

  # source://rbs//lib/rbs/types.rb#32
  def map_type(&block); end
end

# source://rbs//lib/rbs/types.rb#724
class RBS::Types::Function
  # @return [Function] a new instance of Function
  #
  # source://rbs//lib/rbs/types.rb#780
  def initialize(required_positionals:, optional_positionals:, rest_positionals:, trailing_positionals:, required_keywords:, optional_keywords:, rest_keywords:, return_type:); end

  # source://rbs//lib/rbs/types.rb#791
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#862
  def amap(array, &block); end

  # source://rbs//lib/rbs/types.rb#999
  def drop_head; end

  # source://rbs//lib/rbs/types.rb#1016
  def drop_tail; end

  # source://rbs//lib/rbs/types.rb#899
  def each_param(&block); end

  # source://rbs//lib/rbs/types.rb#884
  def each_type; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/types.rb#970
  def empty?; end

  # source://rbs//lib/rbs/types.rb#791
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#817
  def free_variables(set = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/types.rb#1029
  def has_keyword?; end

  # source://rbs//lib/rbs/types.rb#805
  def hash; end

  # source://rbs//lib/rbs/types.rb#870
  def hmapv(hash, &block); end

  # source://rbs//lib/rbs/types.rb#845
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#878
  def map_type_name(&block); end

  # Returns the value of attribute optional_keywords.
  #
  # source://rbs//lib/rbs/types.rb#776
  def optional_keywords; end

  # Returns the value of attribute optional_positionals.
  #
  # source://rbs//lib/rbs/types.rb#772
  def optional_positionals; end

  # source://rbs//lib/rbs/types.rb#980
  def param_to_s; end

  # Returns the value of attribute required_keywords.
  #
  # source://rbs//lib/rbs/types.rb#775
  def required_keywords; end

  # Returns the value of attribute required_positionals.
  #
  # source://rbs//lib/rbs/types.rb#771
  def required_positionals; end

  # Returns the value of attribute rest_keywords.
  #
  # source://rbs//lib/rbs/types.rb#777
  def rest_keywords; end

  # Returns the value of attribute rest_positionals.
  #
  # source://rbs//lib/rbs/types.rb#773
  def rest_positionals; end

  # source://rbs//lib/rbs/types.rb#995
  def return_to_s; end

  # Returns the value of attribute return_type.
  #
  # source://rbs//lib/rbs/types.rb#778
  def return_type; end

  # source://rbs//lib/rbs/types.rb#926
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#913
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute trailing_positionals.
  #
  # source://rbs//lib/rbs/types.rb#774
  def trailing_positionals; end

  # source://rbs//lib/rbs/types.rb#956
  def update(required_positionals: T.unsafe(nil), optional_positionals: T.unsafe(nil), rest_positionals: T.unsafe(nil), trailing_positionals: T.unsafe(nil), required_keywords: T.unsafe(nil), optional_keywords: T.unsafe(nil), rest_keywords: T.unsafe(nil), return_type: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#943
  def with_return_type(type); end

  class << self
    # source://rbs//lib/rbs/types.rb#930
    def empty(return_type); end
  end
end

# source://rbs//lib/rbs/types.rb#725
class RBS::Types::Function::Param
  # @return [Param] a new instance of Param
  #
  # source://rbs//lib/rbs/types.rb#730
  def initialize(type:, name:, location: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#736
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#736
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#742
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#728
  def location; end

  # source://rbs//lib/rbs/types.rb#746
  def map_type(&block); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#727
  def name; end

  # source://rbs//lib/rbs/types.rb#754
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#758
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#726
  def type; end
end

# source://rbs//lib/rbs/types.rb#246
class RBS::Types::Interface
  include ::RBS::Types::Application

  # @return [Interface] a new instance of Interface
  #
  # source://rbs//lib/rbs/types.rb#251
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#247
  def location; end

  # source://rbs//lib/rbs/types.rb#275
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#267
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#261
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#257
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#655
class RBS::Types::Intersection
  # @return [Intersection] a new instance of Intersection
  #
  # source://rbs//lib/rbs/types.rb#659
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#664
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#700
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#664
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#674
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#670
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#657
  def location; end

  # source://rbs//lib/rbs/types.rb#708
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#716
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#686
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#682
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#691
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#656
  def types; end
end

# source://rbs//lib/rbs/types.rb#1190
class RBS::Types::Literal
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType
  include ::RBS::Types::NoTypeName

  # @return [Literal] a new instance of Literal
  #
  # source://rbs//lib/rbs/types.rb#1194
  def initialize(literal:, location:); end

  # source://rbs//lib/rbs/types.rb#1199
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#1199
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#1205
  def hash; end

  # Returns the value of attribute literal.
  #
  # source://rbs//lib/rbs/types.rb#1191
  def literal; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#1192
  def location; end

  # source://rbs//lib/rbs/types.rb#1214
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1218
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#5
module RBS::Types::NoFreeVariables
  # source://rbs//lib/rbs/types.rb#6
  def free_variables(set = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#11
module RBS::Types::NoSubst
  # source://rbs//lib/rbs/types.rb#12
  def sub(s); end
end

# source://rbs//lib/rbs/types.rb#17
module RBS::Types::NoTypeName
  # source://rbs//lib/rbs/types.rb#18
  def map_type_name; end
end

# source://rbs//lib/rbs/types.rb#517
class RBS::Types::Optional
  # @return [Optional] a new instance of Optional
  #
  # source://rbs//lib/rbs/types.rb#521
  def initialize(type:, location:); end

  # source://rbs//lib/rbs/types.rb#526
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#560
  def each_type; end

  # source://rbs//lib/rbs/types.rb#526
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#536
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#532
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#519
  def location; end

  # source://rbs//lib/rbs/types.rb#575
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#568
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#544
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#540
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#548
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#518
  def type; end
end

# source://rbs//lib/rbs/types.rb#1093
class RBS::Types::Proc
  # @return [Proc] a new instance of Proc
  #
  # source://rbs//lib/rbs/types.rb#1099
  def initialize(location:, type:, block:, self_type: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1106
  def ==(other); end

  # Returns the value of attribute block.
  #
  # source://rbs//lib/rbs/types.rb#1095
  def block; end

  # source://rbs//lib/rbs/types.rb#1158
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#1106
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#1116
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1112
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#1097
  def location; end

  # source://rbs//lib/rbs/types.rb#1176
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#1167
  def map_type_name(&block); end

  # Returns the value of attribute self_type.
  #
  # source://rbs//lib/rbs/types.rb#1096
  def self_type; end

  # source://rbs//lib/rbs/types.rb#1133
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#1123
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1142
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#1094
  def type; end
end

# source://rbs//lib/rbs/types.rb#441
class RBS::Types::Record
  # @return [Record] a new instance of Record
  #
  # source://rbs//lib/rbs/types.rb#445
  def initialize(fields:, location:); end

  # source://rbs//lib/rbs/types.rb#450
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#490
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#450
  def eql?(other); end

  # Returns the value of attribute fields.
  #
  # source://rbs//lib/rbs/types.rb#442
  def fields; end

  # source://rbs//lib/rbs/types.rb#460
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#456
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#443
  def location; end

  # source://rbs//lib/rbs/types.rb#505
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#498
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#472
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#468
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#477
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#1081
module RBS::Types::SelfTypeBindingHelper
  private

  # source://rbs//lib/rbs/types.rb#1084
  def self_type_binding_to_s(t); end

  class << self
    # source://rbs//lib/rbs/types.rb#1084
    def self_type_binding_to_s(t); end
  end
end

# source://rbs//lib/rbs/types.rb#370
class RBS::Types::Tuple
  # @return [Tuple] a new instance of Tuple
  #
  # source://rbs//lib/rbs/types.rb#374
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#379
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#414
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#379
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#389
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#385
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#372
  def location; end

  # source://rbs//lib/rbs/types.rb#429
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#422
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#401
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#397
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#406
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#371
  def types; end
end

# source://rbs//lib/rbs/types.rb#587
class RBS::Types::Union
  # @return [Union] a new instance of Union
  #
  # source://rbs//lib/rbs/types.rb#591
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#596
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#631
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#596
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#606
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#602
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#589
  def location; end

  # source://rbs//lib/rbs/types.rb#639
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#647
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#618
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#614
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#623
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#588
  def types; end
end

# source://rbs//lib/rbs/types.rb#110
class RBS::Types::Variable
  include ::RBS::Types::NoTypeName
  include ::RBS::Types::EmptyEachType

  # @return [Variable] a new instance of Variable
  #
  # source://rbs//lib/rbs/types.rb#116
  def initialize(name:, location:); end

  # source://rbs//lib/rbs/types.rb#121
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#121
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#131
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#127
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#112
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#111
  def name; end

  # source://rbs//lib/rbs/types.rb#141
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#137
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#160
  def to_s(level = T.unsafe(nil)); end

  class << self
    # source://rbs//lib/rbs/types.rb#145
    def build(v); end

    # source://rbs//lib/rbs/types.rb#155
    def fresh(v = T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/errors.rb#297
class RBS::UnknownMethodAliasError < ::RBS::DefinitionError
  # @return [UnknownMethodAliasError] a new instance of UnknownMethodAliasError
  #
  # source://rbs//lib/rbs/errors.rb#303
  def initialize(type_name:, original_name:, aliased_name:, location:); end

  # Returns the value of attribute aliased_name.
  #
  # source://rbs//lib/rbs/errors.rb#300
  def aliased_name; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#301
  def location; end

  # Returns the value of attribute original_name.
  #
  # source://rbs//lib/rbs/errors.rb#299
  def original_name; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#298
  def type_name; end
end

# source://rbs//lib/rbs/version.rb#4
RBS::VERSION = T.let(T.unsafe(nil), String)

# source://rbs//lib/rbs/validator.rb#4
class RBS::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://rbs//lib/rbs/validator.rb#9
  def initialize(env:, resolver:); end

  # source://rbs//lib/rbs/validator.rb#15
  def absolute_type(type, context:); end

  # Returns the value of attribute definition_builder.
  #
  # source://rbs//lib/rbs/validator.rb#7
  def definition_builder; end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/validator.rb#5
  def env; end

  # Returns the value of attribute resolver.
  #
  # source://rbs//lib/rbs/validator.rb#6
  def resolver; end

  # source://rbs//lib/rbs/validator.rb#149
  def type_alias_dependency; end

  # source://rbs//lib/rbs/validator.rb#153
  def type_alias_regularity; end

  # source://rbs//lib/rbs/validator.rb#100
  def validate_method_definition(method_def, type_name:); end

  # Validates presence of the relative type, and application arity match.
  #
  # source://rbs//lib/rbs/validator.rb#22
  def validate_type(type, context:); end

  # source://rbs//lib/rbs/validator.rb#59
  def validate_type_alias(entry:); end

  # source://rbs//lib/rbs/validator.rb#115
  def validate_type_params(params, type_name:, location:, method_name: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/variance_calculator.rb#4
class RBS::VarianceCalculator
  # @return [VarianceCalculator] a new instance of VarianceCalculator
  #
  # source://rbs//lib/rbs/variance_calculator.rb#78
  def initialize(builder:); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/variance_calculator.rb#76
  def builder; end

  # source://rbs//lib/rbs/variance_calculator.rb#82
  def env; end

  # source://rbs//lib/rbs/variance_calculator.rb#166
  def function(type, result:, context:); end

  # source://rbs//lib/rbs/variance_calculator.rb#98
  def in_inherit(name:, args:, variables:); end

  # source://rbs//lib/rbs/variance_calculator.rb#86
  def in_method_type(method_type:, variables:); end

  # source://rbs//lib/rbs/variance_calculator.rb#110
  def in_type_alias(name:); end

  # source://rbs//lib/rbs/variance_calculator.rb#173
  def negate(variance); end

  # source://rbs//lib/rbs/variance_calculator.rb#118
  def type(type, result:, context:); end
end

# source://rbs//lib/rbs/variance_calculator.rb#5
class RBS::VarianceCalculator::Result
  # @return [Result] a new instance of Result
  #
  # source://rbs//lib/rbs/variance_calculator.rb#8
  def initialize(variables:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#45
  def compatible?(var, with_annotation:); end

  # source://rbs//lib/rbs/variance_calculator.rb#24
  def contravariant(x); end

  # source://rbs//lib/rbs/variance_calculator.rb#15
  def covariant(x); end

  # source://rbs//lib/rbs/variance_calculator.rb#37
  def each(&block); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#41
  def include?(name); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#60
  def incompatible?(params); end

  # source://rbs//lib/rbs/variance_calculator.rb#33
  def invariant(x); end

  # Returns the value of attribute result.
  #
  # source://rbs//lib/rbs/variance_calculator.rb#6
  def result; end
end

# source://rbs//lib/rbs/vendorer.rb#4
class RBS::Vendorer
  # @return [Vendorer] a new instance of Vendorer
  #
  # source://rbs//lib/rbs/vendorer.rb#8
  def initialize(vendor_dir:, loader:); end

  # source://rbs//lib/rbs/vendorer.rb#21
  def clean!; end

  # source://rbs//lib/rbs/vendorer.rb#28
  def copy!; end

  # source://rbs//lib/rbs/vendorer.rb#13
  def ensure_dir; end

  # Returns the value of attribute loader.
  #
  # source://rbs//lib/rbs/vendorer.rb#6
  def loader; end

  # Returns the value of attribute vendor_dir.
  #
  # source://rbs//lib/rbs/vendorer.rb#5
  def vendor_dir; end
end

# source://rbs//lib/rbs/writer.rb#4
class RBS::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://rbs//lib/rbs/writer.rb#8
  def initialize(out:); end

  # source://rbs//lib/rbs/writer.rb#314
  def attribute(kind, attr); end

  # source://rbs//lib/rbs/writer.rb#23
  def indent(size = T.unsafe(nil)); end

  # Returns the value of attribute indentation.
  #
  # source://rbs//lib/rbs/writer.rb#6
  def indentation; end

  # source://rbs//lib/rbs/writer.rb#244
  def method_name(name); end

  # source://rbs//lib/rbs/writer.rb#170
  def name_and_args(name, args); end

  # source://rbs//lib/rbs/writer.rb#158
  def name_and_params(name, params); end

  # Returns the value of attribute out.
  #
  # source://rbs//lib/rbs/writer.rb#5
  def out; end

  # source://rbs//lib/rbs/writer.rb#30
  def prefix; end

  # source://rbs//lib/rbs/writer.rb#18
  def preserve!(preserve: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/writer.rb#14
  def preserve?; end

  # source://rbs//lib/rbs/writer.rb#344
  def preserve_empty_line(prev, decl); end

  # source://rbs//lib/rbs/writer.rb#180
  def put_lines(lines, leading_spaces:); end

  # source://rbs//lib/rbs/writer.rb#34
  def puts(string = T.unsafe(nil)); end

  # source://rbs//lib/rbs/writer.rb#73
  def write(decls); end

  # source://rbs//lib/rbs/writer.rb#42
  def write_annotation(annotations); end

  # source://rbs//lib/rbs/writer.rb#60
  def write_comment(comment); end

  # source://rbs//lib/rbs/writer.rb#82
  def write_decl(decl); end

  # source://rbs//lib/rbs/writer.rb#265
  def write_def(member); end

  # source://rbs//lib/rbs/writer.rb#257
  def write_loc_source(located); end

  # source://rbs//lib/rbs/writer.rb#190
  def write_member(member); end
end

# source://rbs//lib/rdoc/discover.rb#8
class RDoc::Parser::RBS < ::RDoc::Parser
  # source://rbs//lib/rdoc/discover.rb#10
  def scan; end
end
