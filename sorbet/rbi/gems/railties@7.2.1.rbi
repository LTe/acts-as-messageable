# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.


module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    def app_class; end
    def app_class=(_arg0); end
    def application; end
    def application=(_arg0); end
    def autoloaders; end
    def backtrace_cleaner; end
    def cache; end
    def cache=(_arg0); end
    def configuration; end
    def deprecator; end
    def env; end
    def env=(environment); end
    def error; end
    def gem_version; end
    def groups(*groups); end
    def initialize!(*_arg0, **_arg1, &_arg2); end
    def initialized?(*_arg0, **_arg1, &_arg2); end
    def logger; end
    def logger=(_arg0); end
    def public_path; end
    def root; end
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  def assets; end
  def assets=(_arg0); end
  def autoloaders; end
  def build_middleware_stack; end
  def config; end
  def config=(_arg0); end
  def config_for(name, env: T.unsafe(nil)); end
  def console(&blk); end
  def credentials; end
  def credentials=(_arg0); end
  def default_url_options(*_arg0, **_arg1, &_arg2); end
  def default_url_options=(arg); end
  def deprecators; end
  def eager_load!; end
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end
  def env_config; end
  def executor; end
  def generators(&blk); end
  def helpers_paths; end
  def initialize!(group = T.unsafe(nil)); end
  def initialized?; end
  def initializer(name, opts = T.unsafe(nil), &block); end
  def initializers; end
  def isolate_namespace(mod); end
  def key_generator(secret_key_base = T.unsafe(nil)); end
  def load_generators(app = T.unsafe(nil)); end
  def message_verifier(verifier_name); end
  def message_verifiers; end
  def migration_railties; end
  def name; end
  def rake_tasks(&block); end
  def reload_routes!; end
  def reloader; end
  def reloaders; end
  def require_environment!; end
  def routes_reloader; end
  def run_load_hooks!; end
  def runner(&blk); end
  def sandbox; end
  def sandbox=(_arg0); end
  def sandbox?; end
  def secret_key_base; end
  def server(&blk); end
  def to_app; end
  def watchable_args; end

  protected

  def default_middleware_stack; end
  def ensure_generator_templates_added; end
  def ordered_railties; end
  def railties_initializers(current); end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_server_blocks(app); end
  def run_tasks_blocks(app); end

  private

  def build_middleware; end
  def build_request(env); end
  def coerce_same_site_protection(protection); end
  def filter_parameters; end

  class << self
    def add_lib_to_load_path!(root); end
    def create(initial_variable_values = T.unsafe(nil), &block); end
    def find_root(from); end
    def inherited(base); end
    def instance; end
    def new(*_arg0); end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  def initialize(*_arg0); end

  def add_autoload_paths_to_load_path; end
  def add_autoload_paths_to_load_path=(_arg0); end
  def allow_concurrency; end
  def allow_concurrency=(_arg0); end
  def annotations; end
  def api_only; end
  def api_only=(value); end
  def asset_host; end
  def asset_host=(_arg0); end
  def assume_ssl; end
  def assume_ssl=(_arg0); end
  def autoflush_log; end
  def autoflush_log=(_arg0); end
  def autoload_lib(ignore:); end
  def autoload_lib_once(ignore:); end
  def beginning_of_week; end
  def beginning_of_week=(_arg0); end
  def broadcast_log_level; end
  def cache_classes; end
  def cache_classes=(_arg0); end
  def cache_store; end
  def cache_store=(_arg0); end
  def colorize_logging; end
  def colorize_logging=(val); end
  def consider_all_requests_local; end
  def consider_all_requests_local=(_arg0); end
  def console; end
  def console=(_arg0); end
  def content_security_policy(&block); end
  def content_security_policy_nonce_directives; end
  def content_security_policy_nonce_directives=(_arg0); end
  def content_security_policy_nonce_generator; end
  def content_security_policy_nonce_generator=(_arg0); end
  def content_security_policy_report_only; end
  def content_security_policy_report_only=(_arg0); end
  def credentials; end
  def credentials=(_arg0); end
  def database_configuration; end
  def debug_exception_response_format; end
  def debug_exception_response_format=(_arg0); end
  def default_log_file; end
  def disable_sandbox; end
  def disable_sandbox=(_arg0); end
  def dom_testing_default_html_version; end
  def dom_testing_default_html_version=(_arg0); end
  def eager_load; end
  def eager_load=(_arg0); end
  def enable_reloading; end
  def enable_reloading=(value); end
  def encoding; end
  def encoding=(value); end
  def exceptions_app; end
  def exceptions_app=(_arg0); end
  def file_watcher; end
  def file_watcher=(_arg0); end
  def filter_parameters; end
  def filter_parameters=(_arg0); end
  def filter_redirect; end
  def filter_redirect=(_arg0); end
  def force_ssl; end
  def force_ssl=(_arg0); end
  def helpers_paths; end
  def helpers_paths=(_arg0); end
  def host_authorization; end
  def host_authorization=(_arg0); end
  def hosts; end
  def hosts=(_arg0); end
  def inspect; end
  def load_database_yaml; end
  def load_defaults(target_version); end
  def loaded_config_version; end
  def log_file_size; end
  def log_file_size=(_arg0); end
  def log_formatter; end
  def log_formatter=(_arg0); end
  def log_level; end
  def log_level=(level); end
  def log_tags; end
  def log_tags=(_arg0); end
  def logger; end
  def logger=(_arg0); end
  def paths; end
  def permissions_policy(&block); end
  def precompile_filter_parameters; end
  def precompile_filter_parameters=(_arg0); end
  def public_file_server; end
  def public_file_server=(_arg0); end
  def railties_order; end
  def railties_order=(_arg0); end
  def rake_eager_load; end
  def rake_eager_load=(_arg0); end
  def read_encrypted_secrets; end
  def read_encrypted_secrets=(value); end
  def relative_url_root; end
  def relative_url_root=(_arg0); end
  def reload_classes_only_on_change; end
  def reload_classes_only_on_change=(_arg0); end
  def reloading_enabled?; end
  def require_master_key; end
  def require_master_key=(_arg0); end
  def sandbox_by_default; end
  def sandbox_by_default=(_arg0); end
  def secret_key_base; end
  def secret_key_base=(new_secret_key_base); end
  def server_timing; end
  def server_timing=(_arg0); end
  def session_options; end
  def session_options=(_arg0); end
  def session_store(new_session_store = T.unsafe(nil), **options); end
  def session_store?; end
  def ssl_options; end
  def ssl_options=(_arg0); end
  def time_zone; end
  def time_zone=(_arg0); end
  def x; end
  def x=(_arg0); end
  def yjit; end
  def yjit=(_arg0); end

  private

  def credentials_defaults; end
  def generate_local_secret; end
  def generate_local_secret?; end
end

class Rails::Application::Configuration::Custom
  def initialize; end

  def method_missing(method, *args); end

  private

  def respond_to_missing?(symbol, _); end
end

class Rails::Application::DefaultMiddlewareStack
  def initialize(app, config, paths); end

  def app; end
  def build_stack; end
  def config; end
  def paths; end

  private

  def load_rack_cache; end
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    def complete(_state); end
    def run; end
  end
end

class Rails::Application::Finisher::MonitorHook
  def initialize(monitor = T.unsafe(nil)); end

  def complete(_state); end
  def run; end
end

Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  def initialize; end

  def __callbacks; end
  def __callbacks?; end
  def eager_load; end
  def eager_load=(_arg0); end
  def execute(*_arg0, **_arg1, &_arg2); end
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end
  def external_routes; end
  def paths; end
  def reload!; end
  def route_sets; end
  def run_after_load_paths=(_arg0); end
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  def clear!; end
  def finalize!; end
  def load_paths; end
  def revert; end
  def run_after_load_paths; end
  def updater; end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  def _layout(lookup_context, formats); end
  def disable_content_security_policy_nonce!; end
  def local_request?; end
  def require_local!; end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

class Rails::Autoloaders
  include ::Enumerable

  def initialize; end

  def each; end
  def log!; end
  def logger=(logger); end
  def main; end
  def once; end
  def zeitwerk_enabled?; end
end

module Rails::Autoloaders::Inflector
  class << self
    def camelize(basename, _abspath); end
    def inflect(overrides); end
  end
end

class Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  def initialize; end

  def clean(backtrace, kind = T.unsafe(nil)); end
  def clean_frame(frame, kind = T.unsafe(nil)); end
  def filter(backtrace, kind = T.unsafe(nil)); end
end

Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)
Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)
module Rails::Configuration; end

class Rails::Configuration::Generators
  def initialize; end

  def after_generate(&block); end
  def after_generate_callbacks; end
  def aliases; end
  def aliases=(_arg0); end
  def api_only; end
  def api_only=(_arg0); end
  def apply_rubocop_autocorrect_after_generate!; end
  def colorize_logging; end
  def colorize_logging=(_arg0); end
  def fallbacks; end
  def fallbacks=(_arg0); end
  def hidden_namespaces; end
  def hide_namespace(namespace); end
  def method_missing(method, *args); end
  def options; end
  def options=(_arg0); end
  def templates; end
  def templates=(_arg0); end

  private

  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  def +(other); end
  def delete(*_arg0, **_arg1, &_arg2); end
  def insert(*_arg0, **_arg1, &_arg2); end
  def insert_after(*_arg0, **_arg1, &_arg2); end
  def insert_before(*_arg0, **_arg1, &_arg2); end
  def merge_into(other); end
  def move(*_arg0, **_arg1, &_arg2); end
  def move_after(*_arg0, **_arg1, &_arg2); end
  def move_before(*_arg0, **_arg1, &_arg2); end
  def swap(*_arg0, **_arg1, &_arg2); end
  def unshift(*_arg0, **_arg1, &_arg2); end
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  def delete_operations; end
  def operations; end
end

class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  def initialize; end

  def __callbacks; end
  def __callbacks?; end
  def _load_seed_callbacks; end
  def _run_load_seed_callbacks(&block); end
  def app; end
  def call(env); end
  def config; end
  def eager_load!; end
  def endpoint; end
  def engine_name(*_arg0, **_arg1, &_arg2); end
  def env_config; end
  def helpers; end
  def helpers_paths; end
  def isolated?(&_arg0); end
  def load_console(app = T.unsafe(nil)); end
  def load_generators(app = T.unsafe(nil)); end
  def load_runner(app = T.unsafe(nil)); end
  def load_seed; end
  def load_server(app = T.unsafe(nil)); end
  def load_tasks(app = T.unsafe(nil)); end
  def middleware(*_arg0, **_arg1, &_arg2); end
  def paths(*_arg0, **_arg1, &_arg2); end
  def railties; end
  def root(*_arg0, **_arg1, &_arg2); end
  def routes(&block); end
  def routes?; end

  protected

  def run_tasks_blocks(*_arg0); end

  private

  def _all_autoload_once_paths; end
  def _all_autoload_paths; end
  def _all_load_paths(add_autoload_paths_to_load_path); end
  def build_middleware; end
  def build_request(env); end
  def default_middleware_stack; end
  def fixtures_in_root_and_not_in_vendor_or_dot_dir?(fixtures); end
  def has_migrations?; end
  def load_config_initializer(initializer); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _load_seed_callbacks; end
    def _load_seed_callbacks=(value); end
    def called_from; end
    def called_from=(_arg0); end
    def eager_load!(*_arg0, **_arg1, &_arg2); end
    def endpoint(endpoint = T.unsafe(nil)); end
    def engine_name(name = T.unsafe(nil)); end
    def find(path); end
    def find_root(from); end
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end
    def inherited(base); end
    def isolate_namespace(mod); end
    def isolated; end
    def isolated=(_arg0); end
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  def initialize(root = T.unsafe(nil)); end

  def all_autoload_once_paths; end
  def all_autoload_paths; end
  def all_eager_load_paths; end
  def autoload_once_paths; end
  def autoload_once_paths=(_arg0); end
  def autoload_paths; end
  def autoload_paths=(_arg0); end
  def eager_load_paths; end
  def eager_load_paths=(_arg0); end
  def generators; end
  def javascript_path; end
  def javascript_path=(_arg0); end
  def middleware; end
  def middleware=(_arg0); end
  def paths; end
  def root; end
  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  def initialize; end

  def -(others); end
  def _all; end
  def each(*args, &block); end
end

module Rails::Generators; end

module Rails::Generators::Actions
  def initialize(*_arg0); end

  def add_source(source, options = T.unsafe(nil), &block); end
  def application(data = T.unsafe(nil), options = T.unsafe(nil)); end
  def environment(data = T.unsafe(nil), options = T.unsafe(nil)); end
  def gem(*args); end
  def gem_group(*names, &block); end
  def generate(what, *args); end
  def git(commands = T.unsafe(nil)); end
  def github(repo, options = T.unsafe(nil), &block); end
  def initializer(filename, data = T.unsafe(nil)); end
  def lib(filename, data = T.unsafe(nil)); end
  def rails_command(command, options = T.unsafe(nil)); end
  def rake(command, options = T.unsafe(nil)); end
  def rakefile(filename, data = T.unsafe(nil)); end
  def readme(path); end
  def route(routing_code, namespace: T.unsafe(nil)); end
  def vendor(filename, data = T.unsafe(nil)); end

  private

  def append_file_with_newline(path, str, options = T.unsafe(nil)); end
  def execute_command(executor, command, options = T.unsafe(nil)); end
  def indentation; end
  def log(*args); end
  def match_file(path, pattern); end
  def optimize_indentation(value, amount = T.unsafe(nil)); end
  def quote(value); end
  def rebase_indentation(value, amount = T.unsafe(nil)); end
  def route_namespace_pattern(namespace); end
  def with_indentation(&block); end
end

class Rails::Generators::Actions::CreateMigration < ::Thor::Actions::CreateFile
  def existing_migration; end
  def exists?; end
  def identical?; end
  def invoke!; end
  def migration_dir; end
  def migration_file_name; end
  def relative_existing_migration; end
  def revoke!; end

  private

  def on_conflict_behavior; end
  def say_status(status, color, message = T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def initialize(name); end

  def destroy; end
  def errors; end
  def name; end
  def save; end
  def update(params = T.unsafe(nil)); end

  class << self
    def all(klass); end
    def build(klass, params = T.unsafe(nil)); end
    def find(klass, params = T.unsafe(nil)); end
  end
end

class Rails::Generators::Base < ::Thor::Group
  include ::Thor::Actions
  include ::Rails::Generators::Actions
  extend ::Thor::Actions::ClassMethods

  private

  def class_collisions(*class_names); end
  def extract_last_module(nesting); end
  def gem_ruby_version; end
  def indent(content, multiplier = T.unsafe(nil)); end
  def module_namespacing(&block); end
  def namespace; end
  def namespace_dirs; end
  def namespaced?; end
  def namespaced_path; end
  def wrap_with_namespace(content); end

  class << self
    def add_shebang_option!; end
    def banner; end
    def base_name; end
    def base_root; end
    def class_option(name, options = T.unsafe(nil)); end
    def default_aliases_for_option(name, options); end
    def default_for_option(config, name, options, default); end
    def default_generator_root; end
    def default_source_root; end
    def default_value_for_option(name, options); end
    def desc(description = T.unsafe(nil)); end
    def exit_on_failure?; end
    def generator_name; end
    def hide!; end
    def hook_for(*names, &block); end
    def hooks; end
    def inherited(base); end
    def namespace(name = T.unsafe(nil)); end
    def prepare_for_invocation(name, value); end
    def remove_hook_for(*names); end
    def source_root(path = T.unsafe(nil)); end
    def usage_path; end
  end
end

class Rails::Generators::Error < ::Thor::Error; end

class Rails::Generators::GeneratedAttribute
  def initialize(name, type = T.unsafe(nil), index_type = T.unsafe(nil), attr_options = T.unsafe(nil)); end

  def attachment?; end
  def attachments?; end
  def attr_options; end
  def column_name; end
  def default; end
  def field_type; end
  def foreign_key?; end
  def has_index?; end
  def has_uniq_index?; end
  def human_name; end
  def index_name; end
  def index_name=(_arg0); end
  def inject_index_options; end
  def inject_options; end
  def name; end
  def name=(_arg0); end
  def options_for_migration; end
  def password_digest?; end
  def plural_name; end
  def polymorphic?; end
  def reference?; end
  def required?; end
  def rich_text?; end
  def singular_name; end
  def to_s; end
  def token?; end
  def type; end
  def type=(_arg0); end
  def virtual?; end

  private

  def print_attribute_options; end

  class << self
    def dangerous_name?(name); end
    def parse(column_definition); end
    def reference?(type); end
    def valid_index_type?(index_type); end
    def valid_type?(type); end

    private

    def parse_type_and_options(type); end
  end
end

Rails::Generators::GeneratedAttribute::DEFAULT_TYPES = T.let(T.unsafe(nil), Array)
Rails::Generators::GeneratedAttribute::INDEX_OPTIONS = T.let(T.unsafe(nil), Array)
Rails::Generators::GeneratedAttribute::UNIQ_INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Generators::Migration::ClassMethods

  def create_migration(destination, data, config = T.unsafe(nil), &block); end
  def migration_class_name; end
  def migration_file_name; end
  def migration_number; end
  def migration_template(source, destination, config = T.unsafe(nil)); end
  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end
  def migration_exists?(dirname, file_name); end
  def migration_lookup_at(dirname); end
  def next_migration_number(dirname); end
end

class Rails::Generators::NamedBase < ::Rails::Generators::Base
  def initialize(args, *options); end

  def file_name; end
  def js_template(source, destination); end
  def name; end
  def name=(_arg0); end
  def template(source, *args, &block); end

  private

  def application_name; end
  def assign_names!(name); end
  def attributes_names; end
  def class_name; end
  def class_path; end
  def edit_helper(*_arg0, **_arg1, &_arg2); end
  def file_path; end
  def fixture_file_name; end
  def human_name; end
  def i18n_scope; end
  def index_helper(type: T.unsafe(nil)); end
  def inside_template; end
  def inside_template?; end
  def model_resource_name(base_name = T.unsafe(nil), prefix: T.unsafe(nil)); end
  def mountable_engine?; end
  def namespaced_class_path; end
  def new_helper(type: T.unsafe(nil)); end
  def parse_attributes!; end
  def plural_file_name; end
  def plural_name; end
  def plural_route_name; end
  def plural_table_name; end
  def pluralize_table_names?; end
  def redirect_resource_name; end
  def regular_class_path; end
  def route_url; end
  def show_helper(arg = T.unsafe(nil), type: T.unsafe(nil)); end
  def singular_name; end
  def singular_route_name; end
  def singular_table_name; end
  def table_name; end
  def uncountable?; end
  def url_helper_prefix; end

  class << self
    def check_class_collision(options = T.unsafe(nil)); end
  end
end

class Rails::HealthController < ::ActionController::Base
  def show; end

  private

  def _layout(lookup_context, formats); end
  def html_status(color:); end
  def render_down; end
  def render_up; end

  class << self
    def middleware_stack; end
    def rescue_handlers; end
  end
end

module Rails::Info
  def properties; end
  def properties=(val); end

  class << self
    def inspect; end
    def properties; end
    def properties=(val); end
    def property(name, value = T.unsafe(nil)); end
    def to_html; end
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  def index; end
  def properties; end
  def routes; end

  private

  def _layout(lookup_context, formats); end
  def _layout_from_proc; end
  def matching_routes(query:, exact_match:); end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  def initializers; end
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  def initializer(name, opts = T.unsafe(nil), &blk); end
  def initializers; end
  def initializers_chain; end
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  def +(other); end
  def tsort_each_child(initializer, &block); end
  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  def initialize(name, context, options, &block); end

  def after; end
  def before; end
  def belongs_to?(group); end
  def bind(context); end
  def block; end
  def context_class; end
  def name; end
  def run(*args); end
end

module Rails::LineFiltering
  def run(reporter, options = T.unsafe(nil)); end
end

class Rails::MailersController < ::Rails::ApplicationController
  def download; end
  def index; end
  def preview; end

  private

  def _layout(lookup_context, formats); end
  def attachment_url(attachment); end
  def attachments_for(email); end
  def find_part(format); end
  def find_preferred_part(*formats); end
  def find_preview; end
  def locale_query(locale); end
  def part_query(mime_type); end
  def set_locale(&block); end
  def show_previews?; end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  def attachment_url(*_arg0, **_arg1, &_arg2); end
  def locale_query(*_arg0, **_arg1, &_arg2); end
  def part_query(*_arg0, **_arg1, &_arg2); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  def initialize(root, current, paths, options = T.unsafe(nil)); end

  def <<(path); end
  def absolute_current; end
  def autoload!; end
  def autoload?; end
  def autoload_once!; end
  def autoload_once?; end
  def children; end
  def concat(paths); end
  def each(&block); end
  def eager_load!; end
  def eager_load?; end
  def existent; end
  def existent_directories; end
  def expanded; end
  def extensions; end
  def first; end
  def glob; end
  def glob=(_arg0); end
  def last; end
  def load_path!; end
  def load_path?; end
  def paths; end
  def push(path); end
  def skip_autoload!; end
  def skip_autoload_once!; end
  def skip_eager_load!; end
  def skip_load_path!; end
  def to_a; end
  def to_ary; end
  def unshift(*paths); end

  private

  def files_in(path); end
end

class Rails::Paths::Root
  def initialize(path); end

  def [](path); end
  def []=(path, value); end
  def add(path, options = T.unsafe(nil)); end
  def all_paths; end
  def autoload_once; end
  def autoload_paths; end
  def eager_load; end
  def keys; end
  def load_paths; end
  def path; end
  def path=(_arg0); end
  def values; end
  def values_at(*list); end

  private

  def filter_by(&block); end
end

class Rails::PwaController < ::Rails::ApplicationController
  def manifest; end
  def service_worker; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

module Rails::Rack; end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  def initialize(app, taggers = T.unsafe(nil)); end

  def call(env); end

  private

  def call_app(request, env); end
  def compute_tags(request); end
  def finish_request_instrumentation(handle, logger_tag_pop_count); end
  def logger; end
  def started_request_message(request); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  def initialize; end

  def config; end
  def configure(&block); end
  def inspect; end
  def railtie_name(*_arg0, **_arg1, &_arg2); end
  def railtie_namespace; end

  protected

  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_server_blocks(app); end
  def run_tasks_blocks(app); end

  private

  def each_registered_block(type, &block); end

  class << self
    def <=>(other); end
    def abstract_railtie?; end
    def config(*_arg0, **_arg1, &_arg2); end
    def configure(&block); end
    def console(&blk); end
    def generators(&blk); end
    def inherited(subclass); end
    def instance; end
    def railtie_name(name = T.unsafe(nil)); end
    def rake_tasks(&blk); end
    def runner(&blk); end
    def server(&blk); end
    def subclasses; end

    protected

    def increment_load_index; end
    def load_index; end

    private

    def generate_railtie_name(string); end
    def method_missing(name, *_arg1, **_arg2, &_arg3); end
    def new(*_arg0); end
    def register_block_for(type, &blk); end
    def respond_to_missing?(name, _); end
  end
end

Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  def initialize; end

  def after_initialize(&block); end
  def after_routes_loaded(&block); end
  def app_generators; end
  def app_middleware; end
  def before_configuration(&block); end
  def before_eager_load(&block); end
  def before_initialize(&block); end
  def eager_load_namespaces; end
  def respond_to?(name, include_private = T.unsafe(nil)); end
  def to_prepare(&blk); end
  def to_prepare_blocks; end
  def watchable_dirs; end
  def watchable_files; end

  private

  def actual_method?(key); end
  def method_missing(name, *args, &blk); end

  class << self
    def eager_load_namespaces; end
  end
end

class Rails::SourceAnnotationExtractor
  def initialize(tag); end

  def display(results, options = T.unsafe(nil)); end
  def find(dirs); end
  def find_in(dir); end
  def tag; end

  class << self
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  def to_s(options = T.unsafe(nil)); end

  class << self
    def directories; end
    def extensions; end
    def register_directories(*dirs); end
    def register_extensions(*exts, &block); end
    def register_tags(*additional_tags); end
    def tags; end
  end
end

class Rails::SourceAnnotationExtractor::ParserExtractor < ::Struct
  def annotations(file); end
end

class Rails::SourceAnnotationExtractor::ParserExtractor::Parser < ::Ripper
  def initialize(source, pattern:); end

  def comments; end
  def on_comment(value); end
  def pattern; end
end

class Rails::SourceAnnotationExtractor::PatternExtractor < ::Struct
  def annotations(file); end
end

module Rails::TestUnit; end

class Rails::TestUnit::CompositeFilter
  def initialize(runnable, filter, patterns); end

  def ===(method); end
  def named_filter; end

  private

  def derive_line_filters(patterns); end
  def derive_named_filter(filter); end
end

class Rails::TestUnit::Filter
  def initialize(runnable, file, line_or_range); end

  def ===(method); end

  private

  def definition_for(method); end
end

class Rails::TestUnit::InvalidTestError < ::StandardError
  def initialize(path, suggestion); end
end

class Rails::TestUnit::Runner
  def filters; end

  class << self
    def attach_before_load_options(opts); end
    def compose_filter(runnable, filter); end
    def filters; end
    def load_tests(argv); end
    def parse_options(argv); end
    def run(argv = T.unsafe(nil)); end
    def run_from_rake(test_command, argv = T.unsafe(nil)); end

    private

    def default_test_exclude_glob; end
    def default_test_glob; end
    def extract_filters(argv); end
    def list_tests(patterns); end
    def normalize_declarative_test_filter(filter); end
    def path_argument?(arg); end
    def regexp_filter?(arg); end
  end
end

Rails::TestUnit::Runner::PATH_ARGUMENT_PATTERN = T.let(T.unsafe(nil), Regexp)
Rails::TestUnit::Runner::TEST_FOLDERS = T.let(T.unsafe(nil), Array)

module Rails::TestUnit::TestParser
  class << self
    def definition_for(method); end
  end
end

class Rails::TestUnitRailtie < ::Rails::Railtie; end
module Rails::VERSION; end
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  def index; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end
